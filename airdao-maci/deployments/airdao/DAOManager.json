{
  "address": "0x3D304b7960d5d96D45735bbF16Bb89baa03030A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPollFactory",
          "name": "_pollFactory",
          "type": "address"
        },
        {
          "internalType": "contract IMessageProcessorFactory",
          "name": "_messageProcessorFactory",
          "type": "address"
        },
        {
          "internalType": "contract ITallyFactory",
          "name": "_tallyFactory",
          "type": "address"
        },
        {
          "internalType": "contract SignUpGatekeeper",
          "name": "_signUpGatekeeper",
          "type": "address"
        },
        {
          "internalType": "contract InitialVoiceCreditProxy",
          "name": "_initialVoiceCreditProxy",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_stateTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint256[5]",
          "name": "_emptyBallotRoots",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DefaultZeroBadIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepthTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPubKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NumberOfLeavesCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        }
      ],
      "name": "PollAddressDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        }
      ],
      "name": "PollDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoseidonHashLibrariesNotLinked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PubKeyAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManySignups",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "daoName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creatorWallet",
          "type": "address"
        }
      ],
      "name": "DAOCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coordinatorPubKeyX",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coordinatorPubKeyY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum DomainObjs.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "DeployPoll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "uploaderWallet",
          "type": "address"
        }
      ],
      "name": "DocumentUploaded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userWallet",
          "type": "address"
        }
      ],
      "name": "MemberAddedToDAO",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct MACI.PollContracts",
          "name": "pollContracts",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "options",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PollCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tallyJsonCID",
          "type": "string"
        }
      ],
      "name": "PollTallyCIDUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposerWallet",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteChoice",
          "type": "uint256"
        }
      ],
      "name": "QVVoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stateIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_userPubKeyX",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_userPubKeyY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_voiceCreditBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "SignUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userWallet",
          "type": "address"
        }
      ],
      "name": "UserCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userWallet",
          "type": "address"
        }
      ],
      "name": "UserJoinedDAO",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteChoice",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daoId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_userWalletAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_adminWalletAddress",
          "type": "address"
        }
      ],
      "name": "addMembertoDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daoId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callerWalletAddress",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCreationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coordinatorPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_daoName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_daoDescription",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_joiningThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proposingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_joiningTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPrivate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_userWalletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_discordID",
          "type": "string"
        }
      ],
      "name": "createDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_options",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "enum DomainObjs.Mode",
          "name": "isQv",
          "type": "uint8"
        }
      ],
      "name": "createPoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_proposalTitleAndDesc",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_votingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daoId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_governanceTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userWalletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_beginningTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_passingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_voteOnce",
          "type": "bool"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_userEmail",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_profileImage",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_userWalletAddress",
          "type": "address"
        }
      ],
      "name": "createUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "daoIdtoDao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creator",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "daoName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "daoDescription",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "joiningThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "governanceTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "discordID",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "daoIdtoDocuments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "daoIdtoMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "daoIdtoProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "enum DomainObjs.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "deployPoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "documentIdtoDocument",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "documentTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "documentDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "upoladerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "emptyBallotRoots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "fetchPoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encodedOptions",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poll",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "messageProcessor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tally",
                  "type": "address"
                }
              ],
              "internalType": "struct MACI.PollContracts",
              "name": "pollContracts",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfOptions",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "options",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "tallyJsonCID",
              "type": "string"
            }
          ],
          "internalType": "struct DAOManager.PollData",
          "name": "poll_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perPage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ascending",
          "type": "bool"
        }
      ],
      "name": "fetchPolls",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encodedOptions",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poll",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "messageProcessor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tally",
                  "type": "address"
                }
              ],
              "internalType": "struct MACI.PollContracts",
              "name": "pollContracts",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfOptions",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "options",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "tallyJsonCID",
              "type": "string"
            }
          ],
          "internalType": "struct DAOManager.PollData[]",
          "name": "polls_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getAllAbstainVotes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daoId",
          "type": "uint256"
        }
      ],
      "name": "getAllDaoDocuments",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daoId",
          "type": "uint256"
        }
      ],
      "name": "getAllDaoMembers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daoId",
          "type": "uint256"
        }
      ],
      "name": "getAllDaoProposals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getAllNoVotes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_userId",
          "type": "uint256"
        }
      ],
      "name": "getAllUserDaos",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getAllVoters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getAllYesVotes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "getPoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            }
          ],
          "internalType": "struct MACI.PollContracts",
          "name": "pollContracts",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        }
      ],
      "name": "getPollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStateTreeRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "array",
          "type": "uint256[2]"
        }
      ],
      "name": "hash2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "array",
          "type": "uint256[3]"
        }
      ],
      "name": "hash3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "array",
          "type": "uint256[4]"
        }
      ],
      "name": "hash4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "array",
          "type": "uint256[5]"
        }
      ],
      "name": "hash5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "left",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "right",
          "type": "uint256"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "_message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_encPubKey",
          "type": "tuple"
        }
      ],
      "name": "hashMessageAndEncPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DomainObjs.PubKey",
              "name": "pubKey",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "voiceCreditBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.StateLeaf",
          "name": "_stateLeaf",
          "type": "tuple"
        }
      ],
      "name": "hashStateLeaf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ciphertext",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialVoiceCreditProxy",
      "outputs": [
        {
          "internalType": "contract InitialVoiceCreditProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPublicKeyRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daoId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callerWalletAddress",
          "type": "address"
        }
      ],
      "name": "joinDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lazyIMTData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxIndex",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "numberOfLeaves",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSignups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageProcessorFactory",
      "outputs": [
        {
          "internalType": "contract IMessageProcessorFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSignUps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "signUps",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "dataToPad",
          "type": "uint256[2]"
        }
      ],
      "name": "padAndHashMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "padKey",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pollFactory",
      "outputs": [
        {
          "internalType": "contract IPollFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pollIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "polls",
      "outputs": [
        {
          "internalType": "address",
          "name": "poll",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "messageProcessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tally",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalIdtoAbstainVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalIdtoNoVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalIdtoProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proposalTitleAndDesc",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "proposerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "votingTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "beginningTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "passingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voteOnce",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalIdtoVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalIdtoYesVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quadraticNoMappings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quadraticYesMappings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numTokens",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callerWalletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_voteFor",
          "type": "uint256"
        }
      ],
      "name": "qvVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        }
      ],
      "name": "sha256Hash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_pubKey",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signUpGatekeeperData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_initialVoiceCreditProxyData",
          "type": "bytes"
        }
      ],
      "name": "signUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signUpGatekeeper",
      "outputs": [
        {
          "internalType": "contract SignUpGatekeeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateTreeDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tallyFactory",
      "outputs": [
        {
          "internalType": "contract ITallyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDaos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDocuments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treeDepths",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "intStateTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeSubDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "voteOptionTreeDepth",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tallyJsonCID",
          "type": "string"
        }
      ],
      "name": "updatePollTallyCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_documentTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_documentDesc",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_daoId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        }
      ],
      "name": "uploadDocument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userIdtoDaos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userIdtoUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "userEmail",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "profileImage",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "userWallet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userSideAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userWallettoUserId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vkRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteFor",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callerWalletAddress",
          "type": "address"
        }
      ],
      "name": "voteForProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xce5e3a9015405e00fa55c1582c2cf36ecf9f8286c671d22a6bea3ccc68833e18",
  "receipt": {
    "to": null,
    "from": "0xa83A121E9957d69Fd24b133b280eBD4823380dBF",
    "contractAddress": "0x3D304b7960d5d96D45735bbF16Bb89baa03030A3",
    "transactionIndex": 0,
    "gasUsed": "6968819",
    "logsBloom": "0x
    "blockHash": "0x81b3991772db6b5ee6e05e9de1d6bbab199a760942f55d02f71afc9f211d47dc",
    "transactionHash": "0xce5e3a9015405e00fa55c1582c2cf36ecf9f8286c671d22a6bea3ccc68833e18",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1783876,
        "transactionHash": "0xce5e3a9015405e00fa55c1582c2cf36ecf9f8286c671d22a6bea3ccc68833e18",
        "address": "0x3D304b7960d5d96D45735bbF16Bb89baa03030A3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a83a121e9957d69fd24b133b280ebd4823380dbf"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x81b3991772db6b5ee6e05e9de1d6bbab199a760942f55d02f71afc9f211d47dc"
      }
    ],
    "blockNumber": 1783876,
    "cumulativeGasUsed": "6968819",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xffBb7Fe32e9e67Bf56B225583891770aBcb33A75",
    "0xa1f6ebc198aDe67ca05ABaF600B816bB965a1bB7",
    "0xbf1989e54E881446D3E8E1890bfFAcA4dE9c6C69",
    "0xDF8C49A0fB4DdB416B11DE81fE85D8dF8690Aa7C",
    "0x66071763EE8d2a8c68C4C9c973ef5f9e30E8A5a2",
    10,
    [
      "16015576667038038422103932363190100635991292382181099511410843174865570503661",
      "166510078825589460025300915201657086611944528317298994959376081297530246971",
      "10057734083972610459557695472359628128485394923403014377687504571662791937025",
      "4904828619307091008204672239231377290495002626534171783829482835985709082773",
      "18694062287284245784028624966421731916526814537891066525886866373016385890569"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "9963ddb2324073a26a885cd3325ff438",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPollFactory\",\"name\":\"_pollFactory\",\"type\":\"address\"},{\"internalType\":\"contract IMessageProcessorFactory\",\"name\":\"_messageProcessorFactory\",\"type\":\"address\"},{\"internalType\":\"contract ITallyFactory\",\"name\":\"_tallyFactory\",\"type\":\"address\"},{\"internalType\":\"contract SignUpGatekeeper\",\"name\":\"_signUpGatekeeper\",\"type\":\"address\"},{\"internalType\":\"contract InitialVoiceCreditProxy\",\"name\":\"_initialVoiceCreditProxy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint256[5]\",\"name\":\"_emptyBallotRoots\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DefaultZeroBadIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepthTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPubKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberOfLeavesCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"}],\"name\":\"PollAddressDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"}],\"name\":\"PollDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoseidonHashLibrariesNotLinked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PubKeyAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySignups\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorWallet\",\"type\":\"address\"}],\"name\":\"DAOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coordinatorPubKeyX\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coordinatorPubKeyY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"DeployPoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uploaderWallet\",\"type\":\"address\"}],\"name\":\"DocumentUploaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"name\":\"MemberAddedToDAO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"name\":\"PollTallyCIDUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposerWallet\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteChoice\",\"type\":\"uint256\"}],\"name\":\"QVVoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stateIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userPubKeyX\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userPubKeyY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voiceCreditBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SignUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"name\":\"UserJoinedDAO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteChoice\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminWalletAddress\",\"type\":\"address\"}],\"name\":\"addMembertoDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callerWalletAddress\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCreationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinatorPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_daoName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_daoDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_joiningThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joiningTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPrivate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_userWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_discordID\",\"type\":\"string\"}],\"name\":\"createDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"isQv\",\"type\":\"uint8\"}],\"name\":\"createPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_proposalTitleAndDesc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_votingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_governanceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userWalletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_beginningTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_passingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_voteOnce\",\"type\":\"bool\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_userEmail\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_profileImage\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_userWalletAddress\",\"type\":\"address\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoIdtoDao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creator\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"joiningThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"governanceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"discordID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoIdtoDocuments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoIdtoMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoIdtoProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"deployPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"documentIdtoDocument\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"documentTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"upoladerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emptyBallotRoots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"fetchPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfOptions\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"internalType\":\"struct DAOManager.PollData\",\"name\":\"poll_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ascending\",\"type\":\"bool\"}],\"name\":\"fetchPolls\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfOptions\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"internalType\":\"struct DAOManager.PollData[]\",\"name\":\"polls_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getAllAbstainVotes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoId\",\"type\":\"uint256\"}],\"name\":\"getAllDaoDocuments\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoId\",\"type\":\"uint256\"}],\"name\":\"getAllDaoMembers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoId\",\"type\":\"uint256\"}],\"name\":\"getAllDaoProposals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getAllNoVotes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"getAllUserDaos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getAllVoters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getAllYesVotes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"getPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"}],\"name\":\"getPollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateTreeRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"array\",\"type\":\"uint256[2]\"}],\"name\":\"hash2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"array\",\"type\":\"uint256[3]\"}],\"name\":\"hash3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"array\",\"type\":\"uint256[4]\"}],\"name\":\"hash4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"array\",\"type\":\"uint256[5]\"}],\"name\":\"hash5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"_message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_encPubKey\",\"type\":\"tuple\"}],\"name\":\"hashMessageAndEncPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"voiceCreditBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.StateLeaf\",\"name\":\"_stateLeaf\",\"type\":\"tuple\"}],\"name\":\"hashStateLeaf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ciphertext\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialVoiceCreditProxy\",\"outputs\":[{\"internalType\":\"contract InitialVoiceCreditProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPublicKeyRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callerWalletAddress\",\"type\":\"address\"}],\"name\":\"joinDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lazyIMTData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxIndex\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"numberOfLeaves\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSignups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageProcessorFactory\",\"outputs\":[{\"internalType\":\"contract IMessageProcessorFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSignUps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"signUps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"dataToPad\",\"type\":\"uint256[2]\"}],\"name\":\"padAndHashMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"padKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pollFactory\",\"outputs\":[{\"internalType\":\"contract IPollFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pollIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"polls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalIdtoAbstainVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalIdtoNoVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalIdtoProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalTitleAndDesc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proposerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"votingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"beginningTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voteOnce\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalIdtoVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalIdtoYesVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quadraticNoMappings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quadraticYesMappings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callerWalletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_voteFor\",\"type\":\"uint256\"}],\"name\":\"qvVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"}],\"name\":\"sha256Hash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_pubKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signUpGatekeeperData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_initialVoiceCreditProxyData\",\"type\":\"bytes\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signUpGatekeeper\",\"outputs\":[{\"internalType\":\"contract SignUpGatekeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateTreeDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyFactory\",\"outputs\":[{\"internalType\":\"contract ITallyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDaos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDocuments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeDepths\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tallyJsonCID\",\"type\":\"string\"}],\"name\":\"updatePollTallyCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_documentTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_documentDesc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_daoId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"uploadDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIdtoDaos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIdtoUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"userEmail\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userSideAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWallettoUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vkRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteFor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callerWalletAddress\",\"type\":\"address\"}],\"name\":\"voteForProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)\":{\"params\":{\"_coordinatorPubKey\":\"The coordinator's public key\",\"_duration\":\"How long should the Poll last for\",\"_mode\":\"Voting mode\",\"_treeDepths\":\"The depth of the Merkle trees\",\"_verifier\":\"The Verifier Contract\",\"_vkRegistry\":\"The VkRegistry Contract\"}},\"getPoll(uint256)\":{\"params\":{\"_pollId\":\"The identifier of the Poll to retrieve\"},\"returns\":{\"pollContracts\":\"The Poll contract object\"}},\"getStateTreeRoot()\":{\"returns\":{\"root\":\"The Merkle root\"}},\"hash2(uint256[2])\":{\"params\":{\"array\":\"An array of two uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hash3(uint256[3])\":{\"params\":{\"array\":\"An array of three uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the three elements.\"}},\"hash4(uint256[4])\":{\"params\":{\"array\":\"An array of four uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the four elements.\"}},\"hash5(uint256[5])\":{\"params\":{\"array\":\"An array of five uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the five elements.\"}},\"hashLeftRight(uint256,uint256)\":{\"params\":{\"left\":\"the first element to hash.\",\"right\":\"the second element to hash.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))\":{\"params\":{\"_encPubKey\":\"the encryption public key to be hashed\",\"_message\":\"the message to be hashed\"},\"returns\":{\"msgHash\":\"The hash of the message and the encryption public key\"}},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"params\":{\"_stateLeaf\":\"the state leaf to be hashed\"},\"returns\":{\"ciphertext\":\"The hash of the state leaf\"}},\"numSignUps()\":{\"returns\":{\"signUps\":\"numsignUps The number of signups\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"padAndHashMessage(uint256[2])\":{\"params\":{\"dataToPad\":\"the data to be padded\"},\"returns\":{\"message\":\"The padded message\",\"msgHash\":\"The hash of the padded message and encryption key\",\"padKey\":\"The padding public key\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sha256Hash(uint256[])\":{\"params\":{\"array\":\"The array of uint256 elements.\"},\"returns\":{\"result\":\"The SHA256 hash of the array.\"}},\"signUp((uint256,uint256),bytes,bytes)\":{\"params\":{\"_initialVoiceCreditProxyData\":\"Data to pass to the     InitialVoiceCreditProxy, which allows it to determine how many voice     credits this user should have.\",\"_pubKey\":\"The user's desired public key.\",\"_signUpGatekeeperData\":\"Data to pass to the sign-up gatekeeper's     register() function. For instance, the POAPGatekeeper or     SignUpTokenGatekeeper requires this value to be the ABI-encoded     token ID.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"DefaultZeroBadIndex()\":[{\"notice\":\"Custom errors\"}],\"InvalidMessage()\":[{\"notice\":\"custom errors\"}],\"PoseidonHashLibrariesNotLinked()\":[{\"notice\":\"custom errors\"}]},\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)\":{\"notice\":\"Deploy a new Poll contract.\"},\"emptyBallotRoots(uint256)\":{\"notice\":\"The roots of the empty ballot trees\"},\"getPoll(uint256)\":{\"notice\":\"Get the Poll details\"},\"getStateTreeRoot()\":{\"notice\":\"Return the main root of the StateAq contract\"},\"hash2(uint256[2])\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hash3(uint256[3])\":{\"notice\":\"Computes the Poseidon hash of three uint256 elements.\"},\"hash4(uint256[4])\":{\"notice\":\"Computes the Poseidon hash of four uint256 elements.\"},\"hash5(uint256[5])\":{\"notice\":\"Computes the Poseidon hash of five uint256 elements.\"},\"hashLeftRight(uint256,uint256)\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))\":{\"notice\":\"An utility function used to hash a MACI message and an encryption public key\"},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"notice\":\"An utility function used to hash a state leaf\"},\"initialVoiceCreditProxy()\":{\"notice\":\"The contract which provides the values of the initial voice credit balance per user\"},\"lazyIMTData()\":{\"notice\":\"The state tree. Represents a mapping between each user's public key and their voice credit balance.\"},\"messageProcessorFactory()\":{\"notice\":\"Factory contract that deploy a MessageProcessor contract\"},\"nextPollId()\":{\"notice\":\"Each poll has an incrementing ID\"},\"numSignUps()\":{\"notice\":\"Get the number of signups\"},\"padAndHashMessage(uint256[2])\":{\"notice\":\"An utility function used to pad and hash a MACI message\"},\"pollFactory()\":{\"notice\":\"Factory contract that deploy a Poll contract\"},\"polls(uint256)\":{\"notice\":\"A mapping of poll IDs to Poll contracts.\"},\"sha256Hash(uint256[])\":{\"notice\":\"Computes the SHA256 hash of an array of uint256 elements.\"},\"signUp((uint256,uint256),bytes,bytes)\":{\"notice\":\"Allows any eligible user sign up. The sign-up gatekeeper should prevent double sign-ups or ineligible users from doing so.  This function will only succeed if the sign-up deadline has not passed. It also enqueues a fresh state leaf into the state AccQueue.\"},\"signUpGatekeeper()\":{\"notice\":\"Address of the SignUpGatekeeper, a contract which determines whether a user may sign up to vote\"},\"stateTreeDepth()\":{\"notice\":\"The state tree depth is fixed. As such it should be as large as feasible so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608 this should also match the parameter of the circom circuits.IMPORTANT: remember to change the ballot tree depth in contracts/ts/genEmptyBallotRootsContract.ts file if we change the state tree depth!\"},\"tallyFactory()\":{\"notice\":\"Factory contract that deploy a Tally contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/maci-contracts/DAOManager.sol\":\"DAOManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/maci-contracts/DAOManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n// Imports\\nimport \\\"./GovernanceToken.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { MACI } from \\\"maci-contracts/contracts/MACI.sol\\\";\\nimport { IPollFactory } from \\\"maci-contracts/contracts/interfaces/IPollFactory.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"maci-contracts/contracts/interfaces/IMPFactory.sol\\\";\\nimport { ITallyFactory } from \\\"maci-contracts/contracts/interfaces/ITallyFactory.sol\\\";\\nimport { SignUpGatekeeper } from \\\"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\\\";\\nimport { InitialVoiceCreditProxy } from \\\"maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\\\";\\n\\n// Contract Declaration\\ncontract DAOManager is MACI, Ownable(msg.sender) {\\n    // State Variables\\n    address public userSideAdmin;\\n    uint256 public totalUsers = 0;\\n    uint256 public totalProposals = 0;\\n    uint256 public totalDaos = 0;\\n    uint256 public contractCreationTime = 0;\\n    uint256 public totalDocuments = 0;\\n  \\tTreeDepths public treeDepths;\\n\\tPubKey public coordinatorPubKey;\\n\\taddress public verifier;\\n\\taddress public vkRegistry;\\n\\n\\t\\n\\n    mapping(uint256 => user) public userIdtoUser;\\n    mapping(address => uint256) public userWallettoUserId;\\n    mapping(uint256 => dao) public daoIdtoDao;\\n    mapping(uint256 => proposal) public proposalIdtoProposal;\\n    mapping(uint256 => uint256[]) public daoIdtoMembers;\\n    mapping(uint256 => uint256[]) public daoIdtoProposals;\\n    mapping(uint256 => uint256[]) public proposalIdtoVoters;\\n    mapping(uint256 => uint256[]) public proposalIdtoYesVoters;\\n    mapping(uint256 => uint256[]) public proposalIdtoNoVoters;\\n    mapping(uint256 => uint256[]) public proposalIdtoAbstainVoters;\\n    mapping(uint256 => uint256[]) public userIdtoDaos;\\n    mapping(uint256 => mapping(uint256 => uint256)) public quadraticYesMappings;\\n    mapping(uint256 => mapping(uint256 => uint256)) public quadraticNoMappings;\\n    mapping(uint256 => Document) public documentIdtoDocument;\\n    mapping(uint256 => uint256[]) public daoIdtoDocuments;\\n    mapping(uint256 => PollData) internal _polls;\\n    mapping(address => uint256) public pollIds;\\n    // pubkey.x => pubkey.y => bool\\n\\tmapping(uint256 => mapping(uint256 => bool)) public isPublicKeyRegistered;\\n\\n\\n    // Events\\n    event UserCreated(uint256 indexed userId, string userName, address userWallet);\\n    event DAOCreated(uint256 indexed daoId, string daoName, address creatorWallet);\\n    event ProposalCreated(uint256 indexed proposalId, uint256 daoId, address proposerWallet);\\n    event MemberAddedToDAO(uint256 indexed daoId, uint256 userId, address userWallet);\\n    event UserJoinedDAO(uint256 indexed daoId, uint256 userId, address userWallet);\\n    event DocumentUploaded(uint256 indexed documentId, uint256 daoId, address uploaderWallet);\\n    event VoteCast(uint256 indexed proposalId, uint256 userId, uint256 voteChoice);\\n    event QVVoteCast(uint256 indexed proposalId, uint256 userId, uint256 numTokens, uint256 voteChoice);\\n    event PollCreated(\\n\\t\\tuint256 indexed pollId,\\n\\t\\taddress indexed creator,\\n\\t\\tDAOManager.PollContracts pollContracts,\\n\\t\\tstring name,\\n\\t\\tstring[] options,\\n\\t\\tstring metadata,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 endTime\\n\\t);\\n\\n\\tevent PollTallyCIDUpdated(uint256 indexed pollId, string tallyJsonCID);\\n\\n    // Structs\\n    struct user {\\n        uint256 userId;\\n        string userName;\\n        string userEmail;\\n        string description;\\n        string profileImage;\\n        address userWallet;\\n    }\\n\\n    struct dao {\\n        uint256 daoId;\\n        uint256 creator;\\n        string daoName;\\n        string daoDescription;\\n        uint256 joiningThreshold;\\n        uint256 proposingThreshold;\\n        address governanceTokenAddress;\\n        bool isPrivate;\\n        string discordID;\\n    }\\n\\n    struct proposal {\\n        uint256 proposalId;\\n        uint256 proposalType;\\n        string proposalTitleAndDesc;\\n        uint256 proposerId;\\n        uint256 votingThreshold;\\n        uint256 daoId;\\n        address votingTokenAddress;\\n        uint256 beginningTime;\\n        uint256 endingTime;\\n        uint256 passingThreshold;\\n        bool voteOnce;\\n    }\\n\\n    struct Document {\\n        uint256 documentId;\\n        string documentTitle;\\n        string documentDescription;\\n        string ipfsHash;\\n        uint256 upoladerId;\\n        uint256 daoId;\\n    }\\n\\n    struct PollData {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tbytes encodedOptions;\\n\\t\\tstring metadata;\\n\\t\\tDAOManager.PollContracts pollContracts;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 endTime;\\n\\t\\tuint256 numOfOptions;\\n\\t\\tstring[] options;\\n\\t\\tstring tallyJsonCID;\\n\\t}\\n\\n    //Errors \\n    error PubKeyAlreadyRegistered();\\n\\terror PollAddressDoesNotExist(address _poll);\\n\\n    // Constructor\\n    constructor(IPollFactory _pollFactory,\\n\\t\\tIMessageProcessorFactory _messageProcessorFactory,\\n\\t\\tITallyFactory _tallyFactory,\\n\\t\\tSignUpGatekeeper _signUpGatekeeper,\\n\\t\\tInitialVoiceCreditProxy _initialVoiceCreditProxy,\\n\\t\\tuint8 _stateTreeDepth,\\n\\t\\tuint256[5] memory _emptyBallotRoots)  MACI(\\n\\t\\t\\t_pollFactory,\\n\\t\\t\\t_messageProcessorFactory,\\n\\t\\t\\t_tallyFactory,\\n\\t\\t\\t_signUpGatekeeper,\\n\\t\\t\\t_initialVoiceCreditProxy,\\n\\t\\t\\t_stateTreeDepth,\\n\\t\\t\\t_emptyBallotRoots\\n\\t\\t) {\\n        userSideAdmin = msg.sender;\\n        contractCreationTime = block.timestamp;\\n       \\n\\n    }\\n\\n    // External Functions\\n    function createUser(\\n        string memory _userName,\\n        string memory _userEmail,\\n        string memory _description,\\n        string memory _profileImage,\\n        address _userWalletAddress\\n    ) public {\\n        totalUsers++;\\n        user memory u1 = user(totalUsers, _userName, _userEmail, _description, _profileImage, _userWalletAddress);\\n        userIdtoUser[totalUsers] = u1;\\n        userWallettoUserId[_userWalletAddress] = totalUsers;\\n        \\n        emit UserCreated(totalUsers, _userName, _userWalletAddress);\\n    }\\n\\n    function createDao(\\n        string memory _daoName,\\n        string memory _daoDescription,\\n        uint256 _joiningThreshold,\\n        uint256 _proposingThreshold,\\n        address _joiningTokenAddress,\\n        bool _isPrivate,\\n        address _userWalletAddress,\\n        string memory _discordID\\n    ) public {\\n        totalDaos++;\\n        uint256 creatorId = userWallettoUserId[_userWalletAddress];\\n        require(creatorId != 0, \\\"User is not registered into the system\\\");\\n        dao memory d1 = dao(\\n            totalDaos,\\n            creatorId,\\n            _daoName,\\n            _daoDescription,\\n            _joiningThreshold * 1000000000000000000,\\n            _proposingThreshold * 1000000000000000000,\\n            _joiningTokenAddress,\\n            _isPrivate,\\n            _discordID\\n        );\\n        daoIdtoDao[totalDaos] = d1;\\n        daoIdtoMembers[totalDaos].push(creatorId);\\n        userIdtoDaos[creatorId].push(totalDaos);\\n        \\n        emit DAOCreated(totalDaos, _daoName, _userWalletAddress);\\n    }\\n\\n    function createProposal(\\n        uint256 _proposalType,\\n        string memory _proposalTitleAndDesc,\\n        uint256 _votingThreshold,\\n        uint256 _daoId,\\n        address _governanceTokenAddress,\\n        address _userWalletAddress,\\n        uint256 _beginningTime,\\n        uint256 _endingTime,\\n        uint256 _passingThreshold,\\n        bool _voteOnce\\n    ) public {\\n        address daoGovernanceToken = daoIdtoDao[_daoId].governanceTokenAddress;\\n        GovernanceToken govtToken = GovernanceToken(daoGovernanceToken);\\n        require(\\n            govtToken.balanceOf(_userWalletAddress) >= daoIdtoDao[_daoId].proposingThreshold,\\n            \\\"You do not have enough tokens\\\"\\n        );\\n        totalProposals++;\\n        uint256 tempProposerId = userWallettoUserId[_userWalletAddress];\\n        proposal memory p1 = proposal(\\n            totalProposals,\\n            _proposalType,\\n            _proposalTitleAndDesc,\\n            tempProposerId,\\n            _votingThreshold * 1000000000000000000,\\n            _daoId,\\n            _governanceTokenAddress,\\n            _beginningTime,\\n            _endingTime,\\n            _passingThreshold,\\n            _voteOnce\\n        );\\n        proposalIdtoProposal[totalProposals] = p1;\\n        daoIdtoProposals[_daoId].push(totalProposals);\\n        \\n        emit ProposalCreated(totalProposals, _daoId, _userWalletAddress);\\n    }\\n\\n    function addMembertoDao(uint256 _daoId, address _userWalletAddress, address _adminWalletAddress) public {\\n        uint256 tempUserId = userWallettoUserId[_adminWalletAddress];\\n        require(tempUserId == daoIdtoDao[_daoId].creator, \\\"Only admin can add users to the dao\\\");\\n        uint256 newUserId = userWallettoUserId[_userWalletAddress];\\n        require(newUserId > 0, \\\"User is not registered into the system\\\");\\n        daoIdtoMembers[_daoId].push(newUserId);\\n        userIdtoDaos[newUserId].push(_daoId);\\n        \\n        emit MemberAddedToDAO(_daoId, newUserId, _userWalletAddress);\\n    }\\n\\n    function joinDao(uint256 _daoId, address _callerWalletAddress) public {\\n        require(daoIdtoDao[_daoId].isPrivate == false, \\\"Dao is Private\\\");\\n        address tempTokenAddress = daoIdtoDao[_daoId].governanceTokenAddress;\\n        GovernanceToken govtToken = GovernanceToken(tempTokenAddress);\\n        uint256 userBalance = govtToken.balanceOf(_callerWalletAddress);\\n        require(userBalance >= daoIdtoDao[_daoId].joiningThreshold, \\\"Not enough Tokens\\\");\\n        uint256 newUserId = userWallettoUserId[_callerWalletAddress];\\n        require(newUserId > 0, \\\"User is not registered into the system\\\");\\n        daoIdtoMembers[_daoId].push(newUserId);\\n        userIdtoDaos[newUserId].push(_daoId);\\n        \\n        emit UserJoinedDAO(_daoId, newUserId, _callerWalletAddress);\\n    }\\n\\n    function uploadDocument(\\n        string memory _documentTitle,\\n        string memory _documentDesc,\\n        uint256 _daoId,\\n        string memory _ipfsHash\\n    ) public {\\n        checkMembership(_daoId, msg.sender);\\n        totalDocuments++;\\n        uint256 tempUserId = userWallettoUserId[msg.sender];\\n        Document memory d1 = Document(totalDocuments, _documentTitle, _documentDesc, _ipfsHash, tempUserId, _daoId);\\n        documentIdtoDocument[totalDocuments] = d1;\\n        daoIdtoDocuments[_daoId].push(totalDocuments);\\n        \\n        emit DocumentUploaded(totalDocuments, _daoId, msg.sender);\\n    }\\n\\n\\n    function setConfig(\\n\\t\\tTreeDepths memory _treeDepths,\\n\\t\\tPubKey memory _coordinatorPubKey,\\n\\t\\taddress _verifier,\\n\\t\\taddress _vkRegistry\\n\\t) public onlyOwner {\\n\\t\\ttreeDepths = _treeDepths;\\n\\t\\tcoordinatorPubKey = _coordinatorPubKey;\\n\\t\\tverifier = _verifier;\\n\\t\\tvkRegistry = _vkRegistry;\\n\\t}\\n\\n\\t/// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\\n\\t/// double sign-ups or ineligible users from doing so.  This function will\\n\\t/// only succeed if the sign-up deadline has not passed. It also enqueues a\\n\\t/// fresh state leaf into the state AccQueue.\\n\\t/// @param _pubKey The user's desired public key.\\n\\t/// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\\n\\t///     register() function. For instance, the POAPGatekeeper or\\n\\t///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\\n\\t///     token ID.\\n\\t/// @param _initialVoiceCreditProxyData Data to pass to the\\n\\t///     InitialVoiceCreditProxy, which allows it to determine how many voice\\n\\t///     credits this user should have.\\n\\tfunction signUp(\\n\\t\\tPubKey memory _pubKey,\\n\\t\\tbytes memory _signUpGatekeeperData,\\n\\t\\tbytes memory _initialVoiceCreditProxyData\\n\\t) public override {\\n\\t\\t// check if the pubkey is already registered\\n\\t\\tif (isPublicKeyRegistered[_pubKey.x][_pubKey.y])\\n\\t\\t\\trevert PubKeyAlreadyRegistered();\\n\\n\\t\\tsuper.signUp(\\n\\t\\t\\t_pubKey,\\n\\t\\t\\t_signUpGatekeeperData,\\n\\t\\t\\t_initialVoiceCreditProxyData\\n\\t\\t);\\n\\n\\t\\tisPublicKeyRegistered[_pubKey.x][_pubKey.y] = true;\\n\\t}\\n\\n\\tfunction createPoll(\\n\\t\\tstring calldata _name,\\n\\t\\tstring[] calldata _options,\\n\\t\\tstring calldata _metadata,\\n\\t\\tuint256 _duration,\\n\\t\\tMode isQv\\n\\t) public onlyOwner {\\n\\t\\t// TODO: check if the number of options are more than limit\\n\\n\\t\\tuint256 pollId = nextPollId;\\n\\n\\t\\tdeployPoll(\\n\\t\\t\\t_duration,\\n\\t\\t\\ttreeDepths,\\n\\t\\t\\tcoordinatorPubKey,\\n\\t\\t\\tverifier,\\n\\t\\t\\tvkRegistry,\\n\\t\\t\\tisQv\\n\\t\\t);\\n\\n\\t\\tPollContracts memory pollContracts = MACI.polls[pollId];\\n\\n\\t\\tpollIds[pollContracts.poll] = pollId;\\n\\n\\t\\t// encode options to bytes for retrieval\\n\\t\\tbytes memory encodedOptions = abi.encode(_options);\\n\\n\\t\\tuint256 endTime = block.timestamp + _duration;\\n\\n\\t\\t// create poll\\n\\t\\t_polls[pollId] = PollData({\\n\\t\\t\\tid: pollId,\\n\\t\\t\\tname: _name,\\n\\t\\t\\tencodedOptions: encodedOptions,\\n\\t\\t\\tnumOfOptions: _options.length,\\n\\t\\t\\tmetadata: _metadata,\\n\\t\\t\\tstartTime: block.timestamp,\\n\\t\\t\\tendTime: endTime,\\n\\t\\t\\tpollContracts: pollContracts,\\n\\t\\t\\toptions: _options,\\n\\t\\t\\ttallyJsonCID: \\\"\\\"\\n\\t\\t});\\n\\n\\t\\temit PollCreated(\\n\\t\\t\\tpollId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tpollContracts,\\n\\t\\t\\t_name,\\n\\t\\t\\t_options,\\n\\t\\t\\t_metadata,\\n\\t\\t\\tblock.timestamp,\\n\\t\\t\\tendTime\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getPollId(address _poll) public view returns (uint256 pollId) {\\n\\t\\tif (pollIds[_poll] >= nextPollId) revert PollAddressDoesNotExist(_poll);\\n\\t\\tpollId = pollIds[_poll];\\n\\t}\\n\\n\\tfunction updatePollTallyCID(\\n\\t\\tuint256 _pollId,\\n\\t\\tstring calldata _tallyJsonCID\\n\\t) public onlyOwner {\\n\\t\\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n\\t\\tPollData storage poll = _polls[_pollId];\\n\\t\\tpoll.tallyJsonCID = _tallyJsonCID;\\n\\n\\t\\temit PollTallyCIDUpdated(_pollId, _tallyJsonCID);\\n\\t}\\n\\n\\tfunction fetchPolls(\\n\\t\\tuint256 _page,\\n\\t\\tuint256 _perPage,\\n\\t\\tbool _ascending\\n\\t) public view returns (PollData[] memory polls_) {\\n\\t\\tuint256 start = (_page - 1) * _perPage;\\n\\t\\tuint256 end = start + _perPage - 1;\\n\\n\\t\\tif (start >= nextPollId) {\\n\\t\\t\\treturn new PollData[](0);\\n\\t\\t}\\n\\n\\t\\tif (end >= nextPollId) {\\n\\t\\t\\tend = nextPollId - 1;\\n\\t\\t}\\n\\n\\t\\tpolls_ = new PollData[](end - start + 1);\\n\\n\\t\\tuint256 index = 0;\\n\\t\\tfor (uint256 i = start; i <= end; i++) {\\n\\t\\t\\tuint256 pollIndex = i;\\n\\t\\t\\tif (!_ascending) {\\n\\t\\t\\t\\tpollIndex = nextPollId - i - 1;\\n\\t\\t\\t}\\n\\t\\t\\tpolls_[index++] = _polls[pollIndex];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction fetchPoll(\\n\\t\\tuint256 _pollId\\n\\t) public view returns (PollData memory poll_) {\\n\\t\\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n\\t\\treturn _polls[_pollId];\\n\\t}\\n\\n    function voteForProposal(uint256 _proposalId, uint256 _voteFor, address _callerWalletAddress) public {\\n        address funcCaller = _callerWalletAddress;\\n        uint256 tempDaoId = proposalIdtoProposal[_proposalId].daoId;\\n        require(checkMembership(tempDaoId, _callerWalletAddress), \\\"Only members of the dao can vote\\\");\\n        require(block.timestamp >= proposalIdtoProposal[_proposalId].beginningTime, \\\"Voting has not started\\\");\\n        require(block.timestamp < proposalIdtoProposal[_proposalId].endingTime, \\\"Voting Time has ended\\\");\\n        require(proposalIdtoProposal[_proposalId].proposalType == 1, \\\"Voting Type is not yes/no\\\");\\n        address votingTokenAddress = proposalIdtoProposal[_proposalId].votingTokenAddress;\\n        GovernanceToken govtToken = GovernanceToken(votingTokenAddress);\\n        uint256 userBalance = govtToken.balanceOf(msg.sender);\\n        uint256 tempUserId = userWallettoUserId[msg.sender];\\n        require(userBalance >= proposalIdtoProposal[_proposalId].votingThreshold, \\\"Not enough Tokens\\\");\\n        bool voteSignal = hasVoted(tempUserId, _proposalId);\\n        if (proposalIdtoProposal[_proposalId].voteOnce) {\\n            require(!voteSignal, \\\"User has Voted\\\");\\n        }\\n        govtToken.transferFrom(funcCaller, address(this), proposalIdtoProposal[_proposalId].votingThreshold);\\n        if (_voteFor == 1) {\\n            proposalIdtoYesVoters[_proposalId].push(tempUserId);\\n        } else if (_voteFor == 2) {\\n            proposalIdtoNoVoters[_proposalId].push(tempUserId);\\n        } else {\\n            proposalIdtoAbstainVoters[_proposalId].push(tempUserId);\\n        }\\n        \\n        emit VoteCast(_proposalId, tempUserId, _voteFor);\\n    }\\n\\n    function qvVoting(uint256 _proposalId, uint256 _numTokens, address _callerWalletAddress, uint256 _voteFor) public {\\n        address funcCaller = _callerWalletAddress;\\n        uint256 tempDaoId = proposalIdtoProposal[_proposalId].daoId;\\n        require(checkMembership(tempDaoId, _callerWalletAddress), \\\"Only members of the dao can vote\\\");\\n        require(block.timestamp >= proposalIdtoProposal[_proposalId].beginningTime, \\\"Voting has not started\\\");\\n        require(block.timestamp < proposalIdtoProposal[_proposalId].endingTime, \\\"Voting Time has ended\\\");\\n        address votingTokenAddress = proposalIdtoProposal[_proposalId].votingTokenAddress;\\n        GovernanceToken govtToken = GovernanceToken(votingTokenAddress);\\n        uint256 userBalance = govtToken.balanceOf(msg.sender);\\n        uint256 tempUserId = userWallettoUserId[msg.sender];\\n        require(userBalance >= proposalIdtoProposal[_proposalId].votingThreshold, \\\"Not enough Tokens\\\");\\n        require(_numTokens >= proposalIdtoProposal[_proposalId].votingThreshold, \\\"Not enough Tokens\\\");\\n        govtToken.transferFrom(funcCaller, address(this), _numTokens);\\n        uint256 weight = sqrt(_numTokens);\\n        if (_voteFor == 1) {\\n            quadraticYesMappings[_proposalId][tempUserId] += weight;\\n        } else {\\n            quadraticNoMappings[_proposalId][tempUserId] += weight;\\n        }\\n        \\n        emit QVVoteCast(_proposalId, tempUserId, _numTokens, _voteFor);\\n    }\\n\\n    // Internal & Private View & Pure Functions\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function hasVoted(uint256 _userId, uint256 _proposalId) public view returns (bool) {\\n        for (uint256 i = 0; i < proposalIdtoVoters[_proposalId].length; i++) {\\n            if (_userId == proposalIdtoVoters[_proposalId][i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function checkMembership(uint256 _daoId, address _callerWalletAddress) public view returns (bool) {\\n        uint256 tempUserId = userWallettoUserId[_callerWalletAddress];\\n        uint256 totalMembers = daoIdtoMembers[_daoId].length;\\n        for (uint256 i = 0; i < totalMembers; i++) {\\n            if (tempUserId == daoIdtoMembers[_daoId][i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // External & Public View & Pure Functions\\n    function getAllDaoMembers(uint256 _daoId) public view returns (uint256[] memory) {\\n        return daoIdtoMembers[_daoId];\\n    }\\n\\n    function getAllDaoProposals(uint256 _daoId) public view returns (uint256[] memory) {\\n        return daoIdtoProposals[_daoId];\\n    }\\n\\n    function getAllVoters(uint256 _proposalId) public view returns (uint256[] memory) {\\n        return proposalIdtoVoters[_proposalId];\\n    }\\n\\n    function getAllYesVotes(uint256 _proposalId) public view returns (uint256[] memory) {\\n        return proposalIdtoYesVoters[_proposalId];\\n    }\\n\\n    function getAllNoVotes(uint256 _proposalId) public view returns (uint256[] memory) {\\n        return proposalIdtoNoVoters[_proposalId];\\n    }\\n\\n    function getAllAbstainVotes(uint256 _proposalId) public view returns (uint256[] memory) {\\n        return proposalIdtoAbstainVoters[_proposalId];\\n    }\\n\\n    function getAllUserDaos(uint256 _userId) public view returns (uint256[] memory) {\\n        return userIdtoDaos[_userId];\\n    }\\n\\n    function getAllDaoDocuments(uint256 _daoId) public view returns (uint256[] memory) {\\n        return daoIdtoDocuments[_daoId];\\n    }\\n}\",\"keccak256\":\"0xe6a2bf9db210b1f9a85b0ad0439ad1bd7b2125187c8c11f4b50654758254162d\",\"license\":\"MIT\"},\"contracts/maci-contracts/GovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\n\\ncontract GovernanceToken is ERC20, ERC20Burnable, ERC20Permit {\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint256 _totalSupply\\n    ) ERC20(_tokenName, _tokenSymbol) ERC20Permit(\\\"MyToken\\\") {\\n        _mint(msg.sender, _totalSupply * 10 ** decimals());\\n    }\\n}\",\"keccak256\":\"0x4dc8d91259bf3fc61bfc8bd6d1a1ccfbfe4c3d7d2cbb6f75d8658ba310d68540\",\"license\":\"MIT\"},\"maci-contracts/contracts/MACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IPollFactory } from \\\"./interfaces/IPollFactory.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"./interfaces/IMPFactory.sol\\\";\\nimport { ITallyFactory } from \\\"./interfaces/ITallyFactory.sol\\\";\\nimport { InitialVoiceCreditProxy } from \\\"./initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\\\";\\nimport { SignUpGatekeeper } from \\\"./gatekeepers/SignUpGatekeeper.sol\\\";\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { Utilities } from \\\"./utilities/Utilities.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\nimport { CurveBabyJubJub } from \\\"./crypto/BabyJubJub.sol\\\";\\nimport { InternalLazyIMT, LazyIMTData } from \\\"./trees/LazyIMT.sol\\\";\\n\\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\\n/// @notice A contract which allows users to sign up, and deploy new polls\\ncontract MACI is IMACI, DomainObjs, Params, Utilities {\\n  /// @notice The state tree depth is fixed. As such it should be as large as feasible\\n  /// so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608\\n  /// this should also match the parameter of the circom circuits.\\n  /// @notice IMPORTANT: remember to change the ballot tree depth\\n  /// in contracts/ts/genEmptyBallotRootsContract.ts file\\n  /// if we change the state tree depth!\\n  uint8 public immutable stateTreeDepth;\\n\\n  uint256 public immutable maxSignups;\\n\\n  uint8 internal constant TREE_ARITY = 2;\\n\\n  /// @notice The hash of a blank state leaf\\n  uint256 internal constant BLANK_STATE_LEAF_HASH =\\n    uint256(6769006970205099520508948723718471724660867171122235270773600567925038008762);\\n\\n  /// @notice The roots of the empty ballot trees\\n  uint256[5] public emptyBallotRoots;\\n\\n  /// @notice Each poll has an incrementing ID\\n  uint256 public nextPollId;\\n\\n  /// @notice A mapping of poll IDs to Poll contracts.\\n  mapping(uint256 => PollContracts) public polls;\\n\\n  /// @notice Factory contract that deploy a Poll contract\\n  IPollFactory public immutable pollFactory;\\n\\n  /// @notice Factory contract that deploy a MessageProcessor contract\\n  IMessageProcessorFactory public immutable messageProcessorFactory;\\n\\n  /// @notice Factory contract that deploy a Tally contract\\n  ITallyFactory public immutable tallyFactory;\\n\\n  /// @notice The state tree. Represents a mapping between each user's public key\\n  /// and their voice credit balance.\\n  LazyIMTData public lazyIMTData;\\n\\n  /// @notice Address of the SignUpGatekeeper, a contract which determines whether a\\n  /// user may sign up to vote\\n  SignUpGatekeeper public immutable signUpGatekeeper;\\n\\n  /// @notice The contract which provides the values of the initial voice credit\\n  /// balance per user\\n  InitialVoiceCreditProxy public immutable initialVoiceCreditProxy;\\n\\n  /// @notice A struct holding the addresses of poll, mp and tally\\n  struct PollContracts {\\n    address poll;\\n    address messageProcessor;\\n    address tally;\\n  }\\n\\n  // Events\\n  event SignUp(\\n    uint256 _stateIndex,\\n    uint256 indexed _userPubKeyX,\\n    uint256 indexed _userPubKeyY,\\n    uint256 _voiceCreditBalance,\\n    uint256 _timestamp\\n  );\\n  event DeployPoll(\\n    uint256 _pollId,\\n    uint256 indexed _coordinatorPubKeyX,\\n    uint256 indexed _coordinatorPubKeyY,\\n    Mode _mode\\n  );\\n\\n  /// @notice custom errors\\n  error PoseidonHashLibrariesNotLinked();\\n  error TooManySignups();\\n  error InvalidPubKey();\\n  error PollDoesNotExist(uint256 pollId);\\n\\n  /// @notice Create a new instance of the MACI contract.\\n  /// @param _pollFactory The PollFactory contract\\n  /// @param _messageProcessorFactory The MessageProcessorFactory contract\\n  /// @param _tallyFactory The TallyFactory contract\\n  /// @param _signUpGatekeeper The SignUpGatekeeper contract\\n  /// @param _initialVoiceCreditProxy The InitialVoiceCreditProxy contract\\n  /// @param _stateTreeDepth The depth of the state tree\\n  /// @param _emptyBallotRoots The roots of the empty ballot trees\\n  constructor(\\n    IPollFactory _pollFactory,\\n    IMessageProcessorFactory _messageProcessorFactory,\\n    ITallyFactory _tallyFactory,\\n    SignUpGatekeeper _signUpGatekeeper,\\n    InitialVoiceCreditProxy _initialVoiceCreditProxy,\\n    uint8 _stateTreeDepth,\\n    uint256[5] memory _emptyBallotRoots\\n  ) payable {\\n    // initialize and insert the blank leaf\\n    InternalLazyIMT._init(lazyIMTData, _stateTreeDepth);\\n    InternalLazyIMT._insert(lazyIMTData, BLANK_STATE_LEAF_HASH);\\n\\n    pollFactory = _pollFactory;\\n    messageProcessorFactory = _messageProcessorFactory;\\n    tallyFactory = _tallyFactory;\\n    signUpGatekeeper = _signUpGatekeeper;\\n    initialVoiceCreditProxy = _initialVoiceCreditProxy;\\n    stateTreeDepth = _stateTreeDepth;\\n    maxSignups = uint256(TREE_ARITY) ** uint256(_stateTreeDepth);\\n    emptyBallotRoots = _emptyBallotRoots;\\n\\n    // Verify linked poseidon libraries\\n    if (hash2([uint256(1), uint256(1)]) == 0) revert PoseidonHashLibrariesNotLinked();\\n  }\\n\\n  /// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\\n  /// double sign-ups or ineligible users from doing so.  This function will\\n  /// only succeed if the sign-up deadline has not passed. It also enqueues a\\n  /// fresh state leaf into the state AccQueue.\\n  /// @param _pubKey The user's desired public key.\\n  /// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\\n  ///     register() function. For instance, the POAPGatekeeper or\\n  ///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\\n  ///     token ID.\\n  /// @param _initialVoiceCreditProxyData Data to pass to the\\n  ///     InitialVoiceCreditProxy, which allows it to determine how many voice\\n  ///     credits this user should have.\\n  function signUp(\\n    PubKey memory _pubKey,\\n    bytes memory _signUpGatekeeperData,\\n    bytes memory _initialVoiceCreditProxyData\\n  ) public virtual {\\n    // ensure we do not have more signups than what the circuits support\\n    if (lazyIMTData.numberOfLeaves >= maxSignups) revert TooManySignups();\\n\\n    // ensure that the public key is on the baby jubjub curve\\n    if (!CurveBabyJubJub.isOnCurve(_pubKey.x, _pubKey.y)) {\\n      revert InvalidPubKey();\\n    }\\n\\n    // Register the user via the sign-up gatekeeper. This function should\\n    // throw if the user has already registered or if ineligible to do so.\\n    signUpGatekeeper.register(msg.sender, _signUpGatekeeperData);\\n\\n    // Get the user's voice credit balance.\\n    uint256 voiceCreditBalance = initialVoiceCreditProxy.getVoiceCredits(msg.sender, _initialVoiceCreditProxyData);\\n\\n    uint256 timestamp = block.timestamp;\\n\\n    // Create a state leaf and insert it into the tree.\\n    uint256 stateLeaf = hashStateLeaf(StateLeaf(_pubKey, voiceCreditBalance, timestamp));\\n    InternalLazyIMT._insert(lazyIMTData, stateLeaf);\\n\\n    emit SignUp(lazyIMTData.numberOfLeaves - 1, _pubKey.x, _pubKey.y, voiceCreditBalance, timestamp);\\n  }\\n\\n  /// @notice Deploy a new Poll contract.\\n  /// @param _duration How long should the Poll last for\\n  /// @param _treeDepths The depth of the Merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _verifier The Verifier Contract\\n  /// @param _vkRegistry The VkRegistry Contract\\n  /// @param _mode Voting mode\\n  function deployPoll(\\n    uint256 _duration,\\n    TreeDepths memory _treeDepths,\\n    PubKey memory _coordinatorPubKey,\\n    address _verifier,\\n    address _vkRegistry,\\n    Mode _mode\\n  ) public virtual {\\n    // cache the poll to a local variable so we can increment it\\n    uint256 pollId = nextPollId;\\n\\n    // Increment the poll ID for the next poll\\n    // 2 ** 256 polls available\\n    unchecked {\\n      nextPollId++;\\n    }\\n\\n    // check coordinator key is a valid point on the curve\\n    if (!CurveBabyJubJub.isOnCurve(_coordinatorPubKey.x, _coordinatorPubKey.y)) {\\n      revert InvalidPubKey();\\n    }\\n\\n    uint256 voteOptionTreeDepth = _treeDepths.voteOptionTreeDepth;\\n\\n    address p = pollFactory.deploy(\\n      _duration,\\n      _treeDepths,\\n      _coordinatorPubKey,\\n      address(this),\\n      emptyBallotRoots[voteOptionTreeDepth - 1]\\n    );\\n\\n    address mp = messageProcessorFactory.deploy(_verifier, _vkRegistry, p, msg.sender, _mode);\\n    address tally = tallyFactory.deploy(_verifier, _vkRegistry, p, mp, msg.sender, _mode);\\n\\n    // store the addresses in a struct so they can be returned\\n    PollContracts memory pollAddr = PollContracts({ poll: p, messageProcessor: mp, tally: tally });\\n\\n    polls[pollId] = pollAddr;\\n\\n    emit DeployPoll(pollId, _coordinatorPubKey.x, _coordinatorPubKey.y, _mode);\\n  }\\n\\n  /// @inheritdoc IMACI\\n  function getStateTreeRoot() public view returns (uint256 root) {\\n    root = InternalLazyIMT._root(lazyIMTData);\\n  }\\n\\n  /// @notice Get the Poll details\\n  /// @param _pollId The identifier of the Poll to retrieve\\n  /// @return pollContracts The Poll contract object\\n  function getPoll(uint256 _pollId) public view returns (PollContracts memory pollContracts) {\\n    if (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n    pollContracts = polls[_pollId];\\n  }\\n\\n  /// @inheritdoc IMACI\\n  function numSignUps() public view returns (uint256 signUps) {\\n    signUps = lazyIMTData.numberOfLeaves;\\n  }\\n}\\n\",\"keccak256\":\"0x8c2db2538fc4350149299e9db1b8549329f4c112ae10bda9841653f355111020\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/BabyJubJub.sol\":{\"content\":\"// @note This code was taken from\\n// https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\\n// Thanks to yondonfu for the code\\n// Implementation cited on baby-jubjub's paper\\n// https://eips.ethereum.org/EIPS/eip-2494#implementation\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary CurveBabyJubJub {\\n  // Curve parameters\\n  // E: 168700x^2 + y^2 = 1 + 168696x^2y^2\\n  // A = 168700\\n  uint256 public constant A = 0x292FC;\\n  // D = 168696\\n  uint256 public constant D = 0x292F8;\\n  // Prime Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\\n  uint256 public constant Q = 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001;\\n\\n  /**\\n   * @dev Add 2 points on baby jubjub curve\\n   * Formula for adding 2 points on a twisted Edwards curve:\\n   * x3 = (x1y2 + y1x2) / (1 + dx1x2y1y2)\\n   * y3 = (y1y2 - ax1x2) / (1 - dx1x2y1y2)\\n   */\\n  function pointAdd(uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) internal view returns (uint256 x3, uint256 y3) {\\n    if (_x1 == 0 && _y1 == 0) {\\n      return (_x2, _y2);\\n    }\\n\\n    if (_x2 == 0 && _y1 == 0) {\\n      return (_x1, _y1);\\n    }\\n\\n    uint256 x1x2 = mulmod(_x1, _x2, Q);\\n    uint256 y1y2 = mulmod(_y1, _y2, Q);\\n    uint256 dx1x2y1y2 = mulmod(D, mulmod(x1x2, y1y2, Q), Q);\\n    uint256 x3Num = addmod(mulmod(_x1, _y2, Q), mulmod(_y1, _x2, Q), Q);\\n    uint256 y3Num = submod(y1y2, mulmod(A, x1x2, Q), Q);\\n\\n    x3 = mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q);\\n    y3 = mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q);\\n  }\\n\\n  /**\\n   * @dev Double a point on baby jubjub curve\\n   * Doubling can be performed with the same formula as addition\\n   */\\n  function pointDouble(uint256 _x1, uint256 _y1) internal view returns (uint256 x2, uint256 y2) {\\n    return pointAdd(_x1, _y1, _x1, _y1);\\n  }\\n\\n  /**\\n   * @dev Multiply a point on baby jubjub curve by a scalar\\n   * Use the double and add algorithm\\n   */\\n  function pointMul(uint256 _x1, uint256 _y1, uint256 _d) internal view returns (uint256 x2, uint256 y2) {\\n    uint256 remaining = _d;\\n\\n    uint256 px = _x1;\\n    uint256 py = _y1;\\n    uint256 ax = 0;\\n    uint256 ay = 0;\\n\\n    while (remaining != 0) {\\n      if ((remaining & 1) != 0) {\\n        // Binary digit is 1 so add\\n        (ax, ay) = pointAdd(ax, ay, px, py);\\n      }\\n\\n      (px, py) = pointDouble(px, py);\\n\\n      remaining = remaining / 2;\\n    }\\n\\n    x2 = ax;\\n    y2 = ay;\\n  }\\n\\n  /**\\n   * @dev Check if a given point is on the curve\\n   * (168700x^2 + y^2) - (1 + 168696x^2y^2) == 0\\n   */\\n  function isOnCurve(uint256 _x, uint256 _y) internal pure returns (bool) {\\n    uint256 xSq = mulmod(_x, _x, Q);\\n    uint256 ySq = mulmod(_y, _y, Q);\\n    uint256 lhs = addmod(mulmod(A, xSq, Q), ySq, Q);\\n    uint256 rhs = addmod(1, mulmod(mulmod(D, xSq, Q), ySq, Q), Q);\\n    return submod(lhs, rhs, Q) == 0;\\n  }\\n\\n  /**\\n   * @dev Perform modular subtraction\\n   */\\n  function submod(uint256 _a, uint256 _b, uint256 _mod) internal pure returns (uint256) {\\n    uint256 aNN = _a;\\n\\n    if (_a <= _b) {\\n      aNN += _mod;\\n    }\\n\\n    return addmod(aNN - _b, 0, _mod);\\n  }\\n\\n  /**\\n   * @dev Compute modular inverse of a number\\n   */\\n  function inverse(uint256 _a) internal view returns (uint256) {\\n    // We can use Euler's theorem instead of the extended Euclidean algorithm\\n    // Since m = Q and Q is prime we have: a^-1 = a^(m - 2) (mod m)\\n    return expmod(_a, Q - 2, Q);\\n  }\\n\\n  /**\\n   * @dev Helper function to call the bigModExp precompile\\n   */\\n  function expmod(uint256 _b, uint256 _e, uint256 _m) internal view returns (uint256 o) {\\n    assembly {\\n      let memPtr := mload(0x40)\\n      mstore(memPtr, 0x20) // Length of base _b\\n      mstore(add(memPtr, 0x20), 0x20) // Length of exponent _e\\n      mstore(add(memPtr, 0x40), 0x20) // Length of modulus _m\\n      mstore(add(memPtr, 0x60), _b) // Base _b\\n      mstore(add(memPtr, 0x80), _e) // Exponent _e\\n      mstore(add(memPtr, 0xa0), _m) // Modulus _m\\n\\n      // The bigModExp precompile is at 0x05\\n      let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\\n      switch success\\n      case 0 {\\n        revert(0x0, 0x0)\\n      }\\n      default {\\n        o := mload(memPtr)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf28f6c9c4534cecd69276c7f902a33ed94a08901400f570979085701d796cea8\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x5bd9dc3c43c862d8fd566e8ae2d3a52e1271f2aa3b042c71f97fe2dc449b1d5f\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x27b66b331502146590287b856ab767b2a2fb66a16da114961e3cef9e160d7263\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xd38b24182625dab43ccd72c623df1263f2fec8ef828852189bf8ac17e59ae12b\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x93228facf0feb920e3b92e536040ba3c6fd5ffcdd5ae415373f153e05cec78b9\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x792080273729327555e4bed7ba86e51a22e63769732308ac0a59dce88e451505\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xef88737ff3d47333964f4fd6b939a12fe6e2ca64b069b26600a10c6a8f52fc7b\",\"license\":\"MIT\"},\"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SignUpGatekeeper\\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\\nabstract contract SignUpGatekeeper {\\n  /// @notice Allows to set the MACI contract\\n  // solhint-disable-next-line no-empty-blocks\\n  function setMaciInstance(address _maci) public virtual {}\\n\\n  /// @notice Registers the user\\n  /// @param _user The address of the user\\n  /// @param _data additional data\\n  // solhint-disable-next-line no-empty-blocks\\n  function register(address _user, bytes memory _data) public virtual {}\\n\\n  /// @notice Get the trait of the gatekeeper\\n  /// @return The type of the gatekeeper\\n  function getTrait() public pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x81eee8829ae3deeae2c4870c4ba6776e7512a08cfe52d7bb26a84fea6c193881\",\"license\":\"MIT\"},\"maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title InitialVoiceCreditProxy\\n/// @notice This contract is the base contract for\\n/// InitialVoiceCreditProxy contracts. It allows to set a custom initial voice\\n/// credit balance for MACI's voters.\\nabstract contract InitialVoiceCreditProxy {\\n  /// @notice Returns the initial voice credit balance for a new MACI's voter\\n  /// @param _user the address of the voter\\n  /// @param _data additional data\\n  /// @return the balance\\n  // solhint-disable-next-line no-empty-blocks\\n  function getVoiceCredits(address _user, bytes memory _data) public view virtual returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa25c307be878c23d3e2f02200eb5cb1ad7c26efc3356cfdc5e72b1e2008f1249\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateTreeRoot() external view returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3ab057b23782dae9e0b399bdb262adbe32be85fa8db17f0a0fbfca56352603c1\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IMessageProcessorFactory\\n/// @notice MessageProcessorFactory interface\\ninterface IMessageProcessorFactory {\\n  /// @notice Deploy a new MessageProcessor contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _owner Owner of the MessageProcessor contract\\n  /// @param _mode Voting mode\\n  /// @return The deployed MessageProcessor contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _owner,\\n    DomainObjs.Mode _mode\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xe26a5a2bc189117c9d7e7a60f248c3fcec64b81144bd164633ab971248cf43ce\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IPollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Params } from \\\"../utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IPollFactory\\n/// @notice PollFactory interface\\ninterface IPollFactory {\\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\\n  /// @param _duration The duration of the poll\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _maci The MACI contract interface reference\\n  /// @param _emptyBallotRoot The root of the empty ballot tree\\n  /// @return The deployed Poll contract\\n  function deploy(\\n    uint256 _duration,\\n    Params.TreeDepths memory _treeDepths,\\n    DomainObjs.PubKey memory _coordinatorPubKey,\\n    address _maci,\\n    uint256 _emptyBallotRoot\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x0ab03b1a9368f6d9c69dc89ece9c5f4763238c18d3b87f82a2d4043bb8aecc53\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/ITallyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title ITallyFactory\\n/// @notice TallyFactory interface\\ninterface ITallyFactory {\\n  /// @notice Deploy a new Tally contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _messageProcessor MessageProcessor contract\\n  /// @param _owner Owner of the contract\\n  /// @param _mode Voting mode\\n  /// @return The deployed contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner,\\n    DomainObjs.Mode _mode\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x941442404bf8dc477bb99516c25ac2b46f27a8d32707d4a72fc3bb77e39f7362\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable(msg.sender), Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0xf7b3357a612808b59e27300842bd92fefc42e276348fc2f4bf794192e2499de8\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/LazyIMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { PoseidonT3 } from \\\"../crypto/PoseidonT3.sol\\\";\\n\\n/// @notice A struct that holds a LazyIMT data\\nstruct LazyIMTData {\\n  uint40 maxIndex;\\n  uint40 numberOfLeaves;\\n  mapping(uint256 => uint256) elements;\\n}\\n\\n/// @notice Custom errors\\nerror DefaultZeroBadIndex();\\nerror DepthTooLarge();\\nerror DepthCannotBeZero();\\nerror NumberOfLeavesCannotBeZero();\\nerror AmbiguousDepth();\\n\\n/// @title InternalLazyIMT\\n/// @dev A LazyIMT with Zeroes value set to the hash of\\n/// a MACI Blank State Leaf\\n/// @notice This implementation is taken from zk-kit\\n/// https://github.com/privacy-scaling-explorations/zk-kit/blob/main/packages/imt.sol/contracts/internal/InternalLazyIMT.sol\\n/// and modified to work with MACI.\\nlibrary InternalLazyIMT {\\n  uint256 internal constant MAX_DEPTH = 32;\\n\\n  uint40 internal constant MAX_INDEX = (1 << 32) - 1;\\n\\n  uint256 internal constant Z_0 = 6769006970205099520508948723718471724660867171122235270773600567925038008762;\\n  uint256 internal constant Z_1 = 2972820301952105722688860985556183033855705951263221082702981787813754939537;\\n  uint256 internal constant Z_2 = 19009473369953096352828532459942637819279786575057870804186038131433538383332;\\n  uint256 internal constant Z_3 = 1877001762518233819645599208989578372605193385355680834239714249281096297174;\\n  uint256 internal constant Z_4 = 4022598852800694816938652741439614774645858989706174527409714109784047480520;\\n  uint256 internal constant Z_5 = 8078617093048295855521451309865989496051030103472138252021705658681696298712;\\n  uint256 internal constant Z_6 = 21861637049723057871988413507302821095913894718242489848472531680353400271584;\\n  uint256 internal constant Z_7 = 2969626195902860050407584814596940245443093107470116547781577350415736914038;\\n  uint256 internal constant Z_8 = 13863086449569754493134198846069090996475357615094865751949144794620598051673;\\n  uint256 internal constant Z_9 = 13774233155966252113965527228795435224641075024674384267997743867571011718458;\\n  uint256 internal constant Z_10 = 7674682532432601125535053858292577379388329393276537570517515727197672122157;\\n  uint256 internal constant Z_11 = 2657471847139856346360223652201172662911313292042510535836997980857168085414;\\n  uint256 internal constant Z_12 = 14112562742724116016492623819773686970029672095023612838615540190985426106768;\\n  uint256 internal constant Z_13 = 16966520284141749853106006448832965932249937855809150844697400390499975107456;\\n  uint256 internal constant Z_14 = 21146121663662200258116396149536742745305242191891337170899444969488030502620;\\n  uint256 internal constant Z_15 = 8395571901509192935479743034608666551563743095742598750914087478677907730358;\\n  uint256 internal constant Z_16 = 11584898446168752024843587018551921614604785083342073076015560385003528300499;\\n  uint256 internal constant Z_17 = 19681365563800708744156562671961079617734353445922751560400662591064339349816;\\n  uint256 internal constant Z_18 = 11060693795061987995391612467169498625108376769265861980249917517984263067473;\\n  uint256 internal constant Z_19 = 20136055137568042031318427040358591430196153124171666293804511634641041409480;\\n  uint256 internal constant Z_20 = 10438448879123510479428288344427042332522761183009746406441238260861529360499;\\n  uint256 internal constant Z_21 = 20302411580043873005239406811066876697276902025885155920151067303221158887923;\\n  uint256 internal constant Z_22 = 16905699456770804689394621400052823445587122726651394178036372609288266146575;\\n  uint256 internal constant Z_23 = 13317924909658910751179983108234689413063120680580702936091220805509299490708;\\n  uint256 internal constant Z_24 = 11624463897690689883938167321830091369950933831231839575225419984927228390345;\\n  uint256 internal constant Z_25 = 12388077003631746290497429926117583834311703848735670874049584990731919769551;\\n  uint256 internal constant Z_26 = 16641943593086083573943184041147806885253724243247212515325749241831788827569;\\n  uint256 internal constant Z_27 = 8675770901378242337954792996483564563211065498082968464791979179678744114204;\\n  uint256 internal constant Z_28 = 3741944068643598116715410464277276913339851849923986024648161859457213369743;\\n  uint256 internal constant Z_29 = 9365051374992868354747065577256691008852056444829383197903446097138255771103;\\n  uint256 internal constant Z_30 = 19608043542461863702809013760105552654336523908709289008189330402608282498922;\\n  uint256 internal constant Z_31 = 15116478429455923389320892447700153271977917184085737305957533984219061034768;\\n  uint256 internal constant Z_32 = 13372161856163346716845871420623647679532631520878788090782842562075678687737;\\n\\n  /// @notice Returns the default zero value for a given index\\n  /// @param index The index of the zero value\\n  /// @return The zero value\\n  function _defaultZero(uint8 index) internal pure returns (uint256) {\\n    if (index == 0) return Z_0;\\n    if (index == 1) return Z_1;\\n    if (index == 2) return Z_2;\\n    if (index == 3) return Z_3;\\n    if (index == 4) return Z_4;\\n    if (index == 5) return Z_5;\\n    if (index == 6) return Z_6;\\n    if (index == 7) return Z_7;\\n    if (index == 8) return Z_8;\\n    if (index == 9) return Z_9;\\n    if (index == 10) return Z_10;\\n    if (index == 11) return Z_11;\\n    if (index == 12) return Z_12;\\n    if (index == 13) return Z_13;\\n    if (index == 14) return Z_14;\\n    if (index == 15) return Z_15;\\n    if (index == 16) return Z_16;\\n    if (index == 17) return Z_17;\\n    if (index == 18) return Z_18;\\n    if (index == 19) return Z_19;\\n    if (index == 20) return Z_20;\\n    if (index == 21) return Z_21;\\n    if (index == 22) return Z_22;\\n    if (index == 23) return Z_23;\\n    if (index == 24) return Z_24;\\n    if (index == 25) return Z_25;\\n    if (index == 26) return Z_26;\\n    if (index == 27) return Z_27;\\n    if (index == 28) return Z_28;\\n    if (index == 29) return Z_29;\\n    if (index == 30) return Z_30;\\n    if (index == 31) return Z_31;\\n    if (index == 32) return Z_32;\\n    revert DefaultZeroBadIndex();\\n  }\\n\\n  /// @notice Initializes the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @param depth The depth of the tree\\n  function _init(LazyIMTData storage self, uint8 depth) internal {\\n    if (depth > MAX_DEPTH) {\\n      revert DepthTooLarge();\\n    }\\n    self.maxIndex = uint40((1 << depth) - 1);\\n    self.numberOfLeaves = 0;\\n  }\\n\\n  /// @notice Returns the index for a given level and index\\n  /// @param level The level\\n  /// @param index The index\\n  /// @return The index for the element\\n  function _indexForElement(uint8 level, uint40 index) internal pure returns (uint40) {\\n    // store the elements sparsely\\n    return (uint40(level) << 32) - level + index;\\n  }\\n\\n  /// @notice Inserts a leaf into the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @param leaf The leaf to insert\\n  function _insert(LazyIMTData storage self, uint256 leaf) internal {\\n    uint40 index = self.numberOfLeaves;\\n\\n    self.numberOfLeaves = index + 1;\\n\\n    uint256 hash = leaf;\\n\\n    for (uint8 i = 0; ; ) {\\n      self.elements[_indexForElement(i, index)] = hash;\\n      // it's a left element so we don't hash until there's a right element\\n      if (index & 1 == 0) break;\\n      uint40 elementIndex = _indexForElement(i, index - 1);\\n      hash = PoseidonT3.poseidon([self.elements[elementIndex], hash]);\\n      unchecked {\\n        index >>= 1;\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /// @notice Returns the root of the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @return The root of the LazyIMT\\n  function _root(LazyIMTData storage self) internal view returns (uint256) {\\n    // this will always short circuit if self.numberOfLeaves == 0\\n    uint40 numberOfLeaves = self.numberOfLeaves;\\n    // dynamically determine a depth\\n    uint8 depth = 1;\\n    while (uint40(1 << depth) < numberOfLeaves) {\\n      depth++;\\n    }\\n    return _root(self, numberOfLeaves, depth);\\n  }\\n\\n  /// @notice Returns the root of the LazyIMT\\n  /// @dev Here it's assumed that the depth value is valid.\\n  /// If it is either 0 or > 2^8-1 this function will panic.\\n  /// @param self The LazyIMTData\\n  /// @param numberOfLeaves The number of leaves\\n  /// @param depth The depth of the tree\\n  /// @return The root of the LazyIMT\\n  function _root(LazyIMTData storage self, uint40 numberOfLeaves, uint8 depth) internal view returns (uint256) {\\n    if (depth > MAX_DEPTH) {\\n      revert DepthTooLarge();\\n    }\\n    // this should always short circuit if self.numberOfLeaves == 0\\n    if (numberOfLeaves == 0) return _defaultZero(depth);\\n    uint256[] memory levels = new uint256[](depth + 1);\\n    _levels(self, numberOfLeaves, depth, levels);\\n    return levels[depth];\\n  }\\n\\n  /// @notice Updates the levels of the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @param numberOfLeaves The number of leaves\\n  /// @param depth The depth of the tree\\n  /// @param levels The levels of the tree\\n  function _levels(\\n    LazyIMTData storage self,\\n    uint40 numberOfLeaves,\\n    uint8 depth,\\n    uint256[] memory levels\\n  ) internal view {\\n    if (depth > MAX_DEPTH) {\\n      revert DepthTooLarge();\\n    }\\n    if (numberOfLeaves == 0) {\\n      revert NumberOfLeavesCannotBeZero();\\n    }\\n\\n    // this should always short circuit if self.numberOfLeaves == 0\\n    uint40 index = numberOfLeaves - 1;\\n\\n    if (index & 1 == 0) {\\n      levels[0] = self.elements[_indexForElement(0, index)];\\n    } else {\\n      levels[0] = _defaultZero(0);\\n    }\\n\\n    for (uint8 i = 0; i < depth; ) {\\n      if (index & 1 == 0) {\\n        levels[i + 1] = PoseidonT3.poseidon([levels[i], _defaultZero(i)]);\\n      } else {\\n        uint256 levelCount = (numberOfLeaves) >> (i + 1);\\n        if (levelCount > index >> 1) {\\n          uint256 parent = self.elements[_indexForElement(i + 1, index >> 1)];\\n          levels[i + 1] = parent;\\n        } else {\\n          uint256 sibling = self.elements[_indexForElement(i, index - 1)];\\n          levels[i + 1] = PoseidonT3.poseidon([sibling, levels[i]]);\\n        }\\n      }\\n      unchecked {\\n        index >>= 1;\\n        i++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5f4ff617c1c038ae15cc0357c092d5656ee025e4063dd78884a8ceb924cbfc86\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @notice voting modes\\n  enum Mode {\\n    QV,\\n    NON_QV\\n  }\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message\\n  struct Message {\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0xf2d6000c85f03c81cc4226150c1c1fbd88c9e18c1cc32b7311976ab43552768f\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n  }\\n}\\n\",\"keccak256\":\"0x8a3efa6cc303351f771c3cd9f16a57b9de709a6c696972e6e9837a7b3aa3995d\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DomainObjs } from \\\"./DomainObjs.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\nimport { SnarkConstants } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n/// @title Utilities\\n/// @notice An utility contract that can be used to:\\n/// * hash a state leaf\\n/// * pad and hash a MACI message\\n/// * hash a MACI message and an encryption public key\\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\\n  /// @notice custom errors\\n  error InvalidMessage();\\n\\n  /// @notice An utility function used to hash a state leaf\\n  /// @param _stateLeaf the state leaf to be hashed\\n  /// @return ciphertext The hash of the state leaf\\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\\n    uint256[4] memory plaintext;\\n    plaintext[0] = _stateLeaf.pubKey.x;\\n    plaintext[1] = _stateLeaf.pubKey.y;\\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\\n    plaintext[3] = _stateLeaf.timestamp;\\n\\n    ciphertext = hash4(plaintext);\\n  }\\n\\n  /// @notice An utility function used to pad and hash a MACI message\\n  /// @param dataToPad the data to be padded\\n  /// @return message The padded message\\n  /// @return padKey The padding public key\\n  /// @return msgHash The hash of the padded message and encryption key\\n  function padAndHashMessage(\\n    uint256[2] memory dataToPad\\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\\n    // add data and pad it to 10 elements (automatically cause it's the default value)\\n    uint256[10] memory dat;\\n    dat[0] = dataToPad[0];\\n    dat[1] = dataToPad[1];\\n\\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\\n    message = Message({ data: dat });\\n    msgHash = hashMessageAndEncPubKey(message, padKey);\\n  }\\n\\n  /// @notice An utility function used to hash a MACI message and an encryption public key\\n  /// @param _message the message to be hashed\\n  /// @param _encPubKey the encryption public key to be hashed\\n  /// @return msgHash The hash of the message and the encryption public key\\n  function hashMessageAndEncPubKey(\\n    Message memory _message,\\n    PubKey memory _encPubKey\\n  ) public pure returns (uint256 msgHash) {\\n    if (_message.data.length != 10) {\\n      revert InvalidMessage();\\n    }\\n\\n    uint256[5] memory n;\\n    n[0] = _message.data[0];\\n    n[1] = _message.data[1];\\n    n[2] = _message.data[2];\\n    n[3] = _message.data[3];\\n    n[4] = _message.data[4];\\n\\n    uint256[5] memory m;\\n    m[0] = _message.data[5];\\n    m[1] = _message.data[6];\\n    m[2] = _message.data[7];\\n    m[3] = _message.data[8];\\n    m[4] = _message.data[9];\\n\\n    msgHash = hash4([hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\\n  }\\n}\\n\",\"keccak256\":\"0x3b53d8068e07444209114d3c0f9bcf49426921a70cc3e4ae7eeddf6eeb09927a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101608060405234620004f757620065b780380380916200002182856200052e565b83398101610160918281830312620004f7578051906001600160a01b038083168303620004f7576020820151938185168503620004f7576040830151928284168403620004f7576060810151908382168203620004f7576080810151928484168403620004f75760a08201519860ff8a168a03620004f7578160df84011215620004f7576040519260a084016001600160401b03811185821017620004fc5760405283918101928311620004f75760c001905b828210620004e657505050602060ff891611620004d457600160ff89161b6000198101908111620002c55764ffffffffff1660018060501b031960075416179764ffffffffff8960281c1697600189019964ffffffffff8b11620002c55760288b901b69ffffffffff00000000001617600755889760007f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba5b64ffffffffff620001978c6200019160ff861664ff000000008760201b16620005b9565b6200059f565b1660005260086020528060406000205560018b1615620002db5760001964ffffffffff8c160164ffffffffff8111620002c5576200023391620001ee6020926200019160ff871664ff0000000088871b16620005b9565b9064ffffffffff60405192620002048462000512565b1660005260088352604060002054825282820152604051809381926314d2f97b60e11b8352600483016200056f565b038173Db6F8a73C48a17D8462762296ef353B5D0c113ea5af4908115620002b95760009162000279575b5060019a8b1c647fffffffff169a9190910160ff16906200016d565b906020823d602011620002b0575b8162000296602093836200052e565b81010312620002ad57505164ffffffffff6200025d565b80fd5b3d915062000287565b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b505060c05260e0526101009586526101209283526101409384526080819052620003089060ff1662000552565b60a05260005b60058110620004c15750506200035260206040516200032d8162000512565b60018152600182820152604051809381926314d2f97b60e11b8352600483016200056f565b038173Db6F8a73C48a17D8462762296ef353B5D0c113ea5af4908115620002b95760009162000489575b5015620004775733156200045e5760098054336001600160a01b03198083168217909355604051959091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36000600b556000600c556000600d556000600f553390600a541617600a5542600e55615fe59384620005d2853960805184611fee015260a05184818161094001526137af015260c05184818161359c0152615057015260e05184818161423801526150cd01525183818161216801526151430152518281816137fc01526141f5015251818181610ee501526138800152f35b604051631e4fbdf760e01b815260006004820152602490fd5b604051633d7ba68560e21b8152600490fd5b906020823d602011620004b8575b81620004a6602093836200052e565b81010312620002ad575051856200037c565b3d915062000497565b600190602083519301928155016200030e565b604051633e104c7760e01b8152600490fd5b8151815260209182019101620000d4565b600080fd5b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117620004fc57604052565b601f909101601f19168101906001600160401b03821190821017620004fc57604052565b8015620005695760ff8111620002c5576001901b90565b50600190565b6040810192916000915b600283106200058757505050565b60019082518152602080910192019201919062000579565b91909164ffffffffff80809416911601918211620002c557565b64ffffffffff9182169082160391908211620002c55756fe608080604052600436101561001357600080fd5b600090813560e01c908163055575eb1461422457508063079410db146141df5780630e1b191f14613e055780631096c30e14613db2578063122db15314613d8a57806313fb893214613d615780631a56763614613cfc5780631a8cbcaa14613c975780631b6ef3c514613c0b5780632b78657114613bed5780632b7ac3f314613bc45780632dba654714613b9d57806331e766a514613b785780633364120a1461372a5780633364c4c8146135cb578063343393b5146135865780633bd8e51e146134cf5780633dfb88b2146134775780633e33c05e146131f1578063423f3e191461317557806345404bbd1461311057806346e47f9a146130a95780634aaa315d146130445780634c58b7a914612cd55780634d5da86b14612419578063553181ec146123fb57806356a58ebf1461233557806356f28b0a1461230357806358bfc379146121f65780635bb93995146121c557806362a361bb1461219757806362b31f1e1461215257806364390ff11461212e57806364e0ece114612012578063652c76e414611fd4578063683f3dc314611fb85780636b4575e214611ee95780636cd84de714611eb75780636d85003314611e85578063715018a614611e3957806372524bf314611e0d578063756b425914611cce5780637d0a81c814611c8c5780637eb3282614611c635780637ee0a23014611b4f5780638a2a3dfb14611ab35780638da5cb5b14611a8a578063941a35de1461159e57806394316829146114ae5780639c4ae5e1146114815780639cfced9714611421578063a3f9ac62146113bc578063a78d80fc1461139e578063a843e07614610f14578063aab4a67014610ecf578063aab6568614610e6a578063abe7095114610e31578063ac2f007414610de2578063ac98e5df14610da0578063b686872014610d70578063b87802c814610d46578063ba8f07a314610d14578063bea140b314610c14578063bee5eabe14610be2578063bff1f9e114610bc4578063bff3375e14610b5f578063c228995d14610b2d578063c8cf9ab214610af4578063c9354bb514610ad6578063cc6e4a3814610aa4578063cd585b37146109b3578063cea3e53014610995578063d7a71b9a14610963578063df82635a14610928578063eae24c7714610654578063edbfe83f14610529578063f2fde38b146104b1578063f55082ce1461044c578063f9d5b5de1461040c5763fcde7bd91461039157600080fd5b3461040957602080600319360112610405576004358252601f815260408220916040518092808554928381520194835280832092905b8282106103ee576103ea856103de81890382614325565b60405191829182614598565b0390f35b8354865294850194600193840193909101906103c7565b5080fd5b80fd5b50346104095761041b36614730565b91908152601c6020526040812090815483101561040957602061043e8484614746565b90546040519160031b1c8152f35b503461040957602080600319360112610405576004358252601c815260408220916040518092808554928381520194835280832092905b82821061049a576103ea856103de81890382614325565b835486529485019460019384019390910190610483565b5034610409576020366003190112610409576104cb6143ee565b6104d361478b565b6001600160a01b0390811690811561051057600980546001600160a01b03198116841790915516600080516020615f90833981519152600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b50346104095760403660031901126104095736602312156104095761054d366146f8565b604051610559816142ef565b604051610565816142d3565b6101409182368337526040519061057b82614282565b838252836020809301528160405193610593856142d3565b8236863780518552015182840152604051906105ae82614282565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78252828201917f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d835260405194610605866142ef565b85526106118186615e11565b6040519551969094865b600a831061063f575050506101a09550519084015251610160830152610180820152f35b81806001928b5181520199019201919761061b565b503461040957606036600319011261040957602435906004356106756143d8565b92818352601860209181835261069a610695876005604089200154614e94565b614d36565b8385528183526106b36007604087200154421015614d81565b8385528183526106cb60086040872001544210614dc6565b838552818352600180604087200154036108e75783855281835260408086206006015490516370a0823160e01b8152336004820152926001600160a01b03909116908484602481855afa9384156108dc5787946108a8575b5033875260168552610749604088205494878952828752600460408a20015411156148f5565b6107538685614e44565b86885281865260ff600a60408a20015416610868575b509684918798876107a09899528352600460408a20015491896040518099819582946323b872dd60e01b8452309060048501614e22565b03925af192831561085d577f24930ecca7f60d4736cd965cb5522694ea4b32308405d3f88fea2f59eff63caa94604094610830575b50600182036107fd57858752601c81526107f1838589206148a7565b8351928352820152a280f35b6002820361081d57858752601d8152610818838589206148a7565b6107f1565b858752601e8152610818838589206148a7565b61084f90823d8411610856575b6108478183614325565b810190614e0a565b50386107d5565b503d61083d565b6040513d88823e3d90fd5b6108725738610769565b60405162461bcd60e51b815260048101869052600e60248201526d155cd95c881a185cc8159bdd195960921b6044820152606490fd5b9093508481813d83116108d5575b6108c08183614325565b810103126108d057519238610723565b600080fd5b503d6108b6565b6040513d89823e3d90fd5b60405162461bcd60e51b8152600481018490526019602482015278566f74696e672054797065206973206e6f74207965732f6e6f60381b6044820152606490fd5b503461040957806003193601126104095760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346104095760ff604060209261097936614730565b9082526026855282822090825284522054166040519015158152f35b50346104095780600319360112610409576020600e54604051908152f35b50346104095760203660031901126104095760409060043581526015602052208054604051916109f1836109ea8160018501614662565b0384614325565b610a9a60405191610a09836109ea8160028501614662565b610a8c604051610a2781610a208160038701614662565b0382614325565b610a7e60405193610a4685610a3f8160048501614662565b0386614325565b600560018060a01b039101541695610a70604051998a998a5260c060208b015260c08a0190614453565b9088820360408a0152614453565b908682036060880152614453565b908482036080860152614453565b9060a08301520390f35b503461040957610ab336614730565b91908152601d6020526040812090815483101561040957602061043e8484614746565b50346104095780600319360112610409576020600d54604051908152f35b5034610409576020366003190112610409576020906040906001600160a01b03610b1c6143ee565b168152602583522054604051908152f35b503461040957610b3c36614730565b91908152601b6020526040812090815483101561040957602061043e8484614746565b503461040957602080600319360112610405576004358252601b815260408220916040518092808554928381520194835280832092905b828210610bad576103ea856103de81890382614325565b835486529485019460019384019390910190610b96565b50346104095780600319360112610409576020600b54604051908152f35b503461040957610bf136614730565b91908152601a6020526040812090815483101561040957602061043e8484614746565b50346104095760603660031901126104095736602312156104095760405190610c3c82614267565b606482368211610d10576004905b828210610d005750506040516304b98e1d60e31b81529283908390600483015b60038310610ce6575050506020918173644929660057bc5680453C80BBea3ea08b3F34d85af4908115610cda5790610ca8575b602090604051908152f35b506020813d8211610cd2575b81610cc160209383614325565b810103126108d05760209051610c9d565b3d9150610cb4565b604051903d90823e3d90fd5b815181528693506001929092019160209182019101610c6a565b8135815260209182019101610c4a565b8280fd5b503461040957610d2336614730565b9190815260236020526040812090815483101561040957602061043e8484614746565b50346104095760203660031901126104095760043560058110156104055760209054604051908152f35b5034610409578060031936011261040957604060075481519064ffffffffff90818116835260281c166020820152f35b5034610409578060031936011261040957608060105460ff604051918181168352818160081c166020840152818160101c16604084015260181c166060820152f35b5034610409576020366003190112610409576040606091600435815260066020522060018060a01b03908181541691600281600184015416920154169060405192835260208301526040820152f35b5034610409576020366003190112610409576020906040906001600160a01b03610e596143ee565b168152601683522054604051908152f35b503461040957602080600319360112610405576004358252601e815260408220916040518092808554928381520194835280832092905b828210610eb8576103ea856103de81890382614325565b835486529485019460019384019390910190610ea1565b50346104095780600319360112610409576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346104095760a0366003190112610409576001600160401b039060043582811161040557610f4790369060040161438e565b602435838111610d1057610f5f90369060040161438e565b9060443584811161139a57610f7890369060040161438e565b9060643585811161139657610f9190369060040161438e565b610f996143ac565b92610fa5600b546147b7565b9182600b5560405191610fb78361429d565b83835260208084018681526040808601998a5260608601938452608086019485526001600160a01b03891660a08701818152978c5260159093528a20945185555180519198918b81116113825780600187019261101e826110188654614628565b866147dd565b6020908d601f841160011461131e5792611313575b50508160011b916000199060031b1c19161790555b5180518a811161129057806002860192611066826110188654614628565b602090601f83116001146112af578c926112a4575b50508160011b916000199060031b1c19161790555b51805160038401918a82116112905781906110af826110188654614628565b602090601f831160011461122c578b92611221575b50508160011b916000199060031b1c19161790555b5196875190811161120d576110fe816110f56004850154614628565b600485016147dd565b6020601f821160011461118d57908060059392899a600080516020615f70833981519152999a92611182575b50508160011b916000199060031b1c19161760048201555b019060018060a01b0390511660018060a01b0319825416179055600b54938552601660205283604086205561117c60405192839283614824565b0390a280f35b01519050388061112a565b6004830188526020882098885b601f19841681106111f5575091600080516020615f708339815191529798996001926005959483601f198116106111dc575b505050811b016004820155611142565b015160001960f88460031b161c191690553880806111cc565b828201518b556001909a01996020928301920161119a565b634e487b7160e01b87526041600452602487fd5b0151905038806110c4565b848c5260208c209250601f1984168c5b818110611278575090846001959493921061125f575b505050811b0190556110d9565b015160001960f88460031b161c19169055388080611252565b9293602060018192878601518155019501930161123c565b634e487b7160e01b8a52604160045260248afd5b01519050388061107b565b848d5260208d209250601f1984168d5b8181106112fb57509084600195949392106112e2575b505050811b019055611090565b015160001960f88460031b161c191690553880806112d5565b929360206001819287860151815501950193016112bf565b015190503880611033565b858152602081209350601f198516905b81811061136a5750908460019594939210611351575b505050811b019055611048565b015160001960f88460031b161c19169055388080611344565b9293602060018192878601518155019501930161132e565b634e487b7160e01b8b52604160045260248bfd5b8480fd5b8380fd5b50346104095780600319360112610409576020600c54604051908152f35b503461040957602080600319360112610405576004358252601a815260408220916040518092808554928381520194835280832092905b82821061140a576103ea856103de81890382614325565b8354865294850194600193840193909101906113f3565b50346104095760a0366003190112610409573660231215610409576040516114488161430a565b60a4813682116108d0576020926004905b838210611472578461146a84615425565b604051908152f35b81358152908401908401611459565b503461040957604060209161149536614730565b9082526021845282822090825283522054604051908152f35b503461040957602036600319011261040957604090600435815260176020522080546103ea600183015492600760ff604051926114f9846114f28160028501614662565b0385614325565b6040519361150e85610a3f8160038601614662565b61156c60048301549561155e600585015493611540600687015496611539604051809b819301614662565b0389614325565b6040519b8c9b8c5260208c01526101208060408d01528b0190614453565b9089820360608b0152614453565b94608088015260a087015260018060a01b03811660c087015260a01c16151560e0850152838203610100850152614453565b503461040957610100366003190112610409576004356001600160401b038111610405576115d090369060040161438e565b906024356001600160401b038111610405576115f090369060040161438e565b916115f96143ac565b60a4359081151582036108d05761160e614404565b9160e4356001600160401b038111611a865761162e90369060040161438e565b611639600d546147b7565b600d8190556001600160a01b0385168752601660205260408720549390929061166385151561484c565b60443598670de0b6b3a7640000908a8281020482148b151715611a7257606435908183810204831482151715611a5e576040519b6001600160401b036101208e01908111908e1117611a4857839160608e61012081016040528a81528b60208201528d604082015201520260808c01520260a08a015260018060a01b031660c0890152151560e088015261010087015284526017602052604084208551815560208601516001820155604086015180519060018060401b03821161120d57819061173d826117346002870154614628565b600287016147dd565b602090601f83116001146119d95788926119ce575b50508160011b916000199060031b1c19161760028201555b60608601518051906001600160401b03821161120d5761179a826117916003860154614628565b600386016147dd565b602090601f831160011461195b57918061010094926007948a92611950575b50508160011b916000199060031b1c19161760038201555b6080880151600482015560a088015160058201556006810160018060a01b0360c08a01511681549060ff60a01b60e08c0151151560a01b169160018060a81b031916171790550195015194855160018060401b03811161193c5761183f816118398454614628565b846147dd565b6020601f82116001146118c85781908798600080516020615ef08339815191529798926118bd575b50508160011b916000199060031b1c19161790555b600d548552601960205261189381604087206148a7565b8452601f6020526118aa60408520600d54906148a7565b600d549261117c60405192839283614824565b015190503880611867565b8287526020872097601f198316885b818110611924575091600080516020615ef08339815191529798999184600195941061190b575b505050811b01905561187c565b015160001960f88460031b161c191690553880806118fe565b838301518b556001909a0199602093840193016118d7565b634e487b7160e01b86526041600452602486fd5b0151905038806117b9565b906003840188526020882091885b601f19851681106119b6575092610100949260019260079583601f1981161061199d575b505050811b0160038201556117d1565b015160001960f88460031b161c1916905538808061198d565b91926020600181928685015181550194019201611969565b015190503880611752565b9250600284018852602088209088935b601f1984168510611a2d576001945083601f19811610611a14575b505050811b01600282015561176a565b015160001960f88460031b161c19169055388080611a04565b818101518355602094850194600190930192909101906119e9565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b8b52601160045260248bfd5b634e487b7160e01b8a52601160045260248afd5b8580fd5b50346104095780600319360112610409576009546040516001600160a01b039091168152602090f35b5034610409573660031901610180811261040557610140136104095760405190611adc826142ef565b3660231215610409575060405190611af3826142d3565b81610144923684116108d0576004905b848210611b3f57505081526040366101431901126108d05760209161146a9160405191611b2f83614282565b3582526101643584830152615e11565b8135815260209182019101611b03565b503461040957606036600319011261040957600435611b6c6143c2565b6001600160a01b0380611b7d6143d8565b16845260209060168252604085205484865260178352600160408720015403611c1257821684526016815260408420547f91d8f88e2103e9fbf7b05234db8db9719fbb001942620d75ccb0fe36cc3d4e7e9291601f90611bde83151561484c565b85875260198152611bf283604089206148a7565b82875252611c0384604087206148a7565b61117c604051928392836148dc565b60405162461bcd60e51b815260048101839052602360248201527f4f6e6c792061646d696e2063616e2061646420757365727320746f207468652060448201526264616f60e81b6064820152608490fd5b5034610409578060031936011261040957600a546040516001600160a01b039091168152602090f35b503461040957608036600319011261040957602061146a604051611caf81614267565b611cb8366145d3565b8152604435838201526064356040820152615dd5565b503461040957604036600319011261040957600435611ceb6143c2565b81835260206017815260ff600660408620015460a01c16611dd8578284526017815260408085206006015490516370a0823160e01b81526001600160a01b038085166004830181905291949392839186916024918391165afa93841561085d578694611da7575b50611d8e7fdc463d5cc5ec176a75297fc551efa8870a347842d12a5f0a37131f0c661b6e789486885260178452600460408920015411156148f5565b855260168152601f604086205491611bde83151561484c565b93508184813d8311611dd1575b611dbe8183614325565b810103126108d057925192611d8e611d52565b503d611db4565b6064906040519062461bcd60e51b82526004820152600e60248201526d44616f206973205072697661746560901b6044820152fd5b5034610409576040602091611e2136614730565b90825283805282822090825283522054604051908152f35b5034610409578060031936011261040957611e5261478b565b600980546001600160a01b031981169091556000906001600160a01b0316600080516020615f908339815191528280a380f35b503461040957611e9436614730565b9190815260196020526040812090815483101561040957602061043e8484614746565b503461040957611ec636614730565b91908152601e6020526040812090815483101561040957602061043e8484614746565b5034610409576101403660031901126104095760803660231901126108d057604051611f14816142b8565b60243560ff811681036108d057815260443560ff811681036108d057602082015260643560ff811681036108d057604082015260843560ff811681036108d057606082015260403660a31901126108d057604051611f7181614282565b60a435815260c4356020820152611f8661441a565b61010435906001600160a01b03821682036108d05761012435926002841015611a8657611fb594600435614f9b565b80f35b50346104095780600319360112610409576020604051600a8152f35b5034610409578060031936011261040957602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346104095736600319016101008112610405576080136108d057604051612039816142b8565b60043560ff811681036108d05781526024359060ff821682036108d057602081019182526044359160ff831683036108d057604082019283526064359060ff821682036108d0576060830191825260403660831901126108d057604051906120a082614282565b6084358252602082019260a43584526120b7614404565b9560ff6120c261441a565b966120cb61478b565b511663ff00000062ff000061ff00601054965160081b16935160101b16935160181b169363ffffffff191617171717601055516011555160125560018060a01b03908160018060a01b031993168360135416176013551690601454161760145580f35b503461040957602061214861214236614730565b90614e44565b6040519015158152f35b50346104095780600319360112610409576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461040957604036600319011261040957366023121561040957602061146a6121c0366146f8565b615338565b503461040957602061146a6121d936614730565b604051916121e683614282565b6040368437825283820152615338565b50346104095760209081600319360112610409576004356001600160401b038111610405573660238201121561040557806004013561223481614774565b916122426040519384614325565b8183528483016024819360051b83010191368311611a865791869394916024879401905b8282106122f157505050604051838101809251909590845b8181106122d8575050506122a0816122b194959603601f198101835282614325565b604051928392839251928391614430565b8101039060025afa15610cda57600080516020615f30833981519152905106604051908152f35b825188529686019689968996509092019160010161227e565b81358152879450908501908501612266565b50346104095761231236614730565b91908152601f6020526040812090815483101561040957602061043e8484614746565b5034610409576020366003190112610409576040906004358152601860205220805460018201549160405161237181610a208160028601614662565b6003820154916004810154600582015460018060a01b036006840154166007840154916008850154936123c960ff600a600989015498015416976040519b8c9b8c5260208c01526101608060408d01528b0190614453565b9760608a0152608089015260a088015260c087015260e086015261010085015261012084015215156101408301520390f35b50346104095780600319360112610409576020600f54604051908152f35b50346104095760a0366003190112610409576004356001600160401b0381116104055761244a9036906004016145fb565b906001600160401b0360243511610d1057366023602435011215610d10576001600160401b036004602435013511610d105736602480356004013560051b8135010111610d10576044356001600160401b03811161139a576124b09036906004016145fb565b919060026084351015611396576124c561478b565b60055460135460145460405192959261253e9290916001600160a01b0390811691166124f0836142b8565b60ff6010548181168552818160081c166020860152818160101c16604086015260181c16606084015260405161252581614282565b6011548152601254602082015260843593606435614f9b565b838652600660205261255260408720614935565b9260018060a01b03845116875260256020528460408820556040519560208088015261259e876125906040820160243560040135602480350161498e565b03601f198101895288614325565b6125aa60643542614a17565b96604051906125b8826142d3565b8782526125c6368486614348565b602083015260408201526125db368587614348565b60608201528560808201524260a08201528760c08201526024356004013560e082015261260d60243560040135614774565b61261a6040519182614325565b602480356004810135835201602082015b602480356004013560051b813501018210612ca2575050610100820152604051612654816142ef565b8981526101208201528689526024602052604089209080518255602081015180519060018060401b038211612b2057819061269f826126966001880154614628565b600188016147dd565b602090601f8311600114612c33578d92612c28575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211612b205781906126fe826126f56002880154614628565b600288016147dd565b602090601f8311600114612bb9578d92612bae575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b038211612b2057819061275d826127546003880154614628565b600388016147dd565b602090601f8311600114612b3f578d92612b34575b50508160011b916000199060031b1c19161760038301555b608081015180516004840180546001600160a01b03199081166001600160a01b039384161790915560208301516005860180548316918416919091179055604090920151600685018054909316911617905560a0810151600783015560c0810151600883015560e08101516009830155610100810151805190600160401b8211612b2057600a84015482600a860155808310612aa5575b50602001600a84018c5260208c208c915b8383106129b0575050505061012001518051906001600160401b0382116113825761286d82612864600b860154614628565b600b86016147dd565b6020908b601f84116001146129245793600b846128dd95600080516020615ed08339815191529c9b99956129049b99956128f69992612919575b50508160011b916000199060031b1c1916179101555b6128ca6040518099614478565b610100606089015261010088019161496d565b858103608087015260243560040135602480350161498e565b9184830360a086015261496d565b934260c083015260e08201528033940390a380f35b0151905038806128a7565b5090600b84018c5260208c20918c5b601f1985168110612998575093600b600185600080516020615ed08339815191529c9b99956129049b99956128f6996128dd99601f1981161061297f575b505050811b019101556128bd565b015160001960f88460031b161c19169055388080612971565b91926020600181928685015181550194019201612933565b80518051906001600160401b038211612a90578f906129d9836129d38754614628565b876147dd565b602091601f8411600114612a2357928060209360019693879692612a18575b5050600019600383901b1c191690841b1785555b01920192019190612832565b0151905038806129f8565b919085835260208320925b601f1985168110612a78575083602093600196938796938794601f19811610612a5f575b505050811b018555612a0c565b015160001960f88460031b161c19169055388080612a52565b91926020600181928685015181550194019201612a2e565b50634e487b7160e01b8f52604160045260248ffd5b600a85018d5260208d20908382018e5b8284018210612ac657505050612821565b90600191612ad48254614628565b80612ae3575b5050018e612ab5565b601f81118414612afb575050600081555b8f38612ada565b828252612b16601f60208420920160051c82018583016147c6565b6000835555612af4565b634e487b7160e01b8c52604160045260248cfd5b015190503880612772565b9250600385018d5260208d20908d935b601f1984168510612b93576001945083601f19811610612b7a575b505050811b01600383015561278a565b015160001960f88460031b161c19169055388080612b6a565b81810151835560209485019460019093019290910190612b4f565b015190503880612713565b9250600285018d5260208d20908d935b601f1984168510612c0d576001945083601f19811610612bf4575b505050811b01600283015561272b565b015160001960f88460031b161c19169055388080612be4565b81810151835560209485019460019093019290910190612bc9565b0151905038806126b4565b9250600185018d5260208d20908d935b601f1984168510612c87576001945083601f19811610612c6e575b505050811b0160018301556126cc565b015160001960f88460031b161c19169055388080612c5e565b81810151835560209485019460019093019290910190612c43565b6001600160401b03823511612cd15760208091612cc636602486358135010161438e565b81520191019061262b565b8b80fd5b5034610409576080366003190112610409576001600160401b03600435818111610d1057612d0790369060040161438e565b9060243581811161139a57612d2090369060040161438e565b60443592606435838111611a8657612d3c90369060040161438e565b90612d473386614e94565b50612d53600f546147b7565b9182600f553387526020946016865260408820549260405195612d758761429d565b85875287870191825260408701908152606087019384526080870194855260a08701958987528a526022885260408a20965187556001918288019051805190858211613030578c8291612dcc836129d38754614628565b8c91601f8411600114612fcf5792612fc4575b5050600019600383901b1c191690841b1790555b5180516002880191848211612b20578190612e12826110188654614628565b8a908d601f8411600114612f635792612f58575b5050600019600383901b1c191690831b1790555b600386019251805192831161129057612e57836110188654614628565b87908a601f8511600114612eec579360239998979593819382936005999794612ee1575b50501b916000199060031b1c19161790555b5160048401555191015582845252612eab60408320600f54906148a7565b7f1fde1754c4885768c21d9296fa19a786545751f6219e5505a782dfdf86fda8dd61117c600f54926040519182913390836148dc565b015192503880612e7b565b50848b52888b209293929190601f1984168c5b818110612f435750916005979593918560239c9b9a98969410612f2a575b505050811b019055612e8d565b015160001960f88460031b161c19169055388080612f1d565b82840151855593860193928b01928b01612eff565b015190503880612e26565b8581528c8120879550929190601f198516908e5b828210612fad5750508411612f94575b505050811b019055612e3a565b015160001960f88460031b161c19169055388080612f87565b83850151865589979095019493840193018e612f77565b015190503880612ddf565b8581528d8120889550929190601f198516908f5b8282106130195750508411613000575b505050811b019055612df3565b015160001960f88460031b161c19169055388080612ff3565b8385015186558a979095019493840193018f612fe3565b634e487b7160e01b8d52604160045260248dfd5b5034610409576020806003193601126104055760043582526019815260408220916040518092808554928381520194835280832092905b828210613092576103ea856103de81890382614325565b83548652948501946001938401939091019061307b565b5034610409576020366003190112610409576001600160a01b036130cb6143ee565b168082526025602052604082205460055411156130f8578160409160209352602583522054604051908152f35b6024906040519063e64d908d60e01b82526004820152fd5b503461040957602080600319360112610405576004358252601d815260408220916040518092808554928381520194835280832092905b82821061315e576103ea856103de81890382614325565b835486529485019460019384019390910190613147565b503461040957806003193601126104095764ffffffffff908160075460281c16906001809381945b6131ae575b602061146a86866154d3565b90919360ff80821691858486851b1610156131e9575081146131d55782019391908161319d565b634e487b7160e01b85526011600452602485fd5b9550506131a2565b503461040957608036600319011261040957600435602480356132126143d8565b906064359184865260189386602092868452613238610695826005604086200154614e94565b8782528684526132516007604084200154421015614d81565b87825286845261326960086040842001544210614dc6565b87825286845260408083206006015490516370a0823160e01b8152336004820152976001600160a01b039091169085898681855afa98891561346c578499613435575b5090859291338552601684526040852054998b8652818552604086206004015411156132d7906148f5565b8a8552835260408420600401548710156132f0906148f5565b60405180948180946323b872dd60e01b82528a30600484019261331293614e22565b03925af1801561342a5761340d575b5060018084018085116133fa57811c84925b8382106133c7575050917fb70003fc4a69addb9afd44dd9b2219fa0d52a26a4393ca85821c0768ef0a60479593918593606096146000146133a15787895281805260408920858a52825261338c60408a20918254614a17565b90555b6040519384528301526040820152a280f35b8789526021825260408920858a5282526133c060408a20918254614a17565b905561338f565b9092508280156133e557806133dd918704614a17565b821c90613333565b50634e487b7160e01b60009081526012600452fd5b634e487b7160e01b895260116004528289fd5b61342390833d8511610856576108478183614325565b5038613321565b6040513d8a823e3d90fd5b8680929a5081949395503d8311613465575b6134518183614325565b810103126108d057905196899290856132ac565b503d613447565b6040513d86823e3d90fd5b50346104095760803660031901126104095736602312156104095760405161349e816142b8565b6084813682116108d0576020926004905b8382106134c0578461146a846153bd565b813581529084019084016134af565b5034610409576020366003190112610409576040906004358152602260205220805460405191613506836109ea8160018501614662565b60405161351a81610a208160028601614662565b61357760405161353181610a208160038801614662565b613569600560048601549501549361355b604051988998895260c060208a015260c0890190614453565b908782036040890152614453565b908582036060870152614453565b91608084015260a08301520390f35b50346104095780600319360112610409576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610409576040366003190112610409576004356001600160401b0360243581811161139a576136009036906004016145fb565b919061360a61478b565b6005548410156137115783855260209160248352600b604087200190841161193c576136408461363a8354614628565b836147dd565b85601f851160011461369b579161117c9185600080516020615f108339815191529695948991613690575b508560011b906000198760031b1c19161790555b60405193838594855284019161496d565b90508201353861366b565b81875283872090601f198616885b8181106136fa57509161117c939187600080516020615f1083398151915298979694106136e0575b5050600185811b01905561367f565b830135600019600388901b60f8161c1916905538806136d1565b9192866001819286890135815501940192016136a9565b60405163a86ecdd560e01b815260048101859052602490fd5b503461040957608036600319011261040957613745366145d3565b6001600160401b039060443582811161139a5761376690369060040161438e565b6064358381116113965761377e90369060040161438e565b90825185526026602052604085206020840151865260205260ff9384604087205416613b665760075464ffffffffff7f00000000000000000000000000000000000000000000000000000000000000009160281c161015613b54576137e984516020860151906152ab565b15613b42576001600160a01b03918691907f0000000000000000000000000000000000000000000000000000000000000000841690813b1561139a5783916138489160405195868094819363125c7dfb60e11b83523360048401614f09565b03925af180156108dc57613b19575b505061387c91602091604051808095819463b36543a960e01b83523360048401614f09565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa90811561346c578491613ae7575b506138d46040516138c081614267565b838152826020820152426040820152615dd5565b926007549364ffffffffff8560281c169060019586830164ffffffffff8111613ad15764ffffffffff60281b1990911660289190911b64ffffffffff60281b161760075590869073Db6F8a73C48a17D8462762296ef353B5D0c113ea90875b6139bf575b505050505061395264ffffffffff60075460281c16614f2b565b7fd3c3cd829e4e37d5baaf10abace26b24e0046e20500c999380410f807edfcda0606084519260208601519464ffffffffff604051921682526020820152426040820152a38051835260266020526020604084209101518352602052604082209060ff1982541617905580f35b64ffffffffff6139e4826139df868916602088901b60ff60201b16614f42565b61548c565b168952600893846020528060408b205588821615613acb57613a5394602091613a15613a0f85614f2b565b876154a5565b9164ffffffffff60405193613a2985614282565b168d52835260408c2054825282820152604051809681926314d2f97b60e11b83526004830161530a565b0381855af4938415613ac057889486918b91613a81575b5094938401169290811c647fffffffff1690613933565b955050506020843d602011613ab8575b81613a9e60209383614325565b810103126108d0578488647fffffffff8196519150613a6a565b3d9150613a91565b6040513d8b823e3d90fd5b50613938565b634e487b7160e01b600052601160045260246000fd5b90506020813d602011613b11575b81613b0260209383614325565b810103126108d05751386138b0565b3d9150613af5565b8196929611613b2e5760405293816020613857565b634e487b7160e01b82526041600452602482fd5b6040516379fae7af60e01b8152600490fd5b60405163b984588b60e01b8152600490fd5b604051632e13e04560e01b8152600490fd5b5034610409578060031936011261040957604060115460125482519182526020820152f35b5034610409576040366003190112610409576020612148613bbc6143c2565b600435614e94565b50346104095780600319360112610409576013546040516001600160a01b039091168152602090f35b50346104095780600319360112610409576020600554604051908152f35b503461040957606036600319011261040957604435801515810361040557613c3890602435600435614bdc565b60405190602092838301848452825180915260408401948060408360051b870101940192955b828710613c6b5785850386f35b909192938280613c87600193603f198a8203018652885161449f565b9601920196019592919092613c5e565b503461040957602036600319011261040957600435613cb4614a31565b50600554811015613ce457604082613cd59260609452600660205220614935565b613ce26040518092614478565bf35b6024906040519063a86ecdd560e01b82526004820152fd5b5034610409576020806003193601126104055760043582526023815260408220916040518092808554928381520194835280832092905b828210613d4a576103ea856103de81890382614325565b835486529485019460019384019390910190613d33565b50346104095780600319360112610409576014546040516001600160a01b039091168152602090f35b5034610409578060031936011261040957602064ffffffffff60075460281c16604051908152f35b503461040957602036600319011261040957600435613dcf614a50565b50600554811015613ce457604082613df1926103ea9452602460205220614ac7565b60405191829160208352602083019061449f565b503461040957610140366003190112610409576024356001600160401b03811161040557613e3790369060040161438e565b613e3f6143ac565b60a4356001600160a01b038116919082900361139a576101243590811515820361139657606435855260176020526024602060018060a01b03600660408920015416604051928380926370a0823160e01b82528860048301525afa90811561085d5786916141ad575b506064358652601760205260056040872001541161416857613ecb600c546147b7565b9283600c55855260166020526040852054604435670de0b6b3a764000091818381020483148215171561415457604051966001600160401b0361016089019081119089111761414057610160880160405286885260043560208901526040880152606087015202608085015260643560a085015260018060a01b031660c084015260c43560e084015260e43561010084015261010435610120840152151561014083015282526018602052604082208151815560208201516001820155604082015180519060018060401b03821161412c57613fb782613fae6002860154614628565b600286016147dd565b602090601f83116001146140b95791806101409492600a9488926140ae575b50508160011b916000199060031b1c19161760028201555b606084015160038201556080840151600482015560a084015160058201556006810160018060a01b0360c08601511660018060a01b031982541617905560e084015160078201556101008401516008820155610120840151600982015501910151151560ff801983541691161790556064358152601a60205261407760408220600c54906148a7565b600c547f2e8c120bfdd294891f6ac45b1d661997690ad24bb51f51e4d357365f25c190236040518061117c60a435606435836148dc565b015190503880613fd6565b906002840186526020862091865b601f19851681106141145750926101409492600192600a9583601f198116106140fb575b505050811b016002820155613fee565b015160001960f88460031b161c191690553880806140eb565b919260206001819286850151815501940192016140c7565b634e487b7160e01b85526041600452602485fd5b634e487b7160e01b89526041600452602489fd5b634e487b7160e01b88526011600452602488fd5b60405162461bcd60e51b815260206004820152601d60248201527f596f7520646f206e6f74206861766520656e6f75676820746f6b656e730000006044820152606490fd5b90506020813d6020116141d7575b816141c860209383614325565b81010312611a86575138613ea8565b3d91506141bb565b50346104095780600319360112610409576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346104055781600319360112610405577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b606081019081106001600160401b03821117611a4857604052565b604081019081106001600160401b03821117611a4857604052565b60c081019081106001600160401b03821117611a4857604052565b608081019081106001600160401b03821117611a4857604052565b61014081019081106001600160401b03821117611a4857604052565b602081019081106001600160401b03821117611a4857604052565b60a081019081106001600160401b03821117611a4857604052565b601f909101601f19168101906001600160401b03821190821017611a4857604052565b9192916001600160401b038211611a485760405191614371601f8201601f191660200184614325565b8294818452818301116108d0578281602093846000960137010152565b9080601f830112156108d0578160206143a993359101614348565b90565b608435906001600160a01b03821682036108d057565b602435906001600160a01b03821682036108d057565b604435906001600160a01b03821682036108d057565b600435906001600160a01b03821682036108d057565b60c435906001600160a01b03821682036108d057565b60e435906001600160a01b03821682036108d057565b60005b8381106144435750506000910152565b8181015183820152602001614433565b9060209161446c81518092818552858086019101614430565b601f01601f1916010190565b80516001600160a01b03908116835260208083015182169084015260409182015116910152565b9190825181526020906144e96144d76144c5848701516101808087870152850190614453565b60408701518482036040860152614453565b60608601518382036060850152614453565b936144fc60808201516080840190614478565b60a081015160e083015260c081015190610100918284015260e08101519161012092838501528101519383870361014085015284518088528188019180808360051b8b01019701926000905b83821061456b5750505050506143a9949550015190610160818403910152614453565b909192939783806145896001938e601f199082030186528c51614453565b9a019201920190939291614548565b6020908160408183019282815285518094520193019160005b8281106145bf575050505090565b8351855293810193928101926001016145b1565b60409060031901126108d057604051906145ec82614282565b60043582526024356020830152565b9181601f840112156108d0578235916001600160401b0383116108d057602083818601950101116108d057565b90600182811c92168015614658575b602083101461464257565b634e487b7160e01b600052602260045260246000fd5b91607f1691614637565b906000929180549161467383614628565b9182825260019384811690816000146146d55750600114614695575b50505050565b90919394506000526020928360002092846000945b8386106146c157505050500101903880808061468f565b8054858701830152940193859082016146aa565b9294505050602093945060ff191683830152151560051b0101903880808061468f565b906040519161470683614282565b8260449182116108d0576004905b82821061472057505050565b8135815260209182019101614714565b60409060031901126108d0576004359060243590565b805482101561475e5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160401b038111611a485760051b60200190565b6009546001600160a01b0316330361479f57565b60405163118cdaa760e01b8152336004820152602490fd5b6000198114613ad15760010190565b8181106147d1575050565b600081556001016147c6565b9190601f81116147ec57505050565b614818926000526020600020906020601f840160051c8301931061481a575b601f0160051c01906147c6565b565b909150819061480b565b9061483c602091949394604084526040840190614453565b6001600160a01b03909416910152565b1561485357565b60405162461bcd60e51b815260206004820152602660248201527f55736572206973206e6f74207265676973746572656420696e746f207468652060448201526573797374656d60d01b6064820152608490fd5b8054600160401b811015611a48576148c491600182018155614746565b819291549060031b91821b91600019901b1916179055565b9081526001600160a01b03909116602082015260400190565b156148fc57565b60405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820546f6b656e7360781b6044820152606490fd5b9060405161494281614267565b82546001600160a01b0390811682526001840154811660208301526002909301549092166040830152565b908060209392818452848401376000828201840152601f01601f1916010190565b9082818152602080910193818360051b82010194846000925b8584106149b8575050505050505090565b90919293949596601f198282030184528735601e19843603018112156108d05783018681019190356001600160401b0381116108d05780360383136108d057614a068892839260019561496d565b9901940194019295949391906149a7565b91908201809211613ad157565b91908203918211613ad157565b60405190614a3e82614267565b60006040838281528260208201520152565b60405190614a5d826142d3565b81600081526101206060918260208201528260408201528280820152614a81614a31565b6080820152600060a0820152600060c0820152600060e0820152826101008201520152565b80511561475e5760200190565b805182101561475e5760209160051b010190565b90604091825190614ad7826142d3565b81938154835280516001614af882614af181848801614662565b0383614325565b602091828601528251614b1281610a208160028901614662565b838601528251614b2981610a208160038901614662565b6060860152614b3a60048501614935565b6080860152600784015460a0860152600884015460c0860152600984015460e0860152600a8401805490614b6d82614774565b93614b7a86519586614325565b82855260009182528082208186015b848410614bba57505050505050610120926109ea8593614bb693610100600b980152518096819301614662565b0152565b858381928a51614bce81610a208189614662565b815201920193019290614b89565b60001993928482019290918311613ad15780830292808404821490151715613ad157614c089083614a17565b93808501948511613ad15784916005549586851015614d1c57861115614d0a575b614c338484614a24565b9060018201809211613ad157614c4882614774565b92604092614c5884519586614325565b808552614c67601f1991614774565b0160005b818110614cf357505083976000965b86811115614c8c575050505050505050565b808415614cd7575b90614cd2916000526024602052614ccc8660002099614cbb614cb5826147b7565b9b614ac7565b614cc5828b614ab3565b5288614ab3565b506147b7565b614c7a565b50614ce28183614a24565b90838201918211613ad15790614c94565b602090614cfe614a50565b82828901015201614c6b565b9150808501858111613ad15791614c29565b50505050509050604051614d2f816142ef565b6000815290565b15614d3d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f6e6c79206d656d62657273206f66207468652064616f2063616e20766f74656044820152fd5b15614d8857565b60405162461bcd60e51b8152602060048201526016602482015275159bdd1a5b99c81a185cc81b9bdd081cdd185c9d195960521b6044820152606490fd5b15614dcd57565b60405162461bcd60e51b8152602060048201526015602482015274159bdd1a5b99c8151a5b59481a185cc8195b991959605a1b6044820152606490fd5b908160209103126108d0575180151581036108d05790565b6001600160a01b03918216815291166020820152604081019190915260600190565b60005b82600052601b60205260406000208054821015614e8b5781614e6891614746565b90549060031b1c8214614e8357614e7e906147b7565b614e47565b505050600190565b50505050600090565b60009160018060a01b03168252602060168152604080842054918385526019908181528286205494865b868110614ecf575050505050505090565b818852838352614ee181868a20614746565b90549060031b1c8614614efc57614ef7906147b7565b614ebe565b5050505050505050600190565b6001600160a01b0390911681526040602082018190526143a992910190614453565b64ffffffffff9081166000190191908211613ad157565b64ffffffffff9182169082160391908211613ad157565b908160209103126108d057516001600160a01b03811681036108d05790565b906002821015614f855752565b634e487b7160e01b600052602160045260246000fd5b9391949092946005549260018401600555815195602097614fc1898501988951906152ab565b15613b4257606087019660ff8851166000198101908111613ad157600581101561475e5754604080516370f7b36160e01b81526004810195909552825160ff9081166024870152838d015181166044870152928101518316606486015298519091166084840152845160a4840152885160c48401523060e48401526101048301526000916001600160a01b03918a8261012481877f000000000000000000000000000000000000000000000000000000000000000088165af19182156152a1578492615282575b508280808b5193633634487360e01b85521696876004850152169283602484015216918260448301523360648301526150c46084830189614f78565b8b8260a48188887f0000000000000000000000000000000000000000000000000000000000000000165af191821561527857908492918692615259575b508a519663431a717560e01b885260048801526024870152826044870152169283606486015233608486015261513a60a4860188614f78565b8a8560c48184877f0000000000000000000000000000000000000000000000000000000000000000165af194851561524d579189828d61520d9997957f38b2d18bb65cc91d7b436014cf44c8298b13bee60cc18d9e8efec26d1df318909d9c9b99979597615210575b509184916006600295948351956151b987614267565b8652808601988952848487019a168a528d835252209151169360018060a01b031994858354161782558360018301915116858254161790550192511690825416179055519551968451938452830190614f78565ba3565b81975091600661523a879460029796943d8c11615246575b6152328183614325565b810190614f59565b989294955050916151a3565b503d615228565b508851903d90823e3d90fd5b6152719192508d803d10615246576152328183614325565b9038615101565b8a513d87823e3d90fd5b61529a9192508b3d8d11615246576152328183614325565b9038615088565b89513d86823e3d90fd5b90600080516020615f30833981519152808080858196099380098180828187620292fc090894620292f809096001089080828111156152f7575b506000916152f291614a24565b081590565b9050828101809111613ad15760006152e5565b6040810192916000915b6002831061532157505050565b600190825181526020809101920192019190615314565b602061535891604051809381926314d2f97b60e11b83526004830161530a565b038173Db6F8a73C48a17D8462762296ef353B5D0c113ea5af49081156153b157600091615383575090565b906020823d82116153a9575b8161539c60209383614325565b8101031261040957505190565b3d915061538f565b6040513d6000823e3d90fd5b60405163248f667760e01b81529060049060008284015b83821061540e5750505050602081608481738255C396fED4f733102A32d759A2Fc245890BE985af49081156153b157600091615383575090565b6001908351815260208091019301910190916153d4565b604051630926f44b60e31b815290600090600483015b600583106154755750505060208160a48173dAfb17eCdc446C97a6878D1a54D0bA73098b48BB5af49081156153b157600091615383575090565b60019082518152602080910192019201919061543b565b91909164ffffffffff80809416911601918211613ad157565b6143a991906139df9060ff81169060201b60ff60201b16614f42565b60ff60019116019060ff8211613ad157565b919060ff92838216916020908184116157f75764ffffffffff918284169182156157e65761550188916154c1565b1661553861550e82614774565b9560409261551e84519889614325565b80885261552d601f1991614774565b013685890137614f2b565b9060019485808416156000146157c3575080831694818611613ad157869560005260088552826000205461556b89614aa6565b52999592995b6000935b615590575b5050505050505061558c929350614ab3565b5190565b86849a9998979a16888110156157b857858c881661567f576155ea916155c18651916155bb83614282565b8b614ab3565b5181526155cd87615809565b828201528551809381926314d2f97b60e11b83526004830161530a565b038173Db6F8a73C48a17D8462762296ef353B5D0c113ea5af490811561567457600091615647575b509986647fffffffff829d8a9b9c9d615637849c866156308c6154c1565b1690614ab3565b525b821c16950116939a96615575565b908682813d831161566d575b61565d8183614325565b8101031261040957505186615612565b503d615653565b84513d6000823e3d90fd5b5082828c61568c886154c1565b161c1690647fffffffff8d891c168092116000146156e757509986647fffffffff829d856156c6849c9d9e9f6156c18b6154c1565b6154a5565b166000526008895286600020546156e18d866156308c6154c1565b52615639565b61574591508690846157028f6156fc90614f2b565b896154a5565b166000526008825261572786600020549187519261571f84614282565b83528b614ab3565b51828201528551809381926314d2f97b60e11b83526004830161530a565b038173Db6F8a73C48a17D8462762296ef353B5D0c113ea5af49081156156745760009161578b575b509986647fffffffff829d8a9b9c9d6156e1849c866156308c6154c1565b908682813d83116157b1575b6157a18183614325565b810103126104095750518661576d565b503d615797565b50869798995061557a565b94600080516020615f508339815191526157dc89614aa6565b5299959299615571565b9450505050506143a9919250615809565b604051633e104c7760e01b8152600490fd5b60ff168015615dc25760018114615d9d5760028114615d785760038114615d535760048114615d2e5760058114615d095760068114615ce45760078114615cbf5760088114615c9a5760098114615c7557600a8114615c5057600b8114615c2b57600c8114615c0657600d8114615be157600e8114615bbc57600f8114615b975760108114615b725760118114615b4d5760128114615b285760138114615b035760148114615ade5760158114615ab95760168114615a945760178114615a6f5760188114615a4a5760198114615a2557601a8114615a0057601b81146159db57601c81146159b657601d811461599157601e811461596c57601f811461594757602014615923576040516310a2ea0560e21b8152600490fd5b7f1d90601a0c76d2f39824f6dc198fb3b48cbd0231516c8f6208e56ea741c341f990565b507f216b9fa3ac3724cf1ec6caf5a66dd85cae3aee727e00d2a0a59f273df3401f1090565b507f2b59c2651b412c029efa38f835ac1b1b5bdaf89dcb2e4bc9219e7d77c65e776a90565b507f14b46e659dc4072fc64a18d44911c4a303b45f1296c3cb7dec77f269bee9b5df90565b507f0845dd838ca63b2f68775aac8513bd692d26f511698206f3c6ce2b4100dd8d8f90565b507f132e4ff3e4ba890f1610efd4d2f69700b825514d557b82663878a56e2acef41c90565b507f24cb019b59431c232413f66b041923214f7a8a7489caa05b66860f1c3c76d3b190565b507f1b6367322bac9f24889900d310e2feaa0021516fac77470aea078e89335d3fcf90565b507f19b336a1e0a933e2a8f97d97322dcee843a2d9a2401bece52a3a25ddd5bb6bc990565b507f1d71ada9e49baeb4a2cf26be37d3bc680554995ef6706105e93978ba71cacf9490565b507f2560496c1138c827f1efb407d0cdb9d6ec9539b0957dfb67de2776e6026d630f90565b507f2ce2c1fb109ad6574570826774ecfca3e04866bb5a3963962b873646db6641f390565b507f1713f3e3dc5e2393bd31ccc0cdd8601bdee3198cf34d566bb60cfab13e5a087390565b507f2c849a73ab21c9e88e1d711f221863e2a94eb58f3eb42dde575301451f3ec5c890565b507f1874217e8e1dbc51c571a2db1103bf47c3e66a59305ca48bbcee6ad1c8cc575190565b507f2b8342160822355808db759147a7d6f61de451bd5bb88f9db2eb406ea68b813890565b507f199cd1f5b757c285023767abbe9bbb318da4e1fd375b5a001b54a0f3901ea7d390565b507f128fb9ad5b2d8e694bec0888ff95609c15b2a96ae80a34946c953dc503e46fb690565b507f2ec047dd616221873c234f36461080c3e760644bb519ebdb49eb9645215e0edc90565b507f2582b5cdefe032d75373f0ede9171406137e93e7d44405a0b0a409c1c739138090565b507f1f336d6d45d293180c75964e99a7599d44cac2ad447c202c3e1973b0322cf99090565b507f05e0136534f74776d69646bd0bd94519e63af45734405f479382d8400514c1a690565b507f10f7b76489e9c36644736c33c600d1bcedd465fd0aff3027e67b02e13875272d90565b507f1e73f08f6e5e4bb9c2096cc4587526ebfd033c222f4a27e97119c867c36a0d3a90565b507f1ea63a974336db6c0423e719d3f0e11494266237dda3a40de3cb76104436635990565b507f0690bfb582c7502ff6d15d519740ecd73d652b7a14dc82bfd250613ee8e0407690565b507f30553f8216db90854953edd47602897f897104d5b0d65a5ce000981c51da32e090565b507f11dc55d21b17daf8e60253c2a43d519039ba968733cf7c9d5df6155939e1a6d890565b507f08e4b5d410c8de929132c214ea600b5f252fa14aabb97ea67cda5bb4e0ebeec890565b507f04265868d2e705f48d3ae49f7749e67a587dafdb569c1d7334675496046eaad690565b507f2a06fb0b739b402c34dc752d8417b9cd67b7f7cabe4b06b5d995053791fcede490565b507f06928e817d2804a3713efd102bae900c9ab3e8e0b0c6c20f8613bd3b0423a89190565b50600080516020615f5083398151915290565b6143a9906040805191615de7836142b8565b608036843780515183526020815101516020840152602081015182840152015160608201526153bd565b60206143a9926040615eb9815194615e288661430a565b60a0368737805151865284815101518587015282815101518387015260608151015160608701526080815101516080870152610120835191615e698361430a565b60a036843760a081510151835260c0815101518784015260e081510151858401526101008151015160608401525101516080820152615eb2835196615ead886142b8565b615425565b8652615425565b83850152815190840152015160608201526153bd56fe7532e9985b123ef8bda3bc40b1a4296f34238889a58a41de23df560b8bfb9bc6526a4ede5e3a32e00a9764bde0eecbb0544853b17bebb12f4a8500ccd51372152cd30b9efd64638f847bef681e87dfbb567e261d02660c8166a92f33729ab33e30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba1c81d7053f5e6f875e0d7b584d3354071899b7dc927e6d7b48b58caa90cf3de88be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220ea5b01e6cc4cd1d71d4c324a3d9dd82963e8e8c5682da3d6e01582428c01413464736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c908163055575eb1461422457508063079410db146141df5780630e1b191f14613e055780631096c30e14613db2578063122db15314613d8a57806313fb893214613d615780631a56763614613cfc5780631a8cbcaa14613c975780631b6ef3c514613c0b5780632b78657114613bed5780632b7ac3f314613bc45780632dba654714613b9d57806331e766a514613b785780633364120a1461372a5780633364c4c8146135cb578063343393b5146135865780633bd8e51e146134cf5780633dfb88b2146134775780633e33c05e146131f1578063423f3e191461317557806345404bbd1461311057806346e47f9a146130a95780634aaa315d146130445780634c58b7a914612cd55780634d5da86b14612419578063553181ec146123fb57806356a58ebf1461233557806356f28b0a1461230357806358bfc379146121f65780635bb93995146121c557806362a361bb1461219757806362b31f1e1461215257806364390ff11461212e57806364e0ece114612012578063652c76e414611fd4578063683f3dc314611fb85780636b4575e214611ee95780636cd84de714611eb75780636d85003314611e85578063715018a614611e3957806372524bf314611e0d578063756b425914611cce5780637d0a81c814611c8c5780637eb3282614611c635780637ee0a23014611b4f5780638a2a3dfb14611ab35780638da5cb5b14611a8a578063941a35de1461159e57806394316829146114ae5780639c4ae5e1146114815780639cfced9714611421578063a3f9ac62146113bc578063a78d80fc1461139e578063a843e07614610f14578063aab4a67014610ecf578063aab6568614610e6a578063abe7095114610e31578063ac2f007414610de2578063ac98e5df14610da0578063b686872014610d70578063b87802c814610d46578063ba8f07a314610d14578063bea140b314610c14578063bee5eabe14610be2578063bff1f9e114610bc4578063bff3375e14610b5f578063c228995d14610b2d578063c8cf9ab214610af4578063c9354bb514610ad6578063cc6e4a3814610aa4578063cd585b37146109b3578063cea3e53014610995578063d7a71b9a14610963578063df82635a14610928578063eae24c7714610654578063edbfe83f14610529578063f2fde38b146104b1578063f55082ce1461044c578063f9d5b5de1461040c5763fcde7bd91461039157600080fd5b3461040957602080600319360112610405576004358252601f815260408220916040518092808554928381520194835280832092905b8282106103ee576103ea856103de81890382614325565b60405191829182614598565b0390f35b8354865294850194600193840193909101906103c7565b5080fd5b80fd5b50346104095761041b36614730565b91908152601c6020526040812090815483101561040957602061043e8484614746565b90546040519160031b1c8152f35b503461040957602080600319360112610405576004358252601c815260408220916040518092808554928381520194835280832092905b82821061049a576103ea856103de81890382614325565b835486529485019460019384019390910190610483565b5034610409576020366003190112610409576104cb6143ee565b6104d361478b565b6001600160a01b0390811690811561051057600980546001600160a01b03198116841790915516600080516020615f90833981519152600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b50346104095760403660031901126104095736602312156104095761054d366146f8565b604051610559816142ef565b604051610565816142d3565b6101409182368337526040519061057b82614282565b838252836020809301528160405193610593856142d3565b8236863780518552015182840152604051906105ae82614282565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78252828201917f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d835260405194610605866142ef565b85526106118186615e11565b6040519551969094865b600a831061063f575050506101a09550519084015251610160830152610180820152f35b81806001928b5181520199019201919761061b565b503461040957606036600319011261040957602435906004356106756143d8565b92818352601860209181835261069a610695876005604089200154614e94565b614d36565b8385528183526106b36007604087200154421015614d81565b8385528183526106cb60086040872001544210614dc6565b838552818352600180604087200154036108e75783855281835260408086206006015490516370a0823160e01b8152336004820152926001600160a01b03909116908484602481855afa9384156108dc5787946108a8575b5033875260168552610749604088205494878952828752600460408a20015411156148f5565b6107538685614e44565b86885281865260ff600a60408a20015416610868575b509684918798876107a09899528352600460408a20015491896040518099819582946323b872dd60e01b8452309060048501614e22565b03925af192831561085d577f24930ecca7f60d4736cd965cb5522694ea4b32308405d3f88fea2f59eff63caa94604094610830575b50600182036107fd57858752601c81526107f1838589206148a7565b8351928352820152a280f35b6002820361081d57858752601d8152610818838589206148a7565b6107f1565b858752601e8152610818838589206148a7565b61084f90823d8411610856575b6108478183614325565b810190614e0a565b50386107d5565b503d61083d565b6040513d88823e3d90fd5b6108725738610769565b60405162461bcd60e51b815260048101869052600e60248201526d155cd95c881a185cc8159bdd195960921b6044820152606490fd5b9093508481813d83116108d5575b6108c08183614325565b810103126108d057519238610723565b600080fd5b503d6108b6565b6040513d89823e3d90fd5b60405162461bcd60e51b8152600481018490526019602482015278566f74696e672054797065206973206e6f74207965732f6e6f60381b6044820152606490fd5b503461040957806003193601126104095760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346104095760ff604060209261097936614730565b9082526026855282822090825284522054166040519015158152f35b50346104095780600319360112610409576020600e54604051908152f35b50346104095760203660031901126104095760409060043581526015602052208054604051916109f1836109ea8160018501614662565b0384614325565b610a9a60405191610a09836109ea8160028501614662565b610a8c604051610a2781610a208160038701614662565b0382614325565b610a7e60405193610a4685610a3f8160048501614662565b0386614325565b600560018060a01b039101541695610a70604051998a998a5260c060208b015260c08a0190614453565b9088820360408a0152614453565b908682036060880152614453565b908482036080860152614453565b9060a08301520390f35b503461040957610ab336614730565b91908152601d6020526040812090815483101561040957602061043e8484614746565b50346104095780600319360112610409576020600d54604051908152f35b5034610409576020366003190112610409576020906040906001600160a01b03610b1c6143ee565b168152602583522054604051908152f35b503461040957610b3c36614730565b91908152601b6020526040812090815483101561040957602061043e8484614746565b503461040957602080600319360112610405576004358252601b815260408220916040518092808554928381520194835280832092905b828210610bad576103ea856103de81890382614325565b835486529485019460019384019390910190610b96565b50346104095780600319360112610409576020600b54604051908152f35b503461040957610bf136614730565b91908152601a6020526040812090815483101561040957602061043e8484614746565b50346104095760603660031901126104095736602312156104095760405190610c3c82614267565b606482368211610d10576004905b828210610d005750506040516304b98e1d60e31b81529283908390600483015b60038310610ce6575050506020918173__$fa059fb1da6d850ca47ea49359bfe89f78$$1540826e134b1b69b7091c82576ee3aadd$__90875b6139bf575b505050505061395264ffffffffff60075460281c16614f2b565b7fd3c3cd829e4e37d5baaf10abace26b24e0046e20500c999380410f807edfcda0606084519260208601519464ffffffffff604051921682526020820152426040820152a38051835260266020526020604084209101518352602052604082209060ff1982541617905580f35b64ffffffffff6139e4826139df868916602088901b60ff60201b16614f42565b61548c565b168952600893846020528060408b205588821615613acb57613a5394602091613a15613a0f85614f2b565b876154a5565b9164ffffffffff60405193613a2985614282565b168d52835260408c2054825282820152604051809681926314d2f97b60e11b83526004830161530a565b0381855af4938415613ac057889486918b91613a81575b5094938401169290811c647fffffffff1690613933565b955050506020843d602011613ab8575b81613a9e60209383614325565b810103126108d0578488647fffffffff8196519150613a6a565b3d9150613a91565b6040513d8b823e3d90fd5b50613938565b634e487b7160e01b600052601160045260246000fd5b90506020813d602011613b11575b81613b0260209383614325565b810103126108d05751386138b0565b3d9150613af5565b8196929611613b2e5760405293816020613857565b634e487b7160e01b82526041600452602482fd5b6040516379fae7af60e01b8152600490fd5b60405163b984588b60e01b8152600490fd5b604051632e13e04560e01b8152600490fd5b5034610409578060031936011261040957604060115460125482519182526020820152f35b5034610409576040366003190112610409576020612148613bbc6143c2565b600435614e94565b50346104095780600319360112610409576013546040516001600160a01b039091168152602090f35b50346104095780600319360112610409576020600554604051908152f35b503461040957606036600319011261040957604435801515810361040557613c3890602435600435614bdc565b60405190602092838301848452825180915260408401948060408360051b870101940192955b828710613c6b5785850386f35b909192938280613c87600193603f198a8203018652885161449f565b9601920196019592919092613c5e565b503461040957602036600319011261040957600435613cb4614a31565b50600554811015613ce457604082613cd59260609452600660205220614935565b613ce26040518092614478565bf35b6024906040519063a86ecdd560e01b82526004820152fd5b5034610409576020806003193601126104055760043582526023815260408220916040518092808554928381520194835280832092905b828210613d4a576103ea856103de81890382614325565b835486529485019460019384019390910190613d33565b50346104095780600319360112610409576014546040516001600160a01b039091168152602090f35b5034610409578060031936011261040957602064ffffffffff60075460281c16604051908152f35b503461040957602036600319011261040957600435613dcf614a50565b50600554811015613ce457604082613df1926103ea9452602460205220614ac7565b60405191829160208352602083019061449f565b503461040957610140366003190112610409576024356001600160401b03811161040557613e3790369060040161438e565b613e3f6143ac565b60a4356001600160a01b038116919082900361139a576101243590811515820361139657606435855260176020526024602060018060a01b03600660408920015416604051928380926370a0823160e01b82528860048301525afa90811561085d5786916141ad575b506064358652601760205260056040872001541161416857613ecb600c546147b7565b9283600c55855260166020526040852054604435670de0b6b3a764000091818381020483148215171561415457604051966001600160401b0361016089019081119089111761414057610160880160405286885260043560208901526040880152606087015202608085015260643560a085015260018060a01b031660c084015260c43560e084015260e43561010084015261010435610120840152151561014083015282526018602052604082208151815560208201516001820155604082015180519060018060401b03821161412c57613fb782613fae6002860154614628565b600286016147dd565b602090601f83116001146140b95791806101409492600a9488926140ae575b50508160011b916000199060031b1c19161760028201555b606084015160038201556080840151600482015560a084015160058201556006810160018060a01b0360c08601511660018060a01b031982541617905560e084015160078201556101008401516008820155610120840151600982015501910151151560ff801983541691161790556064358152601a60205261407760408220600c54906148a7565b600c547f2e8c120bfdd294891f6ac45b1d661997690ad24bb51f51e4d357365f25c190236040518061117c60a435606435836148dc565b015190503880613fd6565b906002840186526020862091865b601f19851681106141145750926101409492600192600a9583601f198116106140fb575b505050811b016002820155613fee565b015160001960f88460031b161c191690553880806140eb565b919260206001819286850151815501940192016140c7565b634e487b7160e01b85526041600452602485fd5b634e487b7160e01b89526041600452602489fd5b634e487b7160e01b88526011600452602488fd5b60405162461bcd60e51b815260206004820152601d60248201527f596f7520646f206e6f74206861766520656e6f75676820746f6b656e730000006044820152606490fd5b90506020813d6020116141d7575b816141c860209383614325565b81010312611a86575138613ea8565b3d91506141bb565b50346104095780600319360112610409576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346104055781600319360112610405577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b606081019081106001600160401b03821117611a4857604052565b604081019081106001600160401b03821117611a4857604052565b60c081019081106001600160401b03821117611a4857604052565b608081019081106001600160401b03821117611a4857604052565b61014081019081106001600160401b03821117611a4857604052565b602081019081106001600160401b03821117611a4857604052565b60a081019081106001600160401b03821117611a4857604052565b601f909101601f19168101906001600160401b03821190821017611a4857604052565b9192916001600160401b038211611a485760405191614371601f8201601f191660200184614325565b8294818452818301116108d0578281602093846000960137010152565b9080601f830112156108d0578160206143a993359101614348565b90565b608435906001600160a01b03821682036108d057565b602435906001600160a01b03821682036108d057565b604435906001600160a01b03821682036108d057565b600435906001600160a01b03821682036108d057565b60c435906001600160a01b03821682036108d057565b60e435906001600160a01b03821682036108d057565b60005b8381106144435750506000910152565b8181015183820152602001614433565b9060209161446c81518092818552858086019101614430565b601f01601f1916010190565b80516001600160a01b03908116835260208083015182169084015260409182015116910152565b9190825181526020906144e96144d76144c5848701516101808087870152850190614453565b60408701518482036040860152614453565b60608601518382036060850152614453565b936144fc60808201516080840190614478565b60a081015160e083015260c081015190610100918284015260e08101519161012092838501528101519383870361014085015284518088528188019180808360051b8b01019701926000905b83821061456b5750505050506143a9949550015190610160818403910152614453565b909192939783806145896001938e601f199082030186528c51614453565b9a019201920190939291614548565b6020908160408183019282815285518094520193019160005b8281106145bf575050505090565b8351855293810193928101926001016145b1565b60409060031901126108d057604051906145ec82614282565b60043582526024356020830152565b9181601f840112156108d0578235916001600160401b0383116108d057602083818601950101116108d057565b90600182811c92168015614658575b602083101461464257565b634e487b7160e01b600052602260045260246000fd5b91607f1691614637565b906000929180549161467383614628565b9182825260019384811690816000146146d55750600114614695575b50505050565b90919394506000526020928360002092846000945b8386106146c157505050500101903880808061468f565b8054858701830152940193859082016146aa565b9294505050602093945060ff191683830152151560051b0101903880808061468f565b906040519161470683614282565b8260449182116108d0576004905b82821061472057505050565b8135815260209182019101614714565b60409060031901126108d0576004359060243590565b805482101561475e5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160401b038111611a485760051b60200190565b6009546001600160a01b0316330361479f57565b60405163118cdaa760e01b8152336004820152602490fd5b6000198114613ad15760010190565b8181106147d1575050565b600081556001016147c6565b9190601f81116147ec57505050565b614818926000526020600020906020601f840160051c8301931061481a575b601f0160051c01906147c6565b565b909150819061480b565b9061483c602091949394604084526040840190614453565b6001600160a01b03909416910152565b1561485357565b60405162461bcd60e51b815260206004820152602660248201527f55736572206973206e6f74207265676973746572656420696e746f207468652060448201526573797374656d60d01b6064820152608490fd5b8054600160401b811015611a48576148c491600182018155614746565b819291549060031b91821b91600019901b1916179055565b9081526001600160a01b03909116602082015260400190565b156148fc57565b60405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820546f6b656e7360781b6044820152606490fd5b9060405161494281614267565b82546001600160a01b0390811682526001840154811660208301526002909301549092166040830152565b908060209392818452848401376000828201840152601f01601f1916010190565b9082818152602080910193818360051b82010194846000925b8584106149b8575050505050505090565b90919293949596601f198282030184528735601e19843603018112156108d05783018681019190356001600160401b0381116108d05780360383136108d057614a068892839260019561496d565b9901940194019295949391906149a7565b91908201809211613ad157565b91908203918211613ad157565b60405190614a3e82614267565b60006040838281528260208201520152565b60405190614a5d826142d3565b81600081526101206060918260208201528260408201528280820152614a81614a31565b6080820152600060a0820152600060c0820152600060e0820152826101008201520152565b80511561475e5760200190565b805182101561475e5760209160051b010190565b90604091825190614ad7826142d3565b81938154835280516001614af882614af181848801614662565b0383614325565b602091828601528251614b1281610a208160028901614662565b838601528251614b2981610a208160038901614662565b6060860152614b3a60048501614935565b6080860152600784015460a0860152600884015460c0860152600984015460e0860152600a8401805490614b6d82614774565b93614b7a86519586614325565b82855260009182528082208186015b848410614bba57505050505050610120926109ea8593614bb693610100600b980152518096819301614662565b0152565b858381928a51614bce81610a208189614662565b815201920193019290614b89565b60001993928482019290918311613ad15780830292808404821490151715613ad157614c089083614a17565b93808501948511613ad15784916005549586851015614d1c57861115614d0a575b614c338484614a24565b9060018201809211613ad157614c4882614774565b92604092614c5884519586614325565b808552614c67601f1991614774565b0160005b818110614cf357505083976000965b86811115614c8c575050505050505050565b808415614cd7575b90614cd2916000526024602052614ccc8660002099614cbb614cb5826147b7565b9b614ac7565b614cc5828b614ab3565b5288614ab3565b506147b7565b614c7a565b50614ce28183614a24565b90838201918211613ad15790614c94565b602090614cfe614a50565b82828901015201614c6b565b9150808501858111613ad15791614c29565b50505050509050604051614d2f816142ef565b6000815290565b15614d3d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f6e6c79206d656d62657273206f66207468652064616f2063616e20766f74656044820152fd5b15614d8857565b60405162461bcd60e51b8152602060048201526016602482015275159bdd1a5b99c81a185cc81b9bdd081cdd185c9d195960521b6044820152606490fd5b15614dcd57565b60405162461bcd60e51b8152602060048201526015602482015274159bdd1a5b99c8151a5b59481a185cc8195b991959605a1b6044820152606490fd5b908160209103126108d0575180151581036108d05790565b6001600160a01b03918216815291166020820152604081019190915260600190565b60005b82600052601b60205260406000208054821015614e8b5781614e6891614746565b90549060031b1c8214614e8357614e7e906147b7565b614e47565b505050600190565b50505050600090565b60009160018060a01b03168252602060168152604080842054918385526019908181528286205494865b868110614ecf575050505050505090565b818852838352614ee181868a20614746565b90549060031b1c8614614efc57614ef7906147b7565b614ebe565b5050505050505050600190565b6001600160a01b0390911681526040602082018190526143a992910190614453565b64ffffffffff9081166000190191908211613ad157565b64ffffffffff9182169082160391908211613ad157565b908160209103126108d057516001600160a01b03811681036108d05790565b906002821015614f855752565b634e487b7160e01b600052602160045260246000fd5b9391949092946005549260018401600555815195602097614fc1898501988951906152ab565b15613b4257606087019660ff8851166000198101908111613ad157600581101561475e5754604080516370f7b36160e01b81526004810195909552825160ff9081166024870152838d015181166044870152928101518316606486015298519091166084840152845160a4840152885160c48401523060e48401526101048301526000916001600160a01b03918a8261012481877f000000000000000000000000000000000000000000000000000000000000000088165af19182156152a1578492615282575b508280808b5193633634487360e01b85521696876004850152169283602484015216918260448301523360648301526150c46084830189614f78565b8b8260a48188887f0000000000000000000000000000000000000000000000000000000000000000165af191821561527857908492918692615259575b508a519663431a717560e01b885260048801526024870152826044870152169283606486015233608486015261513a60a4860188614f78565b8a8560c48184877f0000000000000000000000000000000000000000000000000000000000000000165af194851561524d579189828d61520d9997957f38b2d18bb65cc91d7b436014cf44c8298b13bee60cc18d9e8efec26d1df318909d9c9b99979597615210575b509184916006600295948351956151b987614267565b8652808601988952848487019a168a528d835252209151169360018060a01b031994858354161782558360018301915116858254161790550192511690825416179055519551968451938452830190614f78565ba3565b81975091600661523a879460029796943d8c11615246575b6152328183614325565b810190614f59565b989294955050916151a3565b503d615228565b508851903d90823e3d90fd5b6152719192508d803d10615246576152328183614325565b9038615101565b8a513d87823e3d90fd5b61529a9192508b3d8d11615246576152328183614325565b9038615088565b89513d86823e3d90fd5b90600080516020615f30833981519152808080858196099380098180828187620292fc090894620292f809096001089080828111156152f7575b506000916152f291614a24565b081590565b9050828101809111613ad15760006152e5565b6040810192916000915b6002831061532157505050565b600190825181526020809101920192019190615314565b602061535891604051809381926314d2f97b60e11b83526004830161530a565b038173__$1540826e134b1b69b7091c82576ee3aadd$__5af49081156153b157600091615383575090565b906020823d82116153a9575b8161539c60209383614325565b8101031261040957505190565b3d915061538f565b6040513d6000823e3d90fd5b60405163248f667760e01b81529060049060008284015b83821061540e575050505060208160848173__$e61c65d9562aef5fa6ab22c0f787cf1e30$__5af49081156153b157600091615383575090565b6001908351815260208091019301910190916153d4565b604051630926f44b60e31b815290600090600483015b600583106154755750505060208160a48173__$46fbdf6658faf65265971bdad66851b86c$__5af49081156153b157600091615383575090565b60019082518152602080910192019201919061543b565b91909164ffffffffff80809416911601918211613ad157565b6143a991906139df9060ff81169060201b60ff60201b16614f42565b60ff60019116019060ff8211613ad157565b919060ff92838216916020908184116157f75764ffffffffff918284169182156157e65761550188916154c1565b1661553861550e82614774565b9560409261551e84519889614325565b80885261552d601f1991614774565b013685890137614f2b565b9060019485808416156000146157c3575080831694818611613ad157869560005260088552826000205461556b89614aa6565b52999592995b6000935b615590575b5050505050505061558c929350614ab3565b5190565b86849a9998979a16888110156157b857858c881661567f576155ea916155c18651916155bb83614282565b8b614ab3565b5181526155cd87615809565b828201528551809381926314d2f97b60e11b83526004830161530a565b038173__$1540826e134b1b69b7091c82576ee3aadd$__5af490811561567457600091615647575b509986647fffffffff829d8a9b9c9d615637849c866156308c6154c1565b1690614ab3565b525b821c16950116939a96615575565b908682813d831161566d575b61565d8183614325565b8101031261040957505186615612565b503d615653565b84513d6000823e3d90fd5b5082828c61568c886154c1565b161c1690647fffffffff8d891c168092116000146156e757509986647fffffffff829d856156c6849c9d9e9f6156c18b6154c1565b6154a5565b166000526008895286600020546156e18d866156308c6154c1565b52615639565b61574591508690846157028f6156fc90614f2b565b896154a5565b166000526008825261572786600020549187519261571f84614282565b83528b614ab3565b51828201528551809381926314d2f97b60e11b83526004830161530a565b038173__$1540826e134b1b69b7091c82576ee3aadd$__5af49081156156745760009161578b575b509986647fffffffff829d8a9b9c9d6156e1849c866156308c6154c1565b908682813d83116157b1575b6157a18183614325565b810103126104095750518661576d565b503d615797565b50869798995061557a565b94600080516020615f508339815191526157dc89614aa6565b5299959299615571565b9450505050506143a9919250615809565b604051633e104c7760e01b8152600490fd5b60ff168015615dc25760018114615d9d5760028114615d785760038114615d535760048114615d2e5760058114615d095760068114615ce45760078114615cbf5760088114615c9a5760098114615c7557600a8114615c5057600b8114615c2b57600c8114615c0657600d8114615be157600e8114615bbc57600f8114615b975760108114615b725760118114615b4d5760128114615b285760138114615b035760148114615ade5760158114615ab95760168114615a945760178114615a6f5760188114615a4a5760198114615a2557601a8114615a0057601b81146159db57601c81146159b657601d811461599157601e811461596c57601f811461594757602014615923576040516310a2ea0560e21b8152600490fd5b7f1d90601a0c76d2f39824f6dc198fb3b48cbd0231516c8f6208e56ea741c341f990565b507f216b9fa3ac3724cf1ec6caf5a66dd85cae3aee727e00d2a0a59f273df3401f1090565b507f2b59c2651b412c029efa38f835ac1b1b5bdaf89dcb2e4bc9219e7d77c65e776a90565b507f14b46e659dc4072fc64a18d44911c4a303b45f1296c3cb7dec77f269bee9b5df90565b507f0845dd838ca63b2f68775aac8513bd692d26f511698206f3c6ce2b4100dd8d8f90565b507f132e4ff3e4ba890f1610efd4d2f69700b825514d557b82663878a56e2acef41c90565b507f24cb019b59431c232413f66b041923214f7a8a7489caa05b66860f1c3c76d3b190565b507f1b6367322bac9f24889900d310e2feaa0021516fac77470aea078e89335d3fcf90565b507f19b336a1e0a933e2a8f97d97322dcee843a2d9a2401bece52a3a25ddd5bb6bc990565b507f1d71ada9e49baeb4a2cf26be37d3bc680554995ef6706105e93978ba71cacf9490565b507f2560496c1138c827f1efb407d0cdb9d6ec9539b0957dfb67de2776e6026d630f90565b507f2ce2c1fb109ad6574570826774ecfca3e04866bb5a3963962b873646db6641f390565b507f1713f3e3dc5e2393bd31ccc0cdd8601bdee3198cf34d566bb60cfab13e5a087390565b507f2c849a73ab21c9e88e1d711f221863e2a94eb58f3eb42dde575301451f3ec5c890565b507f1874217e8e1dbc51c571a2db1103bf47c3e66a59305ca48bbcee6ad1c8cc575190565b507f2b8342160822355808db759147a7d6f61de451bd5bb88f9db2eb406ea68b813890565b507f199cd1f5b757c285023767abbe9bbb318da4e1fd375b5a001b54a0f3901ea7d390565b507f128fb9ad5b2d8e694bec0888ff95609c15b2a96ae80a34946c953dc503e46fb690565b507f2ec047dd616221873c234f36461080c3e760644bb519ebdb49eb9645215e0edc90565b507f2582b5cdefe032d75373f0ede9171406137e93e7d44405a0b0a409c1c739138090565b507f1f336d6d45d293180c75964e99a7599d44cac2ad447c202c3e1973b0322cf99090565b507f05e0136534f74776d69646bd0bd94519e63af45734405f479382d8400514c1a690565b507f10f7b76489e9c36644736c33c600d1bcedd465fd0aff3027e67b02e13875272d90565b507f1e73f08f6e5e4bb9c2096cc4587526ebfd033c222f4a27e97119c867c36a0d3a90565b507f1ea63a974336db6c0423e719d3f0e11494266237dda3a40de3cb76104436635990565b507f0690bfb582c7502ff6d15d519740ecd73d652b7a14dc82bfd250613ee8e0407690565b507f30553f8216db90854953edd47602897f897104d5b0d65a5ce000981c51da32e090565b507f11dc55d21b17daf8e60253c2a43d519039ba968733cf7c9d5df6155939e1a6d890565b507f08e4b5d410c8de929132c214ea600b5f252fa14aabb97ea67cda5bb4e0ebeec890565b507f04265868d2e705f48d3ae49f7749e67a587dafdb569c1d7334675496046eaad690565b507f2a06fb0b739b402c34dc752d8417b9cd67b7f7cabe4b06b5d995053791fcede490565b507f06928e817d2804a3713efd102bae900c9ab3e8e0b0c6c20f8613bd3b0423a89190565b50600080516020615f5083398151915290565b6143a9906040805191615de7836142b8565b608036843780515183526020815101516020840152602081015182840152015160608201526153bd565b60206143a9926040615eb9815194615e288661430a565b60a0368737805151865284815101518587015282815101518387015260608151015160608701526080815101516080870152610120835191615e698361430a565b60a036843760a081510151835260c0815101518784015260e081510151858401526101008151015160608401525101516080820152615eb2835196615ead886142b8565b615425565b8652615425565b83850152815190840152015160608201526153bd56fe7532e9985b123ef8bda3bc40b1a4296f34238889a58a41de23df560b8bfb9bc6526a4ede5e3a32e00a9764bde0eecbb0544853b17bebb12f4a8500ccd51372152cd30b9efd64638f847bef681e87dfbb567e261d02660c8166a92f33729ab33e30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba1c81d7053f5e6f875e0d7b584d3354071899b7dc927e6d7b48b58caa90cf3de88be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220ea5b01e6cc4cd1d71d4c324a3d9dd82963e8e8c5682da3d6e01582428c01413464736f6c63430008140033",
  "libraries": {
    "PoseidonT3": "0xDb6F8a73C48a17D8462762296ef353B5D0c113ea",
    "PoseidonT4": "0x644929660057bc5680453C80BBea3ea08b3F34d8",
    "PoseidonT5": "0x8255C396fED4f733102A32d759A2Fc245890BE98",
    "PoseidonT6": "0xdAfb17eCdc446C97a6878D1a54D0bA73098b48BB"
  },
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)": {
        "params": {
          "_coordinatorPubKey": "The coordinator's public key",
          "_duration": "How long should the Poll last for",
          "_mode": "Voting mode",
          "_treeDepths": "The depth of the Merkle trees",
          "_verifier": "The Verifier Contract",
          "_vkRegistry": "The VkRegistry Contract"
        }
      },
      "getPoll(uint256)": {
        "params": {
          "_pollId": "The identifier of the Poll to retrieve"
        },
        "returns": {
          "pollContracts": "The Poll contract object"
        }
      },
      "getStateTreeRoot()": {
        "returns": {
          "root": "The Merkle root"
        }
      },
      "hash2(uint256[2])": {
        "params": {
          "array": "An array of two uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hash3(uint256[3])": {
        "params": {
          "array": "An array of three uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the three elements."
        }
      },
      "hash4(uint256[4])": {
        "params": {
          "array": "An array of four uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the four elements."
        }
      },
      "hash5(uint256[5])": {
        "params": {
          "array": "An array of five uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the five elements."
        }
      },
      "hashLeftRight(uint256,uint256)": {
        "params": {
          "left": "the first element to hash.",
          "right": "the second element to hash."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))": {
        "params": {
          "_encPubKey": "the encryption public key to be hashed",
          "_message": "the message to be hashed"
        },
        "returns": {
          "msgHash": "The hash of the message and the encryption public key"
        }
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "params": {
          "_stateLeaf": "the state leaf to be hashed"
        },
        "returns": {
          "ciphertext": "The hash of the state leaf"
        }
      },
      "numSignUps()": {
        "returns": {
          "signUps": "numsignUps The number of signups"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "padAndHashMessage(uint256[2])": {
        "params": {
          "dataToPad": "the data to be padded"
        },
        "returns": {
          "message": "The padded message",
          "msgHash": "The hash of the padded message and encryption key",
          "padKey": "The padding public key"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sha256Hash(uint256[])": {
        "params": {
          "array": "The array of uint256 elements."
        },
        "returns": {
          "result": "The SHA256 hash of the array."
        }
      },
      "signUp((uint256,uint256),bytes,bytes)": {
        "params": {
          "_initialVoiceCreditProxyData": "Data to pass to the     InitialVoiceCreditProxy, which allows it to determine how many voice     credits this user should have.",
          "_pubKey": "The user's desired public key.",
          "_signUpGatekeeperData": "Data to pass to the sign-up gatekeeper's     register() function. For instance, the POAPGatekeeper or     SignUpTokenGatekeeper requires this value to be the ABI-encoded     token ID."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DefaultZeroBadIndex()": [
        {
          "notice": "Custom errors"
        }
      ],
      "InvalidMessage()": [
        {
          "notice": "custom errors"
        }
      ],
      "PoseidonHashLibrariesNotLinked()": [
        {
          "notice": "custom errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)": {
        "notice": "Deploy a new Poll contract."
      },
      "emptyBallotRoots(uint256)": {
        "notice": "The roots of the empty ballot trees"
      },
      "getPoll(uint256)": {
        "notice": "Get the Poll details"
      },
      "getStateTreeRoot()": {
        "notice": "Return the main root of the StateAq contract"
      },
      "hash2(uint256[2])": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hash3(uint256[3])": {
        "notice": "Computes the Poseidon hash of three uint256 elements."
      },
      "hash4(uint256[4])": {
        "notice": "Computes the Poseidon hash of four uint256 elements."
      },
      "hash5(uint256[5])": {
        "notice": "Computes the Poseidon hash of five uint256 elements."
      },
      "hashLeftRight(uint256,uint256)": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))": {
        "notice": "An utility function used to hash a MACI message and an encryption public key"
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "notice": "An utility function used to hash a state leaf"
      },
      "initialVoiceCreditProxy()": {
        "notice": "The contract which provides the values of the initial voice credit balance per user"
      },
      "lazyIMTData()": {
        "notice": "The state tree. Represents a mapping between each user's public key and their voice credit balance."
      },
      "messageProcessorFactory()": {
        "notice": "Factory contract that deploy a MessageProcessor contract"
      },
      "nextPollId()": {
        "notice": "Each poll has an incrementing ID"
      },
      "numSignUps()": {
        "notice": "Get the number of signups"
      },
      "padAndHashMessage(uint256[2])": {
        "notice": "An utility function used to pad and hash a MACI message"
      },
      "pollFactory()": {
        "notice": "Factory contract that deploy a Poll contract"
      },
      "polls(uint256)": {
        "notice": "A mapping of poll IDs to Poll contracts."
      },
      "sha256Hash(uint256[])": {
        "notice": "Computes the SHA256 hash of an array of uint256 elements."
      },
      "signUp((uint256,uint256),bytes,bytes)": {
        "notice": "Allows any eligible user sign up. The sign-up gatekeeper should prevent double sign-ups or ineligible users from doing so.  This function will only succeed if the sign-up deadline has not passed. It also enqueues a fresh state leaf into the state AccQueue."
      },
      "signUpGatekeeper()": {
        "notice": "Address of the SignUpGatekeeper, a contract which determines whether a user may sign up to vote"
      },
      "stateTreeDepth()": {
        "notice": "The state tree depth is fixed. As such it should be as large as feasible so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608 this should also match the parameter of the circom circuits.IMPORTANT: remember to change the ballot tree depth in contracts/ts/genEmptyBallotRootsContract.ts file if we change the state tree depth!"
      },
      "tallyFactory()": {
        "notice": "Factory contract that deploy a Tally contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5453,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "emptyBallotRoots",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 5456,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "nextPollId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5462,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "polls",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(PollContracts)5494_storage)"
      },
      {
        "astId": 5478,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "lazyIMTData",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(LazyIMTData)7629_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3677,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "userSideAdmin",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3680,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "totalUsers",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3683,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "totalProposals",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3686,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "totalDaos",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3689,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "contractCreationTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3692,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "totalDocuments",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3695,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "treeDepths",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(TreeDepths)8419_storage"
      },
      {
        "astId": 3698,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "coordinatorPubKey",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(PubKey)8392_storage"
      },
      {
        "astId": 3700,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "verifier",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 3702,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "vkRegistry",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 3707,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "userIdtoUser",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_struct(user)3898_storage)"
      },
      {
        "astId": 3711,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "userWallettoUserId",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3716,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "daoIdtoDao",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_struct(dao)3917_storage)"
      },
      {
        "astId": 3721,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "proposalIdtoProposal",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(proposal)3940_storage)"
      },
      {
        "astId": 3726,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "daoIdtoMembers",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3731,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "daoIdtoProposals",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3736,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "proposalIdtoVoters",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3741,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "proposalIdtoYesVoters",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3746,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "proposalIdtoNoVoters",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3751,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "proposalIdtoAbstainVoters",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3756,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "userIdtoDaos",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3762,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "quadraticYesMappings",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3768,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "quadraticNoMappings",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3773,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "documentIdtoDocument",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_uint256,t_struct(Document)3953_storage)"
      },
      {
        "astId": 3778,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "daoIdtoDocuments",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3783,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "_polls",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_uint256,t_struct(PollData)3976_storage)"
      },
      {
        "astId": 3787,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "pollIds",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3793,
        "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
        "label": "isPublicKeyRegistered",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Document)3953_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOManager.Document)",
        "numberOfBytes": "32",
        "value": "t_struct(Document)3953_storage"
      },
      "t_mapping(t_uint256,t_struct(PollContracts)5494_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MACI.PollContracts)",
        "numberOfBytes": "32",
        "value": "t_struct(PollContracts)5494_storage"
      },
      "t_mapping(t_uint256,t_struct(PollData)3976_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOManager.PollData)",
        "numberOfBytes": "32",
        "value": "t_struct(PollData)3976_storage"
      },
      "t_mapping(t_uint256,t_struct(dao)3917_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOManager.dao)",
        "numberOfBytes": "32",
        "value": "t_struct(dao)3917_storage"
      },
      "t_mapping(t_uint256,t_struct(proposal)3940_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOManager.proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(proposal)3940_storage"
      },
      "t_mapping(t_uint256,t_struct(user)3898_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOManager.user)",
        "numberOfBytes": "32",
        "value": "t_struct(user)3898_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Document)3953_storage": {
        "encoding": "inplace",
        "label": "struct DAOManager.Document",
        "members": [
          {
            "astId": 3942,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "documentId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3944,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "documentTitle",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3946,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "documentDescription",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3948,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3950,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "upoladerId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3952,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "daoId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(LazyIMTData)7629_storage": {
        "encoding": "inplace",
        "label": "struct LazyIMTData",
        "members": [
          {
            "astId": 7622,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "maxIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 7624,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "numberOfLeaves",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 7628,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "elements",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PollContracts)5494_storage": {
        "encoding": "inplace",
        "label": "struct MACI.PollContracts",
        "members": [
          {
            "astId": 5489,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "poll",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5491,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "messageProcessor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5493,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "tally",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PollData)3976_storage": {
        "encoding": "inplace",
        "label": "struct DAOManager.PollData",
        "members": [
          {
            "astId": 3955,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3957,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3959,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "encodedOptions",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3961,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "metadata",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3964,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "pollContracts",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(PollContracts)5494_storage"
          },
          {
            "astId": 3966,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "startTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3968,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "endTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3970,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "numOfOptions",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 3973,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "options",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3975,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "tallyJsonCID",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PubKey)8392_storage": {
        "encoding": "inplace",
        "label": "struct DomainObjs.PubKey",
        "members": [
          {
            "astId": 8389,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8391,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TreeDepths)8419_storage": {
        "encoding": "inplace",
        "label": "struct Params.TreeDepths",
        "members": [
          {
            "astId": 8412,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "intStateTreeDepth",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8414,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "messageTreeSubDepth",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8416,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "messageTreeDepth",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8418,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "voteOptionTreeDepth",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(dao)3917_storage": {
        "encoding": "inplace",
        "label": "struct DAOManager.dao",
        "members": [
          {
            "astId": 3900,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "daoId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3902,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3904,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "daoName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3906,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "daoDescription",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3908,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "joiningThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3910,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "proposingThreshold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3912,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "governanceTokenAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3914,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "isPrivate",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 3916,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "discordID",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(proposal)3940_storage": {
        "encoding": "inplace",
        "label": "struct DAOManager.proposal",
        "members": [
          {
            "astId": 3919,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3921,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "proposalType",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3923,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "proposalTitleAndDesc",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3925,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "proposerId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3927,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "votingThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3929,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "daoId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3931,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "votingTokenAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3933,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "beginningTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3935,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "endingTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3937,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "passingThreshold",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 3939,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "voteOnce",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(user)3898_storage": {
        "encoding": "inplace",
        "label": "struct DAOManager.user",
        "members": [
          {
            "astId": 3887,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "userId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3889,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "userName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3891,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "userEmail",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3893,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3895,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "profileImage",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3897,
            "contract": "contracts/maci-contracts/DAOManager.sol:DAOManager",
            "label": "userWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}