{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Nonces.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/maci-contracts/DAOManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n// Imports\nimport \"./GovernanceToken.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { MACI } from \"maci-contracts/contracts/MACI.sol\";\nimport { IPollFactory } from \"maci-contracts/contracts/interfaces/IPollFactory.sol\";\nimport { IMessageProcessorFactory } from \"maci-contracts/contracts/interfaces/IMPFactory.sol\";\nimport { ITallyFactory } from \"maci-contracts/contracts/interfaces/ITallyFactory.sol\";\nimport { SignUpGatekeeper } from \"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\";\nimport { InitialVoiceCreditProxy } from \"maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\";\n\n// Contract Declaration\ncontract DAOManager is MACI, Ownable(msg.sender) {\n    // State Variables\n    address public userSideAdmin;\n    uint256 public totalUsers = 0;\n    uint256 public totalProposals = 0;\n    uint256 public totalDaos = 0;\n    uint256 public contractCreationTime = 0;\n    uint256 public totalDocuments = 0;\n  \tTreeDepths public treeDepths;\n\tPubKey public coordinatorPubKey;\n\taddress public verifier;\n\taddress public vkRegistry;\n\n\t\n\n    mapping(uint256 => user) public userIdtoUser;\n    mapping(address => uint256) public userWallettoUserId;\n    mapping(uint256 => dao) public daoIdtoDao;\n    mapping(uint256 => proposal) public proposalIdtoProposal;\n    mapping(uint256 => uint256[]) public daoIdtoMembers;\n    mapping(uint256 => uint256[]) public daoIdtoProposals;\n    mapping(uint256 => uint256[]) public proposalIdtoVoters;\n    mapping(uint256 => uint256[]) public proposalIdtoYesVoters;\n    mapping(uint256 => uint256[]) public proposalIdtoNoVoters;\n    mapping(uint256 => uint256[]) public proposalIdtoAbstainVoters;\n    mapping(uint256 => uint256[]) public userIdtoDaos;\n    mapping(uint256 => mapping(uint256 => uint256)) public quadraticYesMappings;\n    mapping(uint256 => mapping(uint256 => uint256)) public quadraticNoMappings;\n    mapping(uint256 => Document) public documentIdtoDocument;\n    mapping(uint256 => uint256[]) public daoIdtoDocuments;\n    mapping(uint256 => PollData) internal _polls;\n    mapping(address => uint256) public pollIds;\n    // pubkey.x => pubkey.y => bool\n\tmapping(uint256 => mapping(uint256 => bool)) public isPublicKeyRegistered;\n\n\n    // Events\n    event UserCreated(uint256 indexed userId, string userName, address userWallet);\n    event DAOCreated(uint256 indexed daoId, string daoName, address creatorWallet);\n    event ProposalCreated(uint256 indexed proposalId, uint256 daoId, address proposerWallet);\n    event MemberAddedToDAO(uint256 indexed daoId, uint256 userId, address userWallet);\n    event UserJoinedDAO(uint256 indexed daoId, uint256 userId, address userWallet);\n    event DocumentUploaded(uint256 indexed documentId, uint256 daoId, address uploaderWallet);\n    event VoteCast(uint256 indexed proposalId, uint256 userId, uint256 voteChoice);\n    event QVVoteCast(uint256 indexed proposalId, uint256 userId, uint256 numTokens, uint256 voteChoice);\n    event PollCreated(\n\t\tuint256 indexed pollId,\n\t\taddress indexed creator,\n\t\tDAOManager.PollContracts pollContracts,\n\t\tstring name,\n\t\tstring[] options,\n\t\tstring metadata,\n\t\tuint256 startTime,\n\t\tuint256 endTime\n\t);\n\n\tevent PollTallyCIDUpdated(uint256 indexed pollId, string tallyJsonCID);\n\n    // Structs\n    struct user {\n        uint256 userId;\n        string userName;\n        string userEmail;\n        string description;\n        string profileImage;\n        address userWallet;\n    }\n\n    struct dao {\n        uint256 daoId;\n        uint256 creator;\n        string daoName;\n        string daoDescription;\n        uint256 joiningThreshold;\n        uint256 proposingThreshold;\n        address governanceTokenAddress;\n        bool isPrivate;\n        string discordID;\n    }\n\n    struct proposal {\n        uint256 proposalId;\n        uint256 proposalType;\n        string proposalTitleAndDesc;\n        uint256 proposerId;\n        uint256 votingThreshold;\n        uint256 daoId;\n        address votingTokenAddress;\n        uint256 beginningTime;\n        uint256 endingTime;\n        uint256 passingThreshold;\n        bool voteOnce;\n    }\n\n    struct Document {\n        uint256 documentId;\n        string documentTitle;\n        string documentDescription;\n        string ipfsHash;\n        uint256 upoladerId;\n        uint256 daoId;\n    }\n\n    struct PollData {\n\t\tuint256 id;\n\t\tstring name;\n\t\tbytes encodedOptions;\n\t\tstring metadata;\n\t\tDAOManager.PollContracts pollContracts;\n\t\tuint256 startTime;\n\t\tuint256 endTime;\n\t\tuint256 numOfOptions;\n\t\tstring[] options;\n\t\tstring tallyJsonCID;\n\t}\n\n    //Errors \n    error PubKeyAlreadyRegistered();\n\terror PollAddressDoesNotExist(address _poll);\n\n    // Constructor\n    constructor(IPollFactory _pollFactory,\n\t\tIMessageProcessorFactory _messageProcessorFactory,\n\t\tITallyFactory _tallyFactory,\n\t\tSignUpGatekeeper _signUpGatekeeper,\n\t\tInitialVoiceCreditProxy _initialVoiceCreditProxy,\n\t\tuint8 _stateTreeDepth,\n\t\tuint256[5] memory _emptyBallotRoots)  MACI(\n\t\t\t_pollFactory,\n\t\t\t_messageProcessorFactory,\n\t\t\t_tallyFactory,\n\t\t\t_signUpGatekeeper,\n\t\t\t_initialVoiceCreditProxy,\n\t\t\t_stateTreeDepth,\n\t\t\t_emptyBallotRoots\n\t\t) {\n        userSideAdmin = msg.sender;\n        contractCreationTime = block.timestamp;\n       \n\n    }\n\n    // External Functions\n    function createUser(\n        string memory _userName,\n        string memory _userEmail,\n        string memory _description,\n        string memory _profileImage,\n        address _userWalletAddress\n    ) public {\n        totalUsers++;\n        user memory u1 = user(totalUsers, _userName, _userEmail, _description, _profileImage, _userWalletAddress);\n        userIdtoUser[totalUsers] = u1;\n        userWallettoUserId[_userWalletAddress] = totalUsers;\n        \n        emit UserCreated(totalUsers, _userName, _userWalletAddress);\n    }\n\n    function createDao(\n        string memory _daoName,\n        string memory _daoDescription,\n        uint256 _joiningThreshold,\n        uint256 _proposingThreshold,\n        address _joiningTokenAddress,\n        bool _isPrivate,\n        address _userWalletAddress,\n        string memory _discordID\n    ) public {\n        totalDaos++;\n        uint256 creatorId = userWallettoUserId[_userWalletAddress];\n        require(creatorId != 0, \"User is not registered into the system\");\n        dao memory d1 = dao(\n            totalDaos,\n            creatorId,\n            _daoName,\n            _daoDescription,\n            _joiningThreshold * 1000000000000000000,\n            _proposingThreshold * 1000000000000000000,\n            _joiningTokenAddress,\n            _isPrivate,\n            _discordID\n        );\n        daoIdtoDao[totalDaos] = d1;\n        daoIdtoMembers[totalDaos].push(creatorId);\n        userIdtoDaos[creatorId].push(totalDaos);\n        \n        emit DAOCreated(totalDaos, _daoName, _userWalletAddress);\n    }\n\n    function createProposal(\n        uint256 _proposalType,\n        string memory _proposalTitleAndDesc,\n        uint256 _votingThreshold,\n        uint256 _daoId,\n        address _governanceTokenAddress,\n        address _userWalletAddress,\n        uint256 _beginningTime,\n        uint256 _endingTime,\n        uint256 _passingThreshold,\n        bool _voteOnce\n    ) public {\n        address daoGovernanceToken = daoIdtoDao[_daoId].governanceTokenAddress;\n        GovernanceToken govtToken = GovernanceToken(daoGovernanceToken);\n        require(\n            govtToken.balanceOf(_userWalletAddress) >= daoIdtoDao[_daoId].proposingThreshold,\n            \"You do not have enough tokens\"\n        );\n        totalProposals++;\n        uint256 tempProposerId = userWallettoUserId[_userWalletAddress];\n        proposal memory p1 = proposal(\n            totalProposals,\n            _proposalType,\n            _proposalTitleAndDesc,\n            tempProposerId,\n            _votingThreshold * 1000000000000000000,\n            _daoId,\n            _governanceTokenAddress,\n            _beginningTime,\n            _endingTime,\n            _passingThreshold,\n            _voteOnce\n        );\n        proposalIdtoProposal[totalProposals] = p1;\n        daoIdtoProposals[_daoId].push(totalProposals);\n        \n        emit ProposalCreated(totalProposals, _daoId, _userWalletAddress);\n    }\n\n    function addMembertoDao(uint256 _daoId, address _userWalletAddress, address _adminWalletAddress) public {\n        uint256 tempUserId = userWallettoUserId[_adminWalletAddress];\n        require(tempUserId == daoIdtoDao[_daoId].creator, \"Only admin can add users to the dao\");\n        uint256 newUserId = userWallettoUserId[_userWalletAddress];\n        require(newUserId > 0, \"User is not registered into the system\");\n        daoIdtoMembers[_daoId].push(newUserId);\n        userIdtoDaos[newUserId].push(_daoId);\n        \n        emit MemberAddedToDAO(_daoId, newUserId, _userWalletAddress);\n    }\n\n    function joinDao(uint256 _daoId, address _callerWalletAddress) public {\n        require(daoIdtoDao[_daoId].isPrivate == false, \"Dao is Private\");\n        address tempTokenAddress = daoIdtoDao[_daoId].governanceTokenAddress;\n        GovernanceToken govtToken = GovernanceToken(tempTokenAddress);\n        uint256 userBalance = govtToken.balanceOf(_callerWalletAddress);\n        require(userBalance >= daoIdtoDao[_daoId].joiningThreshold, \"Not enough Tokens\");\n        uint256 newUserId = userWallettoUserId[_callerWalletAddress];\n        require(newUserId > 0, \"User is not registered into the system\");\n        daoIdtoMembers[_daoId].push(newUserId);\n        userIdtoDaos[newUserId].push(_daoId);\n        \n        emit UserJoinedDAO(_daoId, newUserId, _callerWalletAddress);\n    }\n\n    function uploadDocument(\n        string memory _documentTitle,\n        string memory _documentDesc,\n        uint256 _daoId,\n        string memory _ipfsHash\n    ) public {\n        checkMembership(_daoId, msg.sender);\n        totalDocuments++;\n        uint256 tempUserId = userWallettoUserId[msg.sender];\n        Document memory d1 = Document(totalDocuments, _documentTitle, _documentDesc, _ipfsHash, tempUserId, _daoId);\n        documentIdtoDocument[totalDocuments] = d1;\n        daoIdtoDocuments[_daoId].push(totalDocuments);\n        \n        emit DocumentUploaded(totalDocuments, _daoId, msg.sender);\n    }\n\n\n    function setConfig(\n\t\tTreeDepths memory _treeDepths,\n\t\tPubKey memory _coordinatorPubKey,\n\t\taddress _verifier,\n\t\taddress _vkRegistry\n\t) public onlyOwner {\n\t\ttreeDepths = _treeDepths;\n\t\tcoordinatorPubKey = _coordinatorPubKey;\n\t\tverifier = _verifier;\n\t\tvkRegistry = _vkRegistry;\n\t}\n\n\t/// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\n\t/// double sign-ups or ineligible users from doing so.  This function will\n\t/// only succeed if the sign-up deadline has not passed. It also enqueues a\n\t/// fresh state leaf into the state AccQueue.\n\t/// @param _pubKey The user's desired public key.\n\t/// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\n\t///     register() function. For instance, the POAPGatekeeper or\n\t///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\n\t///     token ID.\n\t/// @param _initialVoiceCreditProxyData Data to pass to the\n\t///     InitialVoiceCreditProxy, which allows it to determine how many voice\n\t///     credits this user should have.\n\tfunction signUp(\n\t\tPubKey memory _pubKey,\n\t\tbytes memory _signUpGatekeeperData,\n\t\tbytes memory _initialVoiceCreditProxyData\n\t) public override {\n\t\t// check if the pubkey is already registered\n\t\tif (isPublicKeyRegistered[_pubKey.x][_pubKey.y])\n\t\t\trevert PubKeyAlreadyRegistered();\n\n\t\tsuper.signUp(\n\t\t\t_pubKey,\n\t\t\t_signUpGatekeeperData,\n\t\t\t_initialVoiceCreditProxyData\n\t\t);\n\n\t\tisPublicKeyRegistered[_pubKey.x][_pubKey.y] = true;\n\t}\n\n\tfunction createPoll(\n\t\tstring calldata _name,\n\t\tstring[] calldata _options,\n\t\tstring calldata _metadata,\n\t\tuint256 _duration,\n\t\tMode isQv\n\t) public onlyOwner {\n\t\t// TODO: check if the number of options are more than limit\n\n\t\tuint256 pollId = nextPollId;\n\n\t\tdeployPoll(\n\t\t\t_duration,\n\t\t\ttreeDepths,\n\t\t\tcoordinatorPubKey,\n\t\t\tverifier,\n\t\t\tvkRegistry,\n\t\t\tisQv\n\t\t);\n\n\t\tPollContracts memory pollContracts = MACI.polls[pollId];\n\n\t\tpollIds[pollContracts.poll] = pollId;\n\n\t\t// encode options to bytes for retrieval\n\t\tbytes memory encodedOptions = abi.encode(_options);\n\n\t\tuint256 endTime = block.timestamp + _duration;\n\n\t\t// create poll\n\t\t_polls[pollId] = PollData({\n\t\t\tid: pollId,\n\t\t\tname: _name,\n\t\t\tencodedOptions: encodedOptions,\n\t\t\tnumOfOptions: _options.length,\n\t\t\tmetadata: _metadata,\n\t\t\tstartTime: block.timestamp,\n\t\t\tendTime: endTime,\n\t\t\tpollContracts: pollContracts,\n\t\t\toptions: _options,\n\t\t\ttallyJsonCID: \"\"\n\t\t});\n\n\t\temit PollCreated(\n\t\t\tpollId,\n\t\t\tmsg.sender,\n\t\t\tpollContracts,\n\t\t\t_name,\n\t\t\t_options,\n\t\t\t_metadata,\n\t\t\tblock.timestamp,\n\t\t\tendTime\n\t\t);\n\t}\n\n\tfunction getPollId(address _poll) public view returns (uint256 pollId) {\n\t\tif (pollIds[_poll] >= nextPollId) revert PollAddressDoesNotExist(_poll);\n\t\tpollId = pollIds[_poll];\n\t}\n\n\tfunction updatePollTallyCID(\n\t\tuint256 _pollId,\n\t\tstring calldata _tallyJsonCID\n\t) public onlyOwner {\n\t\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n\t\tPollData storage poll = _polls[_pollId];\n\t\tpoll.tallyJsonCID = _tallyJsonCID;\n\n\t\temit PollTallyCIDUpdated(_pollId, _tallyJsonCID);\n\t}\n\n\tfunction fetchPolls(\n\t\tuint256 _page,\n\t\tuint256 _perPage,\n\t\tbool _ascending\n\t) public view returns (PollData[] memory polls_) {\n\t\tuint256 start = (_page - 1) * _perPage;\n\t\tuint256 end = start + _perPage - 1;\n\n\t\tif (start >= nextPollId) {\n\t\t\treturn new PollData[](0);\n\t\t}\n\n\t\tif (end >= nextPollId) {\n\t\t\tend = nextPollId - 1;\n\t\t}\n\n\t\tpolls_ = new PollData[](end - start + 1);\n\n\t\tuint256 index = 0;\n\t\tfor (uint256 i = start; i <= end; i++) {\n\t\t\tuint256 pollIndex = i;\n\t\t\tif (!_ascending) {\n\t\t\t\tpollIndex = nextPollId - i - 1;\n\t\t\t}\n\t\t\tpolls_[index++] = _polls[pollIndex];\n\t\t}\n\t}\n\n\tfunction fetchPoll(\n\t\tuint256 _pollId\n\t) public view returns (PollData memory poll_) {\n\t\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n\t\treturn _polls[_pollId];\n\t}\n\n    function voteForProposal(uint256 _proposalId, uint256 _voteFor, address _callerWalletAddress) public {\n        address funcCaller = _callerWalletAddress;\n        uint256 tempDaoId = proposalIdtoProposal[_proposalId].daoId;\n        require(checkMembership(tempDaoId, _callerWalletAddress), \"Only members of the dao can vote\");\n        require(block.timestamp >= proposalIdtoProposal[_proposalId].beginningTime, \"Voting has not started\");\n        require(block.timestamp < proposalIdtoProposal[_proposalId].endingTime, \"Voting Time has ended\");\n        require(proposalIdtoProposal[_proposalId].proposalType == 1, \"Voting Type is not yes/no\");\n        address votingTokenAddress = proposalIdtoProposal[_proposalId].votingTokenAddress;\n        GovernanceToken govtToken = GovernanceToken(votingTokenAddress);\n        uint256 userBalance = govtToken.balanceOf(msg.sender);\n        uint256 tempUserId = userWallettoUserId[msg.sender];\n        require(userBalance >= proposalIdtoProposal[_proposalId].votingThreshold, \"Not enough Tokens\");\n        bool voteSignal = hasVoted(tempUserId, _proposalId);\n        if (proposalIdtoProposal[_proposalId].voteOnce) {\n            require(!voteSignal, \"User has Voted\");\n        }\n        govtToken.transferFrom(funcCaller, address(this), proposalIdtoProposal[_proposalId].votingThreshold);\n        if (_voteFor == 1) {\n            proposalIdtoYesVoters[_proposalId].push(tempUserId);\n        } else if (_voteFor == 2) {\n            proposalIdtoNoVoters[_proposalId].push(tempUserId);\n        } else {\n            proposalIdtoAbstainVoters[_proposalId].push(tempUserId);\n        }\n        \n        emit VoteCast(_proposalId, tempUserId, _voteFor);\n    }\n\n    function qvVoting(uint256 _proposalId, uint256 _numTokens, address _callerWalletAddress, uint256 _voteFor) public {\n        address funcCaller = _callerWalletAddress;\n        uint256 tempDaoId = proposalIdtoProposal[_proposalId].daoId;\n        require(checkMembership(tempDaoId, _callerWalletAddress), \"Only members of the dao can vote\");\n        require(block.timestamp >= proposalIdtoProposal[_proposalId].beginningTime, \"Voting has not started\");\n        require(block.timestamp < proposalIdtoProposal[_proposalId].endingTime, \"Voting Time has ended\");\n        address votingTokenAddress = proposalIdtoProposal[_proposalId].votingTokenAddress;\n        GovernanceToken govtToken = GovernanceToken(votingTokenAddress);\n        uint256 userBalance = govtToken.balanceOf(msg.sender);\n        uint256 tempUserId = userWallettoUserId[msg.sender];\n        require(userBalance >= proposalIdtoProposal[_proposalId].votingThreshold, \"Not enough Tokens\");\n        require(_numTokens >= proposalIdtoProposal[_proposalId].votingThreshold, \"Not enough Tokens\");\n        govtToken.transferFrom(funcCaller, address(this), _numTokens);\n        uint256 weight = sqrt(_numTokens);\n        if (_voteFor == 1) {\n            quadraticYesMappings[_proposalId][tempUserId] += weight;\n        } else {\n            quadraticNoMappings[_proposalId][tempUserId] += weight;\n        }\n        \n        emit QVVoteCast(_proposalId, tempUserId, _numTokens, _voteFor);\n    }\n\n    // Internal & Private View & Pure Functions\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n    function hasVoted(uint256 _userId, uint256 _proposalId) public view returns (bool) {\n        for (uint256 i = 0; i < proposalIdtoVoters[_proposalId].length; i++) {\n            if (_userId == proposalIdtoVoters[_proposalId][i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function checkMembership(uint256 _daoId, address _callerWalletAddress) public view returns (bool) {\n        uint256 tempUserId = userWallettoUserId[_callerWalletAddress];\n        uint256 totalMembers = daoIdtoMembers[_daoId].length;\n        for (uint256 i = 0; i < totalMembers; i++) {\n            if (tempUserId == daoIdtoMembers[_daoId][i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // External & Public View & Pure Functions\n    function getAllDaoMembers(uint256 _daoId) public view returns (uint256[] memory) {\n        return daoIdtoMembers[_daoId];\n    }\n\n    function getAllDaoProposals(uint256 _daoId) public view returns (uint256[] memory) {\n        return daoIdtoProposals[_daoId];\n    }\n\n    function getAllVoters(uint256 _proposalId) public view returns (uint256[] memory) {\n        return proposalIdtoVoters[_proposalId];\n    }\n\n    function getAllYesVotes(uint256 _proposalId) public view returns (uint256[] memory) {\n        return proposalIdtoYesVoters[_proposalId];\n    }\n\n    function getAllNoVotes(uint256 _proposalId) public view returns (uint256[] memory) {\n        return proposalIdtoNoVoters[_proposalId];\n    }\n\n    function getAllAbstainVotes(uint256 _proposalId) public view returns (uint256[] memory) {\n        return proposalIdtoAbstainVoters[_proposalId];\n    }\n\n    function getAllUserDaos(uint256 _userId) public view returns (uint256[] memory) {\n        return userIdtoDaos[_userId];\n    }\n\n    function getAllDaoDocuments(uint256 _daoId) public view returns (uint256[] memory) {\n        return daoIdtoDocuments[_daoId];\n    }\n}"
    },
    "contracts/maci-contracts/GovernanceToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n\ncontract GovernanceToken is ERC20, ERC20Burnable, ERC20Permit {\n    constructor(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        uint256 _totalSupply\n    ) ERC20(_tokenName, _tokenSymbol) ERC20Permit(\"MyToken\") {\n        _mint(msg.sender, _totalSupply * 10 ** decimals());\n    }\n}"
    },
    "maci-contracts/contracts/crypto/BabyJubJub.sol": {
      "content": "// @note This code was taken from\n// https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\n// Thanks to yondonfu for the code\n// Implementation cited on baby-jubjub's paper\n// https://eips.ethereum.org/EIPS/eip-2494#implementation\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nlibrary CurveBabyJubJub {\n  // Curve parameters\n  // E: 168700x^2 + y^2 = 1 + 168696x^2y^2\n  // A = 168700\n  uint256 public constant A = 0x292FC;\n  // D = 168696\n  uint256 public constant D = 0x292F8;\n  // Prime Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\n  uint256 public constant Q = 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001;\n\n  /**\n   * @dev Add 2 points on baby jubjub curve\n   * Formula for adding 2 points on a twisted Edwards curve:\n   * x3 = (x1y2 + y1x2) / (1 + dx1x2y1y2)\n   * y3 = (y1y2 - ax1x2) / (1 - dx1x2y1y2)\n   */\n  function pointAdd(uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) internal view returns (uint256 x3, uint256 y3) {\n    if (_x1 == 0 && _y1 == 0) {\n      return (_x2, _y2);\n    }\n\n    if (_x2 == 0 && _y1 == 0) {\n      return (_x1, _y1);\n    }\n\n    uint256 x1x2 = mulmod(_x1, _x2, Q);\n    uint256 y1y2 = mulmod(_y1, _y2, Q);\n    uint256 dx1x2y1y2 = mulmod(D, mulmod(x1x2, y1y2, Q), Q);\n    uint256 x3Num = addmod(mulmod(_x1, _y2, Q), mulmod(_y1, _x2, Q), Q);\n    uint256 y3Num = submod(y1y2, mulmod(A, x1x2, Q), Q);\n\n    x3 = mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q);\n    y3 = mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q);\n  }\n\n  /**\n   * @dev Double a point on baby jubjub curve\n   * Doubling can be performed with the same formula as addition\n   */\n  function pointDouble(uint256 _x1, uint256 _y1) internal view returns (uint256 x2, uint256 y2) {\n    return pointAdd(_x1, _y1, _x1, _y1);\n  }\n\n  /**\n   * @dev Multiply a point on baby jubjub curve by a scalar\n   * Use the double and add algorithm\n   */\n  function pointMul(uint256 _x1, uint256 _y1, uint256 _d) internal view returns (uint256 x2, uint256 y2) {\n    uint256 remaining = _d;\n\n    uint256 px = _x1;\n    uint256 py = _y1;\n    uint256 ax = 0;\n    uint256 ay = 0;\n\n    while (remaining != 0) {\n      if ((remaining & 1) != 0) {\n        // Binary digit is 1 so add\n        (ax, ay) = pointAdd(ax, ay, px, py);\n      }\n\n      (px, py) = pointDouble(px, py);\n\n      remaining = remaining / 2;\n    }\n\n    x2 = ax;\n    y2 = ay;\n  }\n\n  /**\n   * @dev Check if a given point is on the curve\n   * (168700x^2 + y^2) - (1 + 168696x^2y^2) == 0\n   */\n  function isOnCurve(uint256 _x, uint256 _y) internal pure returns (bool) {\n    uint256 xSq = mulmod(_x, _x, Q);\n    uint256 ySq = mulmod(_y, _y, Q);\n    uint256 lhs = addmod(mulmod(A, xSq, Q), ySq, Q);\n    uint256 rhs = addmod(1, mulmod(mulmod(D, xSq, Q), ySq, Q), Q);\n    return submod(lhs, rhs, Q) == 0;\n  }\n\n  /**\n   * @dev Perform modular subtraction\n   */\n  function submod(uint256 _a, uint256 _b, uint256 _mod) internal pure returns (uint256) {\n    uint256 aNN = _a;\n\n    if (_a <= _b) {\n      aNN += _mod;\n    }\n\n    return addmod(aNN - _b, 0, _mod);\n  }\n\n  /**\n   * @dev Compute modular inverse of a number\n   */\n  function inverse(uint256 _a) internal view returns (uint256) {\n    // We can use Euler's theorem instead of the extended Euclidean algorithm\n    // Since m = Q and Q is prime we have: a^-1 = a^(m - 2) (mod m)\n    return expmod(_a, Q - 2, Q);\n  }\n\n  /**\n   * @dev Helper function to call the bigModExp precompile\n   */\n  function expmod(uint256 _b, uint256 _e, uint256 _m) internal view returns (uint256 o) {\n    assembly {\n      let memPtr := mload(0x40)\n      mstore(memPtr, 0x20) // Length of base _b\n      mstore(add(memPtr, 0x20), 0x20) // Length of exponent _e\n      mstore(add(memPtr, 0x40), 0x20) // Length of modulus _m\n      mstore(add(memPtr, 0x60), _b) // Base _b\n      mstore(add(memPtr, 0x80), _e) // Exponent _e\n      mstore(add(memPtr, 0xa0), _m) // Modulus _m\n\n      // The bigModExp precompile is at 0x05\n      let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\n      switch success\n      case 0 {\n        revert(0x0, 0x0)\n      }\n      default {\n        o := mload(memPtr)\n      }\n    }\n  }\n}\n"
    },
    "maci-contracts/contracts/crypto/Hasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { SnarkConstants } from \"./SnarkConstants.sol\";\nimport { PoseidonT3 } from \"./PoseidonT3.sol\";\nimport { PoseidonT4 } from \"./PoseidonT4.sol\";\nimport { PoseidonT5 } from \"./PoseidonT5.sol\";\nimport { PoseidonT6 } from \"./PoseidonT6.sol\";\n\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\n/// functions for 2, 3, 4, 5, and 12 input elements.\ncontract Hasher is SnarkConstants {\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\n  /// @param array The array of uint256 elements.\n  /// @return result The SHA256 hash of the array.\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\n  }\n\n  /// @notice Computes the Poseidon hash of two uint256 elements.\n  /// @param array An array of two uint256 elements.\n  /// @return result The Poseidon hash of the two elements.\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\n    result = PoseidonT3.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of three uint256 elements.\n  /// @param array An array of three uint256 elements.\n  /// @return result The Poseidon hash of the three elements.\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\n    result = PoseidonT4.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of four uint256 elements.\n  /// @param array An array of four uint256 elements.\n  /// @return result The Poseidon hash of the four elements.\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\n    result = PoseidonT5.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of five uint256 elements.\n  /// @param array An array of five uint256 elements.\n  /// @return result The Poseidon hash of the five elements.\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\n    result = PoseidonT6.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of two uint256 elements.\n  /// @param left the first element to hash.\n  /// @param right the second element to hash.\n  /// @return result The Poseidon hash of the two elements.\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\n    uint256[2] memory input;\n    input[0] = left;\n    input[1] = right;\n    result = hash2(input);\n  }\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT3 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT4 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT5 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT6 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/SnarkConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title SnarkConstants\n/// @notice This contract contains constants related to the SNARK\n/// components of MACI.\ncontract SnarkConstants {\n  /// @notice The scalar field\n  uint256 internal constant SNARK_SCALAR_FIELD =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n  /// @notice The public key here is the first Pedersen base\n  /// point from iden3's circomlib implementation of the Pedersen hash.\n  /// Since it is generated using a hash-to-curve function, we are\n  /// confident that no-one knows the private key associated with this\n  /// public key. See:\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\n  /// Its hash should equal\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\n  uint256 internal constant PAD_PUBKEY_X =\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\n  uint256 internal constant PAD_PUBKEY_Y =\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\n\n  /// @notice The Keccack256 hash of 'Maci'\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\n}\n"
    },
    "maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title SignUpGatekeeper\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\nabstract contract SignUpGatekeeper {\n  /// @notice Allows to set the MACI contract\n  // solhint-disable-next-line no-empty-blocks\n  function setMaciInstance(address _maci) public virtual {}\n\n  /// @notice Registers the user\n  /// @param _user The address of the user\n  /// @param _data additional data\n  // solhint-disable-next-line no-empty-blocks\n  function register(address _user, bytes memory _data) public virtual {}\n\n  /// @notice Get the trait of the gatekeeper\n  /// @return The type of the gatekeeper\n  function getTrait() public pure virtual returns (string memory);\n}\n"
    },
    "maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title InitialVoiceCreditProxy\n/// @notice This contract is the base contract for\n/// InitialVoiceCreditProxy contracts. It allows to set a custom initial voice\n/// credit balance for MACI's voters.\nabstract contract InitialVoiceCreditProxy {\n  /// @notice Returns the initial voice credit balance for a new MACI's voter\n  /// @param _user the address of the voter\n  /// @param _data additional data\n  /// @return the balance\n  // solhint-disable-next-line no-empty-blocks\n  function getVoiceCredits(address _user, bytes memory _data) public view virtual returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/interfaces/IMACI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title IMACI\n/// @notice MACI interface\ninterface IMACI {\n  /// @notice Get the depth of the state tree\n  /// @return The depth of the state tree\n  function stateTreeDepth() external view returns (uint8);\n\n  /// @notice Return the main root of the StateAq contract\n  /// @return The Merkle root\n  function getStateTreeRoot() external view returns (uint256);\n\n  /// @notice Get the number of signups\n  /// @return numsignUps The number of signups\n  function numSignUps() external view returns (uint256);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IMPFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title IMessageProcessorFactory\n/// @notice MessageProcessorFactory interface\ninterface IMessageProcessorFactory {\n  /// @notice Deploy a new MessageProcessor contract and return the address.\n  /// @param _verifier Verifier contract\n  /// @param _vkRegistry VkRegistry contract\n  /// @param _poll Poll contract\n  /// @param _owner Owner of the MessageProcessor contract\n  /// @param _mode Voting mode\n  /// @return The deployed MessageProcessor contract\n  function deploy(\n    address _verifier,\n    address _vkRegistry,\n    address _poll,\n    address _owner,\n    DomainObjs.Mode _mode\n  ) external returns (address);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IPollFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { Params } from \"../utilities/Params.sol\";\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title IPollFactory\n/// @notice PollFactory interface\ninterface IPollFactory {\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\n  /// @param _duration The duration of the poll\n  /// @param _treeDepths The depths of the merkle trees\n  /// @param _coordinatorPubKey The coordinator's public key\n  /// @param _maci The MACI contract interface reference\n  /// @param _emptyBallotRoot The root of the empty ballot tree\n  /// @return The deployed Poll contract\n  function deploy(\n    uint256 _duration,\n    Params.TreeDepths memory _treeDepths,\n    DomainObjs.PubKey memory _coordinatorPubKey,\n    address _maci,\n    uint256 _emptyBallotRoot\n  ) external returns (address);\n}\n"
    },
    "maci-contracts/contracts/interfaces/ITallyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title ITallyFactory\n/// @notice TallyFactory interface\ninterface ITallyFactory {\n  /// @notice Deploy a new Tally contract and return the address.\n  /// @param _verifier Verifier contract\n  /// @param _vkRegistry VkRegistry contract\n  /// @param _poll Poll contract\n  /// @param _messageProcessor MessageProcessor contract\n  /// @param _owner Owner of the contract\n  /// @param _mode Voting mode\n  /// @return The deployed contract\n  function deploy(\n    address _verifier,\n    address _vkRegistry,\n    address _poll,\n    address _messageProcessor,\n    address _owner,\n    DomainObjs.Mode _mode\n  ) external returns (address);\n}\n"
    },
    "maci-contracts/contracts/MACI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IPollFactory } from \"./interfaces/IPollFactory.sol\";\nimport { IMessageProcessorFactory } from \"./interfaces/IMPFactory.sol\";\nimport { ITallyFactory } from \"./interfaces/ITallyFactory.sol\";\nimport { InitialVoiceCreditProxy } from \"./initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\";\nimport { SignUpGatekeeper } from \"./gatekeepers/SignUpGatekeeper.sol\";\nimport { IMACI } from \"./interfaces/IMACI.sol\";\nimport { Params } from \"./utilities/Params.sol\";\nimport { Utilities } from \"./utilities/Utilities.sol\";\nimport { DomainObjs } from \"./utilities/DomainObjs.sol\";\nimport { CurveBabyJubJub } from \"./crypto/BabyJubJub.sol\";\nimport { InternalLazyIMT, LazyIMTData } from \"./trees/LazyIMT.sol\";\n\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\n/// @notice A contract which allows users to sign up, and deploy new polls\ncontract MACI is IMACI, DomainObjs, Params, Utilities {\n  /// @notice The state tree depth is fixed. As such it should be as large as feasible\n  /// so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608\n  /// this should also match the parameter of the circom circuits.\n  /// @notice IMPORTANT: remember to change the ballot tree depth\n  /// in contracts/ts/genEmptyBallotRootsContract.ts file\n  /// if we change the state tree depth!\n  uint8 public immutable stateTreeDepth;\n\n  uint256 public immutable maxSignups;\n\n  uint8 internal constant TREE_ARITY = 2;\n\n  /// @notice The hash of a blank state leaf\n  uint256 internal constant BLANK_STATE_LEAF_HASH =\n    uint256(6769006970205099520508948723718471724660867171122235270773600567925038008762);\n\n  /// @notice The roots of the empty ballot trees\n  uint256[5] public emptyBallotRoots;\n\n  /// @notice Each poll has an incrementing ID\n  uint256 public nextPollId;\n\n  /// @notice A mapping of poll IDs to Poll contracts.\n  mapping(uint256 => PollContracts) public polls;\n\n  /// @notice Factory contract that deploy a Poll contract\n  IPollFactory public immutable pollFactory;\n\n  /// @notice Factory contract that deploy a MessageProcessor contract\n  IMessageProcessorFactory public immutable messageProcessorFactory;\n\n  /// @notice Factory contract that deploy a Tally contract\n  ITallyFactory public immutable tallyFactory;\n\n  /// @notice The state tree. Represents a mapping between each user's public key\n  /// and their voice credit balance.\n  LazyIMTData public lazyIMTData;\n\n  /// @notice Address of the SignUpGatekeeper, a contract which determines whether a\n  /// user may sign up to vote\n  SignUpGatekeeper public immutable signUpGatekeeper;\n\n  /// @notice The contract which provides the values of the initial voice credit\n  /// balance per user\n  InitialVoiceCreditProxy public immutable initialVoiceCreditProxy;\n\n  /// @notice A struct holding the addresses of poll, mp and tally\n  struct PollContracts {\n    address poll;\n    address messageProcessor;\n    address tally;\n  }\n\n  // Events\n  event SignUp(\n    uint256 _stateIndex,\n    uint256 indexed _userPubKeyX,\n    uint256 indexed _userPubKeyY,\n    uint256 _voiceCreditBalance,\n    uint256 _timestamp\n  );\n  event DeployPoll(\n    uint256 _pollId,\n    uint256 indexed _coordinatorPubKeyX,\n    uint256 indexed _coordinatorPubKeyY,\n    Mode _mode\n  );\n\n  /// @notice custom errors\n  error PoseidonHashLibrariesNotLinked();\n  error TooManySignups();\n  error InvalidPubKey();\n  error PollDoesNotExist(uint256 pollId);\n\n  /// @notice Create a new instance of the MACI contract.\n  /// @param _pollFactory The PollFactory contract\n  /// @param _messageProcessorFactory The MessageProcessorFactory contract\n  /// @param _tallyFactory The TallyFactory contract\n  /// @param _signUpGatekeeper The SignUpGatekeeper contract\n  /// @param _initialVoiceCreditProxy The InitialVoiceCreditProxy contract\n  /// @param _stateTreeDepth The depth of the state tree\n  /// @param _emptyBallotRoots The roots of the empty ballot trees\n  constructor(\n    IPollFactory _pollFactory,\n    IMessageProcessorFactory _messageProcessorFactory,\n    ITallyFactory _tallyFactory,\n    SignUpGatekeeper _signUpGatekeeper,\n    InitialVoiceCreditProxy _initialVoiceCreditProxy,\n    uint8 _stateTreeDepth,\n    uint256[5] memory _emptyBallotRoots\n  ) payable {\n    // initialize and insert the blank leaf\n    InternalLazyIMT._init(lazyIMTData, _stateTreeDepth);\n    InternalLazyIMT._insert(lazyIMTData, BLANK_STATE_LEAF_HASH);\n\n    pollFactory = _pollFactory;\n    messageProcessorFactory = _messageProcessorFactory;\n    tallyFactory = _tallyFactory;\n    signUpGatekeeper = _signUpGatekeeper;\n    initialVoiceCreditProxy = _initialVoiceCreditProxy;\n    stateTreeDepth = _stateTreeDepth;\n    maxSignups = uint256(TREE_ARITY) ** uint256(_stateTreeDepth);\n    emptyBallotRoots = _emptyBallotRoots;\n\n    // Verify linked poseidon libraries\n    if (hash2([uint256(1), uint256(1)]) == 0) revert PoseidonHashLibrariesNotLinked();\n  }\n\n  /// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\n  /// double sign-ups or ineligible users from doing so.  This function will\n  /// only succeed if the sign-up deadline has not passed. It also enqueues a\n  /// fresh state leaf into the state AccQueue.\n  /// @param _pubKey The user's desired public key.\n  /// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\n  ///     register() function. For instance, the POAPGatekeeper or\n  ///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\n  ///     token ID.\n  /// @param _initialVoiceCreditProxyData Data to pass to the\n  ///     InitialVoiceCreditProxy, which allows it to determine how many voice\n  ///     credits this user should have.\n  function signUp(\n    PubKey memory _pubKey,\n    bytes memory _signUpGatekeeperData,\n    bytes memory _initialVoiceCreditProxyData\n  ) public virtual {\n    // ensure we do not have more signups than what the circuits support\n    if (lazyIMTData.numberOfLeaves >= maxSignups) revert TooManySignups();\n\n    // ensure that the public key is on the baby jubjub curve\n    if (!CurveBabyJubJub.isOnCurve(_pubKey.x, _pubKey.y)) {\n      revert InvalidPubKey();\n    }\n\n    // Register the user via the sign-up gatekeeper. This function should\n    // throw if the user has already registered or if ineligible to do so.\n    signUpGatekeeper.register(msg.sender, _signUpGatekeeperData);\n\n    // Get the user's voice credit balance.\n    uint256 voiceCreditBalance = initialVoiceCreditProxy.getVoiceCredits(msg.sender, _initialVoiceCreditProxyData);\n\n    uint256 timestamp = block.timestamp;\n\n    // Create a state leaf and insert it into the tree.\n    uint256 stateLeaf = hashStateLeaf(StateLeaf(_pubKey, voiceCreditBalance, timestamp));\n    InternalLazyIMT._insert(lazyIMTData, stateLeaf);\n\n    emit SignUp(lazyIMTData.numberOfLeaves - 1, _pubKey.x, _pubKey.y, voiceCreditBalance, timestamp);\n  }\n\n  /// @notice Deploy a new Poll contract.\n  /// @param _duration How long should the Poll last for\n  /// @param _treeDepths The depth of the Merkle trees\n  /// @param _coordinatorPubKey The coordinator's public key\n  /// @param _verifier The Verifier Contract\n  /// @param _vkRegistry The VkRegistry Contract\n  /// @param _mode Voting mode\n  function deployPoll(\n    uint256 _duration,\n    TreeDepths memory _treeDepths,\n    PubKey memory _coordinatorPubKey,\n    address _verifier,\n    address _vkRegistry,\n    Mode _mode\n  ) public virtual {\n    // cache the poll to a local variable so we can increment it\n    uint256 pollId = nextPollId;\n\n    // Increment the poll ID for the next poll\n    // 2 ** 256 polls available\n    unchecked {\n      nextPollId++;\n    }\n\n    // check coordinator key is a valid point on the curve\n    if (!CurveBabyJubJub.isOnCurve(_coordinatorPubKey.x, _coordinatorPubKey.y)) {\n      revert InvalidPubKey();\n    }\n\n    uint256 voteOptionTreeDepth = _treeDepths.voteOptionTreeDepth;\n\n    address p = pollFactory.deploy(\n      _duration,\n      _treeDepths,\n      _coordinatorPubKey,\n      address(this),\n      emptyBallotRoots[voteOptionTreeDepth - 1]\n    );\n\n    address mp = messageProcessorFactory.deploy(_verifier, _vkRegistry, p, msg.sender, _mode);\n    address tally = tallyFactory.deploy(_verifier, _vkRegistry, p, mp, msg.sender, _mode);\n\n    // store the addresses in a struct so they can be returned\n    PollContracts memory pollAddr = PollContracts({ poll: p, messageProcessor: mp, tally: tally });\n\n    polls[pollId] = pollAddr;\n\n    emit DeployPoll(pollId, _coordinatorPubKey.x, _coordinatorPubKey.y, _mode);\n  }\n\n  /// @inheritdoc IMACI\n  function getStateTreeRoot() public view returns (uint256 root) {\n    root = InternalLazyIMT._root(lazyIMTData);\n  }\n\n  /// @notice Get the Poll details\n  /// @param _pollId The identifier of the Poll to retrieve\n  /// @return pollContracts The Poll contract object\n  function getPoll(uint256 _pollId) public view returns (PollContracts memory pollContracts) {\n    if (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n    pollContracts = polls[_pollId];\n  }\n\n  /// @inheritdoc IMACI\n  function numSignUps() public view returns (uint256 signUps) {\n    signUps = lazyIMTData.numberOfLeaves;\n  }\n}\n"
    },
    "maci-contracts/contracts/trees/AccQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Hasher } from \"../crypto/Hasher.sol\";\n\n/// @title AccQueue\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\n/// subtree. To obtain the main tree root, the contract owner must merge the\n/// subtrees together. Merging subtrees requires at least 2 operations:\n/// mergeSubRoots(), and merge(). To get around the gas limit,\n/// the mergeSubRoots() can be performed in multiple transactions.\nabstract contract AccQueue is Ownable(msg.sender), Hasher {\n  // The maximum tree depth\n  uint256 public constant MAX_DEPTH = 32;\n\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\n  /// in a Merkle tree while it is progressively updated.\n  struct Queue {\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\n    /// uint256[4] arrays, **not the other way round**:\n    uint256[4][MAX_DEPTH + 1] levels;\n    uint256[MAX_DEPTH + 1] indices;\n  }\n\n  // The depth of each subtree\n  uint256 internal immutable subDepth;\n\n  // The number of elements per hash operation. Should be either 2 (for\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\n  // maximum supported number of inputs for the EVM implementation of the\n  // Poseidon hash function\n  uint256 internal immutable hashLength;\n\n  // hashLength ** subDepth\n  uint256 internal immutable subTreeCapacity;\n\n  // True hashLength == 2, false if hashLength == 5\n  bool internal isBinary;\n\n  // The index of the current subtree. e.g. the first subtree has index 0, the\n  // second has 1, and so on\n  uint256 internal currentSubtreeIndex;\n\n  // Tracks the current subtree.\n  Queue internal leafQueue;\n\n  // Tracks the smallest tree of subroots\n  Queue internal subRootQueue;\n\n  // Subtree roots\n  mapping(uint256 => uint256) internal subRoots;\n\n  // Merged roots\n  uint256[MAX_DEPTH + 1] internal mainRoots;\n\n  // Whether the subtrees have been merged\n  bool public subTreesMerged;\n\n  // Whether entire merkle tree has been merged\n  bool public treeMerged;\n\n  // The root of the shortest possible tree which fits all current subtree\n  // roots\n  uint256 internal smallSRTroot;\n\n  // Tracks the next subroot to queue\n  uint256 internal nextSubRootIndex;\n\n  // The number of leaves inserted across all subtrees so far\n  uint256 public numLeaves;\n\n  /// @notice custom errors\n  error SubDepthCannotBeZero();\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\n  error InvalidHashLength();\n  error DepthCannotBeZero();\n  error SubTreesAlreadyMerged();\n  error NothingToMerge();\n  error SubTreesNotMerged();\n  error DepthTooLarge(uint256 _depth, uint256 max);\n  error DepthTooSmall(uint256 _depth, uint256 min);\n  error InvalidIndex(uint256 _index);\n  error InvalidLevel();\n\n  /// @notice Create a new AccQueue\n  /// @param _subDepth The depth of each subtree.\n  /// @param _hashLength The number of leaves per node (2 or 5).\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\n    /// validation\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\n\n    isBinary = _hashLength == 2;\n    subDepth = _subDepth;\n    hashLength = _hashLength;\n    subTreeCapacity = _hashLength ** _subDepth;\n  }\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// This is a virtual function as the hash function which the overriding\n  /// contract uses will be either hashLeftRight or hash5, which require\n  /// different input array lengths.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return _hash The hash of the level and leaf.\n  // solhint-disable-next-line no-empty-blocks\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// This is a virtual function as the hash function which the overriding\n  /// contract uses will be either hashLeftRight or hash5, which require\n  /// different input array lengths.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return _hash The hash of the level and leaf.\n  // solhint-disable-next-line no-empty-blocks\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\n\n  /// @notice Returns the zero leaf at a specified level.\n  /// This is a virtual function as the hash function which the overriding\n  /// contract uses will be either hashLeftRight or hash5, which will produce\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\n  /// nothing-up-my-sleeve value.\n  /// @param _level The level at which to return the zero leaf.\n  /// @return zero The zero leaf at the specified level.\n  // solhint-disable-next-line no-empty-blocks\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\n\n  /// @notice Add a leaf to the queue for the current subtree.\n  /// @param _leaf The leaf to add.\n  /// @return leafIndex The index of the leaf in the queue.\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\n    leafIndex = numLeaves;\n    // Recursively queue the leaf\n    _enqueue(_leaf, 0);\n\n    // Update the leaf counter\n    numLeaves = leafIndex + 1;\n\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\n    // obsolete\n    delete mainRoots;\n    delete smallSRTroot;\n    subTreesMerged = false;\n\n    // If a subtree is full\n    if (numLeaves % subTreeCapacity == 0) {\n      // Store the subroot\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\n\n      // Increment the index\n      currentSubtreeIndex++;\n\n      // Delete ancillary data\n      delete leafQueue.levels[subDepth][0];\n      delete leafQueue.indices;\n    }\n  }\n\n  /// @notice Updates the queue at a given level and hashes any subroots\n  /// that need to be hashed.\n  /// @param _leaf The leaf to add.\n  /// @param _level The level at which to queue the leaf.\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\n    if (_level > subDepth) {\n      revert InvalidLevel();\n    }\n\n    while (true) {\n      uint256 n = leafQueue.indices[_level];\n\n      if (n != hashLength - 1) {\n        // Just store the leaf\n        leafQueue.levels[_level][n] = _leaf;\n\n        if (_level != subDepth) {\n          // Update the index\n          leafQueue.indices[_level]++;\n        }\n\n        return;\n      }\n\n      // Hash the leaves to next level\n      _leaf = hashLevel(_level, _leaf);\n\n      // Reset the index for this level\n      delete leafQueue.indices[_level];\n\n      // Queue the hash of the leaves into to the next level\n      _level++;\n    }\n  }\n\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\n  /// resulting subroot.\n  function fill() public onlyOwner {\n    if (numLeaves % subTreeCapacity == 0) {\n      // If the subtree is completely empty, then the subroot is a\n      // precalculated zero value\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\n    } else {\n      // Otherwise, fill the rest of the subtree with zeros\n      _fill(0);\n\n      // Store the subroot\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\n\n      // Reset the subtree data\n      delete leafQueue.levels;\n\n      // Reset the merged roots\n      delete mainRoots;\n    }\n\n    // Increment the subtree index\n    uint256 curr = currentSubtreeIndex + 1;\n    currentSubtreeIndex = curr;\n\n    // Update the number of leaves\n    numLeaves = curr * subTreeCapacity;\n\n    // Reset the subroot tree root now that it is obsolete\n    delete smallSRTroot;\n\n    subTreesMerged = false;\n  }\n\n  /// @notice A function that queues zeros to the specified level, hashes,\n  /// the level, and enqueues the hash to the next level.\n  /// @param _level The level at which to queue zeros.\n  // solhint-disable-next-line no-empty-blocks\n  function _fill(uint256 _level) internal virtual {}\n\n  /// Insert a subtree. Used for batch enqueues.\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\n    subRoots[currentSubtreeIndex] = _subRoot;\n\n    // Increment the subtree index\n    currentSubtreeIndex++;\n\n    // Update the number of leaves\n    numLeaves += subTreeCapacity;\n\n    // Reset the subroot tree root now that it is obsolete\n    delete smallSRTroot;\n\n    subTreesMerged = false;\n  }\n\n  /// @notice Calculate the lowest possible height of a tree with\n  /// all the subroots merged together.\n  /// @return depth The lowest possible height of a tree with all the\n  function calcMinHeight() public view returns (uint256 depth) {\n    depth = 1;\n    while (true) {\n      if (hashLength ** depth >= currentSubtreeIndex) {\n        break;\n      }\n      depth++;\n    }\n  }\n\n  /// @notice Merge all subtrees to form the shortest possible tree.\n  /// This function can be called either once to merge all subtrees in a\n  /// single transaction, or multiple times to do the same in multiple\n  /// transactions.\n  /// @param _numSrQueueOps The number of times this function will call\n  ///                       queueSubRoot(), up to the maximum number of times\n  ///                       necessary. If it is set to 0, it will call\n  ///                       queueSubRoot() as many times as is necessary. Set\n  ///                       this to a low number and call this function\n  ///                       multiple times if there are many subroots to\n  ///                       merge, or a single transaction could run out of\n  ///                       gas.\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\n    // This function can only be called once unless a new subtree is created\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\n\n    // There must be subtrees to merge\n    if (numLeaves == 0) revert NothingToMerge();\n\n    // Fill any empty leaves in the current subtree with zeros only if the\n    // current subtree is not full\n    if (numLeaves % subTreeCapacity != 0) {\n      fill();\n    }\n\n    // If there is only 1 subtree, use its root\n    if (currentSubtreeIndex == 1) {\n      smallSRTroot = getSubRoot(0);\n      subTreesMerged = true;\n      return;\n    }\n\n    uint256 depth = calcMinHeight();\n\n    uint256 queueOpsPerformed = 0;\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\n        // If the limit is not 0, stop if the limit has been reached\n        return;\n      }\n\n      // Queue the next subroot\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\n\n      // Increment the next subroot counter\n      nextSubRootIndex++;\n\n      // Increment the ops counter\n      queueOpsPerformed++;\n    }\n\n    // The height of the tree of subroots\n    uint256 m = hashLength ** depth;\n\n    // Queue zeroes to fill out the SRT\n    if (nextSubRootIndex == currentSubtreeIndex) {\n      uint256 z = getZero(subDepth);\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\n        queueSubRoot(z, 0, depth);\n      }\n    }\n\n    // Store the smallest main root\n    smallSRTroot = subRootQueue.levels[depth][0];\n    subTreesMerged = true;\n  }\n\n  /// @notice Queues a subroot into the subroot tree.\n  /// @param _leaf The value to queue.\n  /// @param _level The level at which to queue _leaf.\n  /// @param _maxDepth The depth of the tree.\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\n    if (_level > _maxDepth) {\n      return;\n    }\n\n    uint256 n = subRootQueue.indices[_level];\n\n    if (n != hashLength - 1) {\n      // Just store the leaf\n      subRootQueue.levels[_level][n] = _leaf;\n      subRootQueue.indices[_level]++;\n    } else {\n      // Hash the elements in this level and queue it in the next level\n      uint256 hashed;\n      if (isBinary) {\n        uint256[2] memory inputs;\n        inputs[0] = subRootQueue.levels[_level][0];\n        inputs[1] = _leaf;\n        hashed = hash2(inputs);\n      } else {\n        uint256[5] memory inputs;\n        for (uint8 i = 0; i < n; i++) {\n          inputs[i] = subRootQueue.levels[_level][i];\n        }\n        inputs[n] = _leaf;\n        hashed = hash5(inputs);\n      }\n\n      // TODO: change recursion to a while loop\n      // Recurse\n      delete subRootQueue.indices[_level];\n      queueSubRoot(hashed, _level + 1, _maxDepth);\n    }\n  }\n\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\n  ///               this function will revert.\n  /// @return root The root of the main tree.\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\n    // The tree depth must be more than 0\n    if (_depth == 0) revert DepthCannotBeZero();\n\n    // Ensure that the subtrees have been merged\n    if (!subTreesMerged) revert SubTreesNotMerged();\n\n    // Check the depth\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\n\n    // Calculate the SRT depth\n    uint256 srtDepth = subDepth;\n    while (true) {\n      if (hashLength ** srtDepth >= numLeaves) {\n        break;\n      }\n      srtDepth++;\n    }\n\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\n\n    // If the depth is the same as the SRT depth, just use the SRT root\n    if (_depth == srtDepth) {\n      mainRoots[_depth] = smallSRTroot;\n      treeMerged = true;\n      return smallSRTroot;\n    } else {\n      root = smallSRTroot;\n\n      // Calculate the main root\n\n      for (uint256 i = srtDepth; i < _depth; i++) {\n        uint256 z = getZero(i);\n\n        if (isBinary) {\n          uint256[2] memory inputs;\n          inputs[0] = root;\n          inputs[1] = z;\n          root = hash2(inputs);\n        } else {\n          uint256[5] memory inputs;\n          inputs[0] = root;\n          inputs[1] = z;\n          inputs[2] = z;\n          inputs[3] = z;\n          inputs[4] = z;\n          root = hash5(inputs);\n        }\n      }\n\n      mainRoots[_depth] = root;\n      treeMerged = true;\n    }\n  }\n\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\n  /// to a subtree which has not been filled yet.\n  /// @param _index The subroot index.\n  /// @return subRoot The subroot at the specified index.\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\n    subRoot = subRoots[_index];\n  }\n\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\n  /// using mergeSubRoots.\n  /// @return smallSubTreeRoot The SRT root.\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\n    if (!subTreesMerged) revert SubTreesNotMerged();\n    smallSubTreeRoot = smallSRTroot;\n  }\n\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\n  /// @dev merge() or merged(_depth) must be called first.\n  /// @param _depth The depth of the main tree. It must first be computed\n  ///               using mergeSubRoots() and merge().\n  /// @return mainRoot The root of the main tree.\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\n\n    mainRoot = mainRoots[_depth];\n  }\n\n  /// @notice Get the next subroot index and the current subtree index.\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\n    next = nextSubRootIndex;\n    current = currentSubtreeIndex;\n  }\n}\n"
    },
    "maci-contracts/contracts/trees/LazyIMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { PoseidonT3 } from \"../crypto/PoseidonT3.sol\";\n\n/// @notice A struct that holds a LazyIMT data\nstruct LazyIMTData {\n  uint40 maxIndex;\n  uint40 numberOfLeaves;\n  mapping(uint256 => uint256) elements;\n}\n\n/// @notice Custom errors\nerror DefaultZeroBadIndex();\nerror DepthTooLarge();\nerror DepthCannotBeZero();\nerror NumberOfLeavesCannotBeZero();\nerror AmbiguousDepth();\n\n/// @title InternalLazyIMT\n/// @dev A LazyIMT with Zeroes value set to the hash of\n/// a MACI Blank State Leaf\n/// @notice This implementation is taken from zk-kit\n/// https://github.com/privacy-scaling-explorations/zk-kit/blob/main/packages/imt.sol/contracts/internal/InternalLazyIMT.sol\n/// and modified to work with MACI.\nlibrary InternalLazyIMT {\n  uint256 internal constant MAX_DEPTH = 32;\n\n  uint40 internal constant MAX_INDEX = (1 << 32) - 1;\n\n  uint256 internal constant Z_0 = 6769006970205099520508948723718471724660867171122235270773600567925038008762;\n  uint256 internal constant Z_1 = 2972820301952105722688860985556183033855705951263221082702981787813754939537;\n  uint256 internal constant Z_2 = 19009473369953096352828532459942637819279786575057870804186038131433538383332;\n  uint256 internal constant Z_3 = 1877001762518233819645599208989578372605193385355680834239714249281096297174;\n  uint256 internal constant Z_4 = 4022598852800694816938652741439614774645858989706174527409714109784047480520;\n  uint256 internal constant Z_5 = 8078617093048295855521451309865989496051030103472138252021705658681696298712;\n  uint256 internal constant Z_6 = 21861637049723057871988413507302821095913894718242489848472531680353400271584;\n  uint256 internal constant Z_7 = 2969626195902860050407584814596940245443093107470116547781577350415736914038;\n  uint256 internal constant Z_8 = 13863086449569754493134198846069090996475357615094865751949144794620598051673;\n  uint256 internal constant Z_9 = 13774233155966252113965527228795435224641075024674384267997743867571011718458;\n  uint256 internal constant Z_10 = 7674682532432601125535053858292577379388329393276537570517515727197672122157;\n  uint256 internal constant Z_11 = 2657471847139856346360223652201172662911313292042510535836997980857168085414;\n  uint256 internal constant Z_12 = 14112562742724116016492623819773686970029672095023612838615540190985426106768;\n  uint256 internal constant Z_13 = 16966520284141749853106006448832965932249937855809150844697400390499975107456;\n  uint256 internal constant Z_14 = 21146121663662200258116396149536742745305242191891337170899444969488030502620;\n  uint256 internal constant Z_15 = 8395571901509192935479743034608666551563743095742598750914087478677907730358;\n  uint256 internal constant Z_16 = 11584898446168752024843587018551921614604785083342073076015560385003528300499;\n  uint256 internal constant Z_17 = 19681365563800708744156562671961079617734353445922751560400662591064339349816;\n  uint256 internal constant Z_18 = 11060693795061987995391612467169498625108376769265861980249917517984263067473;\n  uint256 internal constant Z_19 = 20136055137568042031318427040358591430196153124171666293804511634641041409480;\n  uint256 internal constant Z_20 = 10438448879123510479428288344427042332522761183009746406441238260861529360499;\n  uint256 internal constant Z_21 = 20302411580043873005239406811066876697276902025885155920151067303221158887923;\n  uint256 internal constant Z_22 = 16905699456770804689394621400052823445587122726651394178036372609288266146575;\n  uint256 internal constant Z_23 = 13317924909658910751179983108234689413063120680580702936091220805509299490708;\n  uint256 internal constant Z_24 = 11624463897690689883938167321830091369950933831231839575225419984927228390345;\n  uint256 internal constant Z_25 = 12388077003631746290497429926117583834311703848735670874049584990731919769551;\n  uint256 internal constant Z_26 = 16641943593086083573943184041147806885253724243247212515325749241831788827569;\n  uint256 internal constant Z_27 = 8675770901378242337954792996483564563211065498082968464791979179678744114204;\n  uint256 internal constant Z_28 = 3741944068643598116715410464277276913339851849923986024648161859457213369743;\n  uint256 internal constant Z_29 = 9365051374992868354747065577256691008852056444829383197903446097138255771103;\n  uint256 internal constant Z_30 = 19608043542461863702809013760105552654336523908709289008189330402608282498922;\n  uint256 internal constant Z_31 = 15116478429455923389320892447700153271977917184085737305957533984219061034768;\n  uint256 internal constant Z_32 = 13372161856163346716845871420623647679532631520878788090782842562075678687737;\n\n  /// @notice Returns the default zero value for a given index\n  /// @param index The index of the zero value\n  /// @return The zero value\n  function _defaultZero(uint8 index) internal pure returns (uint256) {\n    if (index == 0) return Z_0;\n    if (index == 1) return Z_1;\n    if (index == 2) return Z_2;\n    if (index == 3) return Z_3;\n    if (index == 4) return Z_4;\n    if (index == 5) return Z_5;\n    if (index == 6) return Z_6;\n    if (index == 7) return Z_7;\n    if (index == 8) return Z_8;\n    if (index == 9) return Z_9;\n    if (index == 10) return Z_10;\n    if (index == 11) return Z_11;\n    if (index == 12) return Z_12;\n    if (index == 13) return Z_13;\n    if (index == 14) return Z_14;\n    if (index == 15) return Z_15;\n    if (index == 16) return Z_16;\n    if (index == 17) return Z_17;\n    if (index == 18) return Z_18;\n    if (index == 19) return Z_19;\n    if (index == 20) return Z_20;\n    if (index == 21) return Z_21;\n    if (index == 22) return Z_22;\n    if (index == 23) return Z_23;\n    if (index == 24) return Z_24;\n    if (index == 25) return Z_25;\n    if (index == 26) return Z_26;\n    if (index == 27) return Z_27;\n    if (index == 28) return Z_28;\n    if (index == 29) return Z_29;\n    if (index == 30) return Z_30;\n    if (index == 31) return Z_31;\n    if (index == 32) return Z_32;\n    revert DefaultZeroBadIndex();\n  }\n\n  /// @notice Initializes the LazyIMT\n  /// @param self The LazyIMTData\n  /// @param depth The depth of the tree\n  function _init(LazyIMTData storage self, uint8 depth) internal {\n    if (depth > MAX_DEPTH) {\n      revert DepthTooLarge();\n    }\n    self.maxIndex = uint40((1 << depth) - 1);\n    self.numberOfLeaves = 0;\n  }\n\n  /// @notice Returns the index for a given level and index\n  /// @param level The level\n  /// @param index The index\n  /// @return The index for the element\n  function _indexForElement(uint8 level, uint40 index) internal pure returns (uint40) {\n    // store the elements sparsely\n    return (uint40(level) << 32) - level + index;\n  }\n\n  /// @notice Inserts a leaf into the LazyIMT\n  /// @param self The LazyIMTData\n  /// @param leaf The leaf to insert\n  function _insert(LazyIMTData storage self, uint256 leaf) internal {\n    uint40 index = self.numberOfLeaves;\n\n    self.numberOfLeaves = index + 1;\n\n    uint256 hash = leaf;\n\n    for (uint8 i = 0; ; ) {\n      self.elements[_indexForElement(i, index)] = hash;\n      // it's a left element so we don't hash until there's a right element\n      if (index & 1 == 0) break;\n      uint40 elementIndex = _indexForElement(i, index - 1);\n      hash = PoseidonT3.poseidon([self.elements[elementIndex], hash]);\n      unchecked {\n        index >>= 1;\n        i++;\n      }\n    }\n  }\n\n  /// @notice Returns the root of the LazyIMT\n  /// @param self The LazyIMTData\n  /// @return The root of the LazyIMT\n  function _root(LazyIMTData storage self) internal view returns (uint256) {\n    // this will always short circuit if self.numberOfLeaves == 0\n    uint40 numberOfLeaves = self.numberOfLeaves;\n    // dynamically determine a depth\n    uint8 depth = 1;\n    while (uint40(1 << depth) < numberOfLeaves) {\n      depth++;\n    }\n    return _root(self, numberOfLeaves, depth);\n  }\n\n  /// @notice Returns the root of the LazyIMT\n  /// @dev Here it's assumed that the depth value is valid.\n  /// If it is either 0 or > 2^8-1 this function will panic.\n  /// @param self The LazyIMTData\n  /// @param numberOfLeaves The number of leaves\n  /// @param depth The depth of the tree\n  /// @return The root of the LazyIMT\n  function _root(LazyIMTData storage self, uint40 numberOfLeaves, uint8 depth) internal view returns (uint256) {\n    if (depth > MAX_DEPTH) {\n      revert DepthTooLarge();\n    }\n    // this should always short circuit if self.numberOfLeaves == 0\n    if (numberOfLeaves == 0) return _defaultZero(depth);\n    uint256[] memory levels = new uint256[](depth + 1);\n    _levels(self, numberOfLeaves, depth, levels);\n    return levels[depth];\n  }\n\n  /// @notice Updates the levels of the LazyIMT\n  /// @param self The LazyIMTData\n  /// @param numberOfLeaves The number of leaves\n  /// @param depth The depth of the tree\n  /// @param levels The levels of the tree\n  function _levels(\n    LazyIMTData storage self,\n    uint40 numberOfLeaves,\n    uint8 depth,\n    uint256[] memory levels\n  ) internal view {\n    if (depth > MAX_DEPTH) {\n      revert DepthTooLarge();\n    }\n    if (numberOfLeaves == 0) {\n      revert NumberOfLeavesCannotBeZero();\n    }\n\n    // this should always short circuit if self.numberOfLeaves == 0\n    uint40 index = numberOfLeaves - 1;\n\n    if (index & 1 == 0) {\n      levels[0] = self.elements[_indexForElement(0, index)];\n    } else {\n      levels[0] = _defaultZero(0);\n    }\n\n    for (uint8 i = 0; i < depth; ) {\n      if (index & 1 == 0) {\n        levels[i + 1] = PoseidonT3.poseidon([levels[i], _defaultZero(i)]);\n      } else {\n        uint256 levelCount = (numberOfLeaves) >> (i + 1);\n        if (levelCount > index >> 1) {\n          uint256 parent = self.elements[_indexForElement(i + 1, index >> 1)];\n          levels[i + 1] = parent;\n        } else {\n          uint256 sibling = self.elements[_indexForElement(i, index - 1)];\n          levels[i + 1] = PoseidonT3.poseidon([sibling, levels[i]]);\n        }\n      }\n      unchecked {\n        index >>= 1;\n        i++;\n      }\n    }\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/DomainObjs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title DomainObjs\n/// @notice An utility contract that holds\n/// a number of domain objects and functions\ncontract DomainObjs {\n  /// @notice the length of a MACI message\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\n\n  /// @notice voting modes\n  enum Mode {\n    QV,\n    NON_QV\n  }\n\n  /// @title Message\n  /// @notice this struct represents a MACI message\n  /// @dev msgType: 1 for vote message\n  struct Message {\n    uint256[MESSAGE_DATA_LENGTH] data;\n  }\n\n  /// @title PubKey\n  /// @notice A MACI public key\n  struct PubKey {\n    uint256 x;\n    uint256 y;\n  }\n\n  /// @title StateLeaf\n  /// @notice A MACI state leaf\n  /// @dev used to represent a user's state\n  /// in the state Merkle tree\n  struct StateLeaf {\n    PubKey pubKey;\n    uint256 voiceCreditBalance;\n    uint256 timestamp;\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/Params.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IMACI } from \"../interfaces/IMACI.sol\";\nimport { AccQueue } from \"../trees/AccQueue.sol\";\n\n/// @title Params\n/// @notice This contracts contains a number of structures\n/// which are to be passed as parameters to Poll contracts.\n/// This way we can reduce the number of parameters\n/// and avoid a stack too deep error during compilation.\ncontract Params {\n  /// @notice A struct holding the depths of the merkle trees\n  struct TreeDepths {\n    uint8 intStateTreeDepth;\n    uint8 messageTreeSubDepth;\n    uint8 messageTreeDepth;\n    uint8 voteOptionTreeDepth;\n  }\n\n  /// @notice A struct holding the external contracts\n  /// that are to be passed to a Poll contract on\n  /// deployment\n  struct ExtContracts {\n    IMACI maci;\n    AccQueue messageAq;\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/Utilities.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { DomainObjs } from \"./DomainObjs.sol\";\nimport { Hasher } from \"../crypto/Hasher.sol\";\nimport { SnarkConstants } from \"../crypto/SnarkConstants.sol\";\n\n/// @title Utilities\n/// @notice An utility contract that can be used to:\n/// * hash a state leaf\n/// * pad and hash a MACI message\n/// * hash a MACI message and an encryption public key\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\n  /// @notice custom errors\n  error InvalidMessage();\n\n  /// @notice An utility function used to hash a state leaf\n  /// @param _stateLeaf the state leaf to be hashed\n  /// @return ciphertext The hash of the state leaf\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\n    uint256[4] memory plaintext;\n    plaintext[0] = _stateLeaf.pubKey.x;\n    plaintext[1] = _stateLeaf.pubKey.y;\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\n    plaintext[3] = _stateLeaf.timestamp;\n\n    ciphertext = hash4(plaintext);\n  }\n\n  /// @notice An utility function used to pad and hash a MACI message\n  /// @param dataToPad the data to be padded\n  /// @return message The padded message\n  /// @return padKey The padding public key\n  /// @return msgHash The hash of the padded message and encryption key\n  function padAndHashMessage(\n    uint256[2] memory dataToPad\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\n    // add data and pad it to 10 elements (automatically cause it's the default value)\n    uint256[10] memory dat;\n    dat[0] = dataToPad[0];\n    dat[1] = dataToPad[1];\n\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\n    message = Message({ data: dat });\n    msgHash = hashMessageAndEncPubKey(message, padKey);\n  }\n\n  /// @notice An utility function used to hash a MACI message and an encryption public key\n  /// @param _message the message to be hashed\n  /// @param _encPubKey the encryption public key to be hashed\n  /// @return msgHash The hash of the message and the encryption public key\n  function hashMessageAndEncPubKey(\n    Message memory _message,\n    PubKey memory _encPubKey\n  ) public pure returns (uint256 msgHash) {\n    if (_message.data.length != 10) {\n      revert InvalidMessage();\n    }\n\n    uint256[5] memory n;\n    n[0] = _message.data[0];\n    n[1] = _message.data[1];\n    n[2] = _message.data[2];\n    n[3] = _message.data[3];\n    n[4] = _message.data[4];\n\n    uint256[5] memory m;\n    m[0] = _message.data[5];\n    m[1] = _message.data[6];\n    m[2] = _message.data[7];\n    m[3] = _message.data[8];\n    m[4] = _message.data[9];\n\n    msgHash = hash4([hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}