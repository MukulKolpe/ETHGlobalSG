{
  "address": "0xff4b46A875EEE275dE683f231fc603dd136192D5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getTrait",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_maci",
          "type": "address"
        }
      ],
      "name": "setMaciInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33b1915537ab24919360efe607cb43c9139882994914b9c2aa713fd673ee6c11",
  "receipt": {
    "to": null,
    "from": "0xa83A121E9957d69Fd24b133b280eBD4823380dBF",
    "contractAddress": "0xff4b46A875EEE275dE683f231fc603dd136192D5",
    "transactionIndex": 5,
    "gasUsed": "219197",
    "logsBloom": "0x
    "blockHash": "0x4a331d95ed739c531207a2a958fd3279c9ef1606ab2c844aef056b618d9ca518",
    "transactionHash": "0x33b1915537ab24919360efe607cb43c9139882994914b9c2aa713fd673ee6c11",
    "logs": [],
    "blockNumber": 17568055,
    "cumulativeGasUsed": "1600687",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "78cc46043e41c3f17b198a83253a93e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getTrait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maci\",\"type\":\"address\"}],\"name\":\"setMaciInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTrait()\":{\"returns\":{\"_0\":\"The type of the gatekeeper\"}},\"register(address,bytes)\":{\"params\":{\"_data\":\"additional data\",\"_user\":\"The address of the user\"}},\"setMaciInstance(address)\":{\"params\":{\"_maci\":\"The MACI contract interface to be stored\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create a new instance of the gatekeeper\"},\"getTrait()\":{\"notice\":\"Get the trait of the gatekeeper\"},\"register(address,bytes)\":{\"notice\":\"Registers the user\"},\"setMaciInstance(address)\":{\"notice\":\"Adds an uninitialised MACI instance to allow for token signups\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/maci-contracts/DAOGateKeeper.sol\":\"DAOGatekeeper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/maci-contracts/DAOGateKeeper.sol\":{\"content\":\"pragma solidity ^0.8.20;\\n\\nimport { SignUpGatekeeper } from \\\"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract DAOGatekeeper is SignUpGatekeeper {\\n  /// @notice Create a new instance of the gatekeeper\\n  constructor() payable {\\n    // store the token address so it can be used\\n  }\\n\\n  /// @notice Adds an uninitialised MACI instance to allow for token signups\\n  /// @param _maci The MACI contract interface to be stored\\n  function setMaciInstance(address _maci) public override {}\\n\\n  // sigupgatekeeperData can be 0 byte 0x000000000\\n  // // initialVoiceCreditProxyData can be 0 byte 0x000000000\\n\\n  // keypair\\n  // import {Keypair} from \\\"maci-domaibobjs\\\";\\n  // const keypair = new Keypair()\\n\\n  function register(address _user, bytes memory _data) public view override {\\n    address tokenAddress = abi.decode(_data, (address));\\n    \\n    require(\\n      IERC20(tokenAddress).balanceOf(_user) > 0,\\n      \\\"DAOGatekeeper: user has no token\\\"\\n    );\\n    // no return just throw or not\\n  }\\n\\n  function getTrait() public pure override returns (string memory) {\\n    return \\\"DAOGatekeeper\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x3689db2341b9e0e2e89046eae9cf39daa4edcca498421fbb79aa0dde68324646\"},\"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SignUpGatekeeper\\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\\nabstract contract SignUpGatekeeper {\\n  /// @notice Allows to set the MACI contract\\n  // solhint-disable-next-line no-empty-blocks\\n  function setMaciInstance(address _maci) public virtual {}\\n\\n  /// @notice Registers the user\\n  /// @param _user The address of the user\\n  /// @param _data additional data\\n  // solhint-disable-next-line no-empty-blocks\\n  function register(address _user, bytes memory _data) public virtual {}\\n\\n  /// @notice Get the trait of the gatekeeper\\n  /// @return The type of the gatekeeper\\n  function getTrait() public pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x81eee8829ae3deeae2c4870c4ba6776e7512a08cfe52d7bb26a84fea6c193881\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405261030090816100128239f3fe6080604081815260048036101561001557600080fd5b600092833560e01c90816313e65cf31461025657816324b8fbf6146100ea575063cea9a2631461004457600080fd5b346100e657826003193601126100e6578151908282019082821067ffffffffffffffff8311176100d357508252600d81526020906c2220a7a3b0ba32b5b2b2b832b960991b8282015282519382859384528251928382860152825b8481106100bd57505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161009f565b634e487b7160e01b855260419052602484fd5b8280fd5b9192905034610252578060031936011261025257610106610277565b90602491823567ffffffffffffffff8082116102345736602383011215610234578187013590811161024057602095610148601f8301601f1916880182610292565b81815288878201933688858301011161023c578389948986930187378301015280518101031261023857516001600160a01b03808216929183900361023457848692855194859384926370a0823160e01b8452168a8301525afa90811561022a5786916101f9575b50156101ba578480f35b5162461bcd60e51b81529283018290528201527f44414f476174656b65657065723a207573657220686173206e6f20746f6b656e604482015260649150fd5b90508381813d8311610223575b6102108183610292565b8101031261021f5751386101b0565b8580fd5b503d610206565b82513d88823e3d90fd5b8780fd5b8680fd5b5080fd5b634e487b7160e01b8852604187528488fd5b8380fd5b843461027457602036600319011261027457610270610277565b5080f35b80fd5b600435906001600160a01b038216820361028d57565b600080fd5b90601f8019910116810190811067ffffffffffffffff8211176102b457604052565b634e487b7160e01b600052604160045260246000fdfea26469706673582212202db56ecae15174a97354a2a31121ffe7a9ee3255a960b7bb96cbc1f4d298100964736f6c63430008140033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816313e65cf31461025657816324b8fbf6146100ea575063cea9a2631461004457600080fd5b346100e657826003193601126100e6578151908282019082821067ffffffffffffffff8311176100d357508252600d81526020906c2220a7a3b0ba32b5b2b2b832b960991b8282015282519382859384528251928382860152825b8481106100bd57505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161009f565b634e487b7160e01b855260419052602484fd5b8280fd5b9192905034610252578060031936011261025257610106610277565b90602491823567ffffffffffffffff8082116102345736602383011215610234578187013590811161024057602095610148601f8301601f1916880182610292565b81815288878201933688858301011161023c578389948986930187378301015280518101031261023857516001600160a01b03808216929183900361023457848692855194859384926370a0823160e01b8452168a8301525afa90811561022a5786916101f9575b50156101ba578480f35b5162461bcd60e51b81529283018290528201527f44414f476174656b65657065723a207573657220686173206e6f20746f6b656e604482015260649150fd5b90508381813d8311610223575b6102108183610292565b8101031261021f5751386101b0565b8580fd5b503d610206565b82513d88823e3d90fd5b8780fd5b8680fd5b5080fd5b634e487b7160e01b8852604187528488fd5b8380fd5b843461027457602036600319011261027457610270610277565b5080f35b80fd5b600435906001600160a01b038216820361028d57565b600080fd5b90601f8019910116810190811067ffffffffffffffff8211176102b457604052565b634e487b7160e01b600052604160045260246000fdfea26469706673582212202db56ecae15174a97354a2a31121ffe7a9ee3255a960b7bb96cbc1f4d298100964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTrait()": {
        "returns": {
          "_0": "The type of the gatekeeper"
        }
      },
      "register(address,bytes)": {
        "params": {
          "_data": "additional data",
          "_user": "The address of the user"
        }
      },
      "setMaciInstance(address)": {
        "params": {
          "_maci": "The MACI contract interface to be stored"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create a new instance of the gatekeeper"
      },
      "getTrait()": {
        "notice": "Get the trait of the gatekeeper"
      },
      "register(address,bytes)": {
        "notice": "Registers the user"
      },
      "setMaciInstance(address)": {
        "notice": "Adds an uninitialised MACI instance to allow for token signups"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}